/* automatically generated by rust-bindgen 0.68.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ZE_MAX_IPC_HANDLE_SIZE: u32 = 64;
pub const ZE_MAX_UUID_SIZE: u32 = 16;
pub const ZE_MAX_DRIVER_UUID_SIZE: u32 = 16;
pub const ZE_MAX_EXTENSION_NAME: u32 = 256;
pub const ZE_MAX_DEVICE_UUID_SIZE: u32 = 16;
pub const ZE_MAX_DEVICE_NAME: u32 = 256;
pub const ZE_SUBGROUPSIZE_COUNT: u32 = 8;
pub const ZE_MAX_NATIVE_KERNEL_UUID_SIZE: u32 = 16;
pub const ZE_MAX_KERNEL_UUID_SIZE: u32 = 16;
pub const ZE_MAX_MODULE_UUID_SIZE: u32 = 16;
pub const ZE_MODULE_PROGRAM_EXP_NAME: &[u8; 31] = b"ZE_experimental_module_program\0";
pub const ZE_RAYTRACING_EXT_NAME: &[u8; 24] = b"ZE_extension_raytracing\0";
pub const ZE_FLOAT_ATOMICS_EXT_NAME: &[u8; 27] = b"ZE_extension_float_atomics\0";
pub const ZE_GLOBAL_OFFSET_EXP_NAME: &[u8; 30] = b"ZE_experimental_global_offset\0";
pub const ZE_RELAXED_ALLOCATION_LIMITS_EXP_NAME: &[u8; 42] =
    b"ZE_experimental_relaxed_allocation_limits\0";
pub const ZE_CACHE_RESERVATION_EXT_NAME: &[u8; 31] = b"ZE_extension_cache_reservation\0";
pub const ZE_EVENT_QUERY_TIMESTAMPS_EXP_NAME: &[u8; 39] =
    b"ZE_experimental_event_query_timestamps\0";
pub const ZE_IMAGE_MEMORY_PROPERTIES_EXP_NAME: &[u8; 40] =
    b"ZE_experimental_image_memory_properties\0";
pub const ZE_IMAGE_VIEW_EXT_NAME: &[u8; 24] = b"ZE_extension_image_view\0";
pub const ZE_IMAGE_VIEW_EXP_NAME: &[u8; 27] = b"ZE_experimental_image_view\0";
pub const ZE_IMAGE_VIEW_PLANAR_EXT_NAME: &[u8; 31] = b"ZE_extension_image_view_planar\0";
pub const ZE_IMAGE_VIEW_PLANAR_EXP_NAME: &[u8; 34] = b"ZE_experimental_image_view_planar\0";
pub const ZE_KERNEL_SCHEDULING_HINTS_EXP_NAME: &[u8; 33] = b"ZE_experimental_scheduling_hints\0";
pub const ZE_LINKONCE_ODR_EXT_NAME: &[u8; 26] = b"ZE_extension_linkonce_odr\0";
pub const ZE_CONTEXT_POWER_SAVING_HINT_EXP_NAME: &[u8; 34] = b"ZE_experimental_power_saving_hint\0";
pub const ZE_SUBGROUPS_EXT_NAME: &[u8; 23] = b"ZE_extension_subgroups\0";
pub const ZE_EU_COUNT_EXT_NAME: &[u8; 22] = b"ZE_extension_eu_count\0";
pub const ZE_PCI_PROPERTIES_EXT_NAME: &[u8; 28] = b"ZE_extension_pci_properties\0";
pub const ZE_SRGB_EXT_NAME: &[u8; 18] = b"ZE_extension_srgb\0";
pub const ZE_IMAGE_COPY_EXT_NAME: &[u8; 24] = b"ZE_extension_image_copy\0";
pub const ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_NAME: &[u8; 42] =
    b"ZE_extension_image_query_alloc_properties\0";
pub const ZE_LINKAGE_INSPECTION_EXT_NAME: &[u8; 32] = b"ZE_extension_linkage_inspection\0";
pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_NAME: &[u8; 38] =
    b"ZE_extension_memory_compression_hints\0";
pub const ZE_MEMORY_FREE_POLICIES_EXT_NAME: &[u8; 34] = b"ZE_extension_memory_free_policies\0";
pub const ZE_BANDWIDTH_PROPERTIES_EXP_NAME: &[u8; 37] = b"ZE_experimental_bandwidth_properties\0";
pub const ZE_DEVICE_LUID_EXT_NAME: &[u8; 25] = b"ZE_extension_device_luid\0";
pub const ZE_MAX_DEVICE_LUID_SIZE_EXT: u32 = 8;
pub const ZE_FABRIC_EXP_NAME: &[u8; 23] = b"ZE_experimental_fabric\0";
pub const ZE_MAX_FABRIC_EDGE_MODEL_EXP_SIZE: u32 = 256;
pub const ZE_DEVICE_MEMORY_PROPERTIES_EXT_NAME: &[u8; 38] =
    b"ZE_extension_device_memory_properties\0";
pub const ZE_BFLOAT16_CONVERSIONS_EXT_NAME: &[u8; 34] = b"ZE_extension_bfloat16_conversions\0";
pub const ZE_DEVICE_IP_VERSION_EXT_NAME: &[u8; 31] = b"ZE_extension_device_ip_version\0";
pub const ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_NAME: &[u8; 46] =
    b"ZE_extension_kernel_max_group_size_properties\0";
pub const ZE_SUB_ALLOCATIONS_EXP_NAME: &[u8; 32] = b"ZE_experimental_sub_allocations\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type ze_bool_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_handle_t {
    _unused: [u8; 0],
}
pub type ze_driver_handle_t = *mut _ze_driver_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_handle_t {
    _unused: [u8; 0],
}
pub type ze_device_handle_t = *mut _ze_device_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_handle_t {
    _unused: [u8; 0],
}
pub type ze_context_handle_t = *mut _ze_context_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_handle_t {
    _unused: [u8; 0],
}
pub type ze_command_queue_handle_t = *mut _ze_command_queue_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_handle_t {
    _unused: [u8; 0],
}
pub type ze_command_list_handle_t = *mut _ze_command_list_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_handle_t {
    _unused: [u8; 0],
}
pub type ze_fence_handle_t = *mut _ze_fence_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_handle_t {
    _unused: [u8; 0],
}
pub type ze_event_pool_handle_t = *mut _ze_event_pool_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_handle_t {
    _unused: [u8; 0],
}
pub type ze_event_handle_t = *mut _ze_event_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_handle_t {
    _unused: [u8; 0],
}
pub type ze_image_handle_t = *mut _ze_image_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_handle_t {
    _unused: [u8; 0],
}
pub type ze_module_handle_t = *mut _ze_module_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_build_log_handle_t {
    _unused: [u8; 0],
}
pub type ze_module_build_log_handle_t = *mut _ze_module_build_log_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_handle_t {
    _unused: [u8; 0],
}
pub type ze_kernel_handle_t = *mut _ze_kernel_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_sampler_handle_t {
    _unused: [u8; 0],
}
pub type ze_sampler_handle_t = *mut _ze_sampler_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_physical_mem_handle_t {
    _unused: [u8; 0],
}
pub type ze_physical_mem_handle_t = *mut _ze_physical_mem_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fabric_vertex_handle_t {
    _unused: [u8; 0],
}
pub type ze_fabric_vertex_handle_t = *mut _ze_fabric_vertex_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fabric_edge_handle_t {
    _unused: [u8; 0],
}
pub type ze_fabric_edge_handle_t = *mut _ze_fabric_edge_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_ipc_mem_handle_t {
    pub data: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__ze_ipc_mem_handle_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_ipc_mem_handle_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_ipc_mem_handle_t>(),
        64usize,
        concat!("Size of: ", stringify!(_ze_ipc_mem_handle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_ipc_mem_handle_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_ipc_mem_handle_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_ipc_mem_handle_t),
            "::",
            stringify!(data)
        )
    );
}
pub type ze_ipc_mem_handle_t = _ze_ipc_mem_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_ipc_event_pool_handle_t {
    pub data: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__ze_ipc_event_pool_handle_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_ipc_event_pool_handle_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_ipc_event_pool_handle_t>(),
        64usize,
        concat!("Size of: ", stringify!(_ze_ipc_event_pool_handle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_ipc_event_pool_handle_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_ipc_event_pool_handle_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_ipc_event_pool_handle_t),
            "::",
            stringify!(data)
        )
    );
}
pub type ze_ipc_event_pool_handle_t = _ze_ipc_event_pool_handle_t;
pub const _ze_result_t_ZE_RESULT_SUCCESS: _ze_result_t = 0;
pub const _ze_result_t_ZE_RESULT_NOT_READY: _ze_result_t = 1;
pub const _ze_result_t_ZE_RESULT_ERROR_DEVICE_LOST: _ze_result_t = 1879048193;
pub const _ze_result_t_ZE_RESULT_ERROR_OUT_OF_HOST_MEMORY: _ze_result_t = 1879048194;
pub const _ze_result_t_ZE_RESULT_ERROR_OUT_OF_DEVICE_MEMORY: _ze_result_t = 1879048195;
pub const _ze_result_t_ZE_RESULT_ERROR_MODULE_BUILD_FAILURE: _ze_result_t = 1879048196;
pub const _ze_result_t_ZE_RESULT_ERROR_MODULE_LINK_FAILURE: _ze_result_t = 1879048197;
pub const _ze_result_t_ZE_RESULT_ERROR_DEVICE_REQUIRES_RESET: _ze_result_t = 1879048198;
pub const _ze_result_t_ZE_RESULT_ERROR_DEVICE_IN_LOW_POWER_STATE: _ze_result_t = 1879048199;
pub const _ze_result_t_ZE_RESULT_EXP_ERROR_DEVICE_IS_NOT_VERTEX: _ze_result_t = 2146435073;
pub const _ze_result_t_ZE_RESULT_EXP_ERROR_VERTEX_IS_NOT_DEVICE: _ze_result_t = 2146435074;
pub const _ze_result_t_ZE_RESULT_EXP_ERROR_REMOTE_DEVICE: _ze_result_t = 2146435075;
pub const _ze_result_t_ZE_RESULT_ERROR_INSUFFICIENT_PERMISSIONS: _ze_result_t = 1879113728;
pub const _ze_result_t_ZE_RESULT_ERROR_NOT_AVAILABLE: _ze_result_t = 1879113729;
pub const _ze_result_t_ZE_RESULT_ERROR_DEPENDENCY_UNAVAILABLE: _ze_result_t = 1879179264;
pub const _ze_result_t_ZE_RESULT_WARNING_DROPPED_DATA: _ze_result_t = 1879179265;
pub const _ze_result_t_ZE_RESULT_ERROR_UNINITIALIZED: _ze_result_t = 2013265921;
pub const _ze_result_t_ZE_RESULT_ERROR_UNSUPPORTED_VERSION: _ze_result_t = 2013265922;
pub const _ze_result_t_ZE_RESULT_ERROR_UNSUPPORTED_FEATURE: _ze_result_t = 2013265923;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_ARGUMENT: _ze_result_t = 2013265924;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_NULL_HANDLE: _ze_result_t = 2013265925;
pub const _ze_result_t_ZE_RESULT_ERROR_HANDLE_OBJECT_IN_USE: _ze_result_t = 2013265926;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_NULL_POINTER: _ze_result_t = 2013265927;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_SIZE: _ze_result_t = 2013265928;
pub const _ze_result_t_ZE_RESULT_ERROR_UNSUPPORTED_SIZE: _ze_result_t = 2013265929;
pub const _ze_result_t_ZE_RESULT_ERROR_UNSUPPORTED_ALIGNMENT: _ze_result_t = 2013265930;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT: _ze_result_t = 2013265931;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_ENUMERATION: _ze_result_t = 2013265932;
pub const _ze_result_t_ZE_RESULT_ERROR_UNSUPPORTED_ENUMERATION: _ze_result_t = 2013265933;
pub const _ze_result_t_ZE_RESULT_ERROR_UNSUPPORTED_IMAGE_FORMAT: _ze_result_t = 2013265934;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_NATIVE_BINARY: _ze_result_t = 2013265935;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_GLOBAL_NAME: _ze_result_t = 2013265936;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_KERNEL_NAME: _ze_result_t = 2013265937;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_FUNCTION_NAME: _ze_result_t = 2013265938;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_GROUP_SIZE_DIMENSION: _ze_result_t = 2013265939;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_GLOBAL_WIDTH_DIMENSION: _ze_result_t = 2013265940;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX: _ze_result_t = 2013265941;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_SIZE: _ze_result_t = 2013265942;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_KERNEL_ATTRIBUTE_VALUE: _ze_result_t = 2013265943;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_MODULE_UNLINKED: _ze_result_t = 2013265944;
pub const _ze_result_t_ZE_RESULT_ERROR_INVALID_COMMAND_LIST_TYPE: _ze_result_t = 2013265945;
pub const _ze_result_t_ZE_RESULT_ERROR_OVERLAPPING_REGIONS: _ze_result_t = 2013265946;
pub const _ze_result_t_ZE_RESULT_WARNING_ACTION_REQUIRED: _ze_result_t = 2013265947;
pub const _ze_result_t_ZE_RESULT_ERROR_UNKNOWN: _ze_result_t = 2147483646;
pub const _ze_result_t_ZE_RESULT_FORCE_UINT32: _ze_result_t = 2147483647;
pub type _ze_result_t = ::std::os::raw::c_uint;
pub use self::_ze_result_t as ze_result_t;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DRIVER_PROPERTIES: _ze_structure_type_t = 1;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DRIVER_IPC_PROPERTIES: _ze_structure_type_t = 2;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_PROPERTIES: _ze_structure_type_t = 3;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_COMPUTE_PROPERTIES: _ze_structure_type_t =
    4;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_MODULE_PROPERTIES: _ze_structure_type_t = 5;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_COMMAND_QUEUE_GROUP_PROPERTIES:
    _ze_structure_type_t = 6;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_MEMORY_PROPERTIES: _ze_structure_type_t = 7;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_MEMORY_ACCESS_PROPERTIES:
    _ze_structure_type_t = 8;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_CACHE_PROPERTIES: _ze_structure_type_t = 9;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_IMAGE_PROPERTIES: _ze_structure_type_t = 10;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_P2P_PROPERTIES: _ze_structure_type_t = 11;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_EXTERNAL_MEMORY_PROPERTIES:
    _ze_structure_type_t = 12;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_CONTEXT_DESC: _ze_structure_type_t = 13;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_COMMAND_QUEUE_DESC: _ze_structure_type_t = 14;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_COMMAND_LIST_DESC: _ze_structure_type_t = 15;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EVENT_POOL_DESC: _ze_structure_type_t = 16;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EVENT_DESC: _ze_structure_type_t = 17;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_FENCE_DESC: _ze_structure_type_t = 18;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_IMAGE_DESC: _ze_structure_type_t = 19;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_IMAGE_PROPERTIES: _ze_structure_type_t = 20;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_MEM_ALLOC_DESC: _ze_structure_type_t = 21;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_HOST_MEM_ALLOC_DESC: _ze_structure_type_t = 22;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_MEMORY_ALLOCATION_PROPERTIES:
    _ze_structure_type_t = 23;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_EXPORT_DESC: _ze_structure_type_t =
    24;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMPORT_FD: _ze_structure_type_t =
    25;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_EXPORT_FD: _ze_structure_type_t =
    26;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_MODULE_DESC: _ze_structure_type_t = 27;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_MODULE_PROPERTIES: _ze_structure_type_t = 28;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_KERNEL_DESC: _ze_structure_type_t = 29;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_KERNEL_PROPERTIES: _ze_structure_type_t = 30;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_SAMPLER_DESC: _ze_structure_type_t = 31;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_PHYSICAL_MEM_DESC: _ze_structure_type_t = 32;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_KERNEL_PREFERRED_GROUP_SIZE_PROPERTIES:
    _ze_structure_type_t = 33;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMPORT_WIN32:
    _ze_structure_type_t = 34;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_EXPORT_WIN32:
    _ze_structure_type_t = 35;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_RAYTRACING_EXT_PROPERTIES:
    _ze_structure_type_t = 65537;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_RAYTRACING_MEM_ALLOC_EXT_DESC:
    _ze_structure_type_t = 65538;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_FLOAT_ATOMIC_EXT_PROPERTIES: _ze_structure_type_t =
    65539;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_CACHE_RESERVATION_EXT_DESC: _ze_structure_type_t =
    65540;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_EU_COUNT_EXT: _ze_structure_type_t = 65541;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_SRGB_EXT_DESC: _ze_structure_type_t = 65542;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_LINKAGE_INSPECTION_EXT_DESC: _ze_structure_type_t =
    65543;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_PCI_EXT_PROPERTIES: _ze_structure_type_t = 65544;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DRIVER_MEMORY_FREE_EXT_PROPERTIES:
    _ze_structure_type_t = 65545;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_MEMORY_FREE_EXT_DESC: _ze_structure_type_t = 65546;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_MEMORY_COMPRESSION_HINTS_EXT_DESC:
    _ze_structure_type_t = 65547;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_IMAGE_ALLOCATION_EXT_PROPERTIES:
    _ze_structure_type_t = 65548;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_LUID_EXT_PROPERTIES: _ze_structure_type_t =
    65549;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_MEMORY_EXT_PROPERTIES:
    _ze_structure_type_t = 65550;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_IP_VERSION_EXT: _ze_structure_type_t =
    65551;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_IMAGE_VIEW_PLANAR_EXT_DESC: _ze_structure_type_t =
    65552;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_RELAXED_ALLOCATION_LIMITS_EXP_DESC:
    _ze_structure_type_t = 131073;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_MODULE_PROGRAM_EXP_DESC: _ze_structure_type_t =
    131074;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_SCHEDULING_HINT_EXP_PROPERTIES:
    _ze_structure_type_t = 131075;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_SCHEDULING_HINT_EXP_DESC: _ze_structure_type_t =
    131076;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_IMAGE_VIEW_PLANAR_EXP_DESC: _ze_structure_type_t =
    131077;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_PROPERTIES_1_2: _ze_structure_type_t =
    131078;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_IMAGE_MEMORY_EXP_PROPERTIES: _ze_structure_type_t =
    131079;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_POWER_SAVING_HINT_EXP_DESC: _ze_structure_type_t =
    131080;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_COPY_BANDWIDTH_EXP_PROPERTIES:
    _ze_structure_type_t = 131081;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_DEVICE_P2P_BANDWIDTH_EXP_PROPERTIES:
    _ze_structure_type_t = 131082;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_FABRIC_VERTEX_EXP_PROPERTIES:
    _ze_structure_type_t = 131083;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_FABRIC_EDGE_EXP_PROPERTIES: _ze_structure_type_t =
    131084;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_MEMORY_SUB_ALLOCATIONS_EXP_PROPERTIES:
    _ze_structure_type_t = 131085;
pub const _ze_structure_type_t_ZE_STRUCTURE_TYPE_FORCE_UINT32: _ze_structure_type_t = 2147483647;
pub type _ze_structure_type_t = ::std::os::raw::c_uint;
pub use self::_ze_structure_type_t as ze_structure_type_t;
pub type ze_external_memory_type_flags_t = u32;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_FD:
    _ze_external_memory_type_flag_t = 1;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_DMA_BUF:
    _ze_external_memory_type_flag_t = 2;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32:
    _ze_external_memory_type_flag_t = 4;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32_KMT:
    _ze_external_memory_type_flag_t = 8;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE:
    _ze_external_memory_type_flag_t = 16;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE_KMT:
    _ze_external_memory_type_flag_t = 32;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_HEAP:
    _ze_external_memory_type_flag_t = 64;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_RESOURCE:
    _ze_external_memory_type_flag_t = 128;
pub const _ze_external_memory_type_flag_t_ZE_EXTERNAL_MEMORY_TYPE_FLAG_FORCE_UINT32:
    _ze_external_memory_type_flag_t = 2147483647;
pub type _ze_external_memory_type_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_external_memory_type_flag_t as ze_external_memory_type_flag_t;
pub const _ze_bandwidth_unit_t_ZE_BANDWIDTH_UNIT_UNKNOWN: _ze_bandwidth_unit_t = 0;
pub const _ze_bandwidth_unit_t_ZE_BANDWIDTH_UNIT_BYTES_PER_NANOSEC: _ze_bandwidth_unit_t = 1;
pub const _ze_bandwidth_unit_t_ZE_BANDWIDTH_UNIT_BYTES_PER_CLOCK: _ze_bandwidth_unit_t = 2;
pub const _ze_bandwidth_unit_t_ZE_BANDWIDTH_UNIT_FORCE_UINT32: _ze_bandwidth_unit_t = 2147483647;
pub type _ze_bandwidth_unit_t = ::std::os::raw::c_uint;
pub use self::_ze_bandwidth_unit_t as ze_bandwidth_unit_t;
pub const _ze_latency_unit_t_ZE_LATENCY_UNIT_UNKNOWN: _ze_latency_unit_t = 0;
pub const _ze_latency_unit_t_ZE_LATENCY_UNIT_NANOSEC: _ze_latency_unit_t = 1;
pub const _ze_latency_unit_t_ZE_LATENCY_UNIT_CLOCK: _ze_latency_unit_t = 2;
pub const _ze_latency_unit_t_ZE_LATENCY_UNIT_HOP: _ze_latency_unit_t = 3;
pub const _ze_latency_unit_t_ZE_LATENCY_UNIT_FORCE_UINT32: _ze_latency_unit_t = 2147483647;
pub type _ze_latency_unit_t = ::std::os::raw::c_uint;
pub use self::_ze_latency_unit_t as ze_latency_unit_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_uuid_t {
    pub id: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__ze_uuid_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_uuid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_uuid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_uuid_t),
            "::",
            stringify!(id)
        )
    );
}
pub type ze_uuid_t = _ze_uuid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_base_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_base_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_base_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_base_properties_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_base_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_base_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_base_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_base_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_base_properties_t),
            "::",
            stringify!(pNext)
        )
    );
}
pub type ze_base_properties_t = _ze_base_properties_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_base_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_base_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_base_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_base_desc_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_base_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_base_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_base_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_base_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_base_desc_t),
            "::",
            stringify!(pNext)
        )
    );
}
pub type ze_base_desc_t = _ze_base_desc_t;
pub type ze_driver_uuid_t = _ze_driver_uuid_t;
pub type ze_driver_properties_t = _ze_driver_properties_t;
pub type ze_driver_ipc_properties_t = _ze_driver_ipc_properties_t;
pub type ze_driver_extension_properties_t = _ze_driver_extension_properties_t;
pub type ze_device_uuid_t = _ze_device_uuid_t;
pub type ze_device_properties_t = _ze_device_properties_t;
pub type ze_device_thread_t = _ze_device_thread_t;
pub type ze_device_compute_properties_t = _ze_device_compute_properties_t;
pub type ze_native_kernel_uuid_t = _ze_native_kernel_uuid_t;
pub type ze_device_module_properties_t = _ze_device_module_properties_t;
pub type ze_command_queue_group_properties_t = _ze_command_queue_group_properties_t;
pub type ze_device_memory_properties_t = _ze_device_memory_properties_t;
pub type ze_device_memory_access_properties_t = _ze_device_memory_access_properties_t;
pub type ze_device_cache_properties_t = _ze_device_cache_properties_t;
pub type ze_device_image_properties_t = _ze_device_image_properties_t;
pub type ze_device_external_memory_properties_t = _ze_device_external_memory_properties_t;
pub type ze_device_p2p_properties_t = _ze_device_p2p_properties_t;
pub type ze_context_desc_t = _ze_context_desc_t;
pub type ze_command_queue_desc_t = _ze_command_queue_desc_t;
pub type ze_command_list_desc_t = _ze_command_list_desc_t;
pub type ze_copy_region_t = _ze_copy_region_t;
pub type ze_image_region_t = _ze_image_region_t;
pub type ze_event_pool_desc_t = _ze_event_pool_desc_t;
pub type ze_event_desc_t = _ze_event_desc_t;
pub type ze_kernel_timestamp_data_t = _ze_kernel_timestamp_data_t;
pub type ze_kernel_timestamp_result_t = _ze_kernel_timestamp_result_t;
pub type ze_fence_desc_t = _ze_fence_desc_t;
pub type ze_image_format_t = _ze_image_format_t;
pub type ze_image_desc_t = _ze_image_desc_t;
pub type ze_image_properties_t = _ze_image_properties_t;
pub type ze_device_mem_alloc_desc_t = _ze_device_mem_alloc_desc_t;
pub type ze_host_mem_alloc_desc_t = _ze_host_mem_alloc_desc_t;
pub type ze_memory_allocation_properties_t = _ze_memory_allocation_properties_t;
pub type ze_external_memory_export_desc_t = _ze_external_memory_export_desc_t;
pub type ze_external_memory_import_fd_t = _ze_external_memory_import_fd_t;
pub type ze_external_memory_export_fd_t = _ze_external_memory_export_fd_t;
pub type ze_external_memory_import_win32_handle_t = _ze_external_memory_import_win32_handle_t;
pub type ze_external_memory_export_win32_handle_t = _ze_external_memory_export_win32_handle_t;
pub type ze_module_constants_t = _ze_module_constants_t;
pub type ze_module_desc_t = _ze_module_desc_t;
pub type ze_module_properties_t = _ze_module_properties_t;
pub type ze_kernel_desc_t = _ze_kernel_desc_t;
pub type ze_kernel_uuid_t = _ze_kernel_uuid_t;
pub type ze_kernel_properties_t = _ze_kernel_properties_t;
pub type ze_kernel_preferred_group_size_properties_t = _ze_kernel_preferred_group_size_properties_t;
pub type ze_group_count_t = _ze_group_count_t;
pub type ze_module_program_exp_desc_t = _ze_module_program_exp_desc_t;
pub type ze_device_raytracing_ext_properties_t = _ze_device_raytracing_ext_properties_t;
pub type ze_raytracing_mem_alloc_ext_desc_t = _ze_raytracing_mem_alloc_ext_desc_t;
pub type ze_sampler_desc_t = _ze_sampler_desc_t;
pub type ze_physical_mem_desc_t = _ze_physical_mem_desc_t;
pub type ze_float_atomic_ext_properties_t = _ze_float_atomic_ext_properties_t;
pub type ze_relaxed_allocation_limits_exp_desc_t = _ze_relaxed_allocation_limits_exp_desc_t;
pub type ze_cache_reservation_ext_desc_t = _ze_cache_reservation_ext_desc_t;
pub type ze_image_memory_properties_exp_t = _ze_image_memory_properties_exp_t;
pub type ze_image_view_planar_ext_desc_t = _ze_image_view_planar_ext_desc_t;
pub type ze_image_view_planar_exp_desc_t = _ze_image_view_planar_exp_desc_t;
pub type ze_scheduling_hint_exp_properties_t = _ze_scheduling_hint_exp_properties_t;
pub type ze_scheduling_hint_exp_desc_t = _ze_scheduling_hint_exp_desc_t;
pub type ze_context_power_saving_hint_exp_desc_t = _ze_context_power_saving_hint_exp_desc_t;
pub type ze_eu_count_ext_t = _ze_eu_count_ext_t;
pub type ze_pci_address_ext_t = _ze_pci_address_ext_t;
pub type ze_pci_speed_ext_t = _ze_pci_speed_ext_t;
pub type ze_pci_ext_properties_t = _ze_pci_ext_properties_t;
pub type ze_srgb_ext_desc_t = _ze_srgb_ext_desc_t;
pub type ze_image_allocation_ext_properties_t = _ze_image_allocation_ext_properties_t;
pub type ze_linkage_inspection_ext_desc_t = _ze_linkage_inspection_ext_desc_t;
pub type ze_memory_compression_hints_ext_desc_t = _ze_memory_compression_hints_ext_desc_t;
pub type ze_driver_memory_free_ext_properties_t = _ze_driver_memory_free_ext_properties_t;
pub type ze_memory_free_ext_desc_t = _ze_memory_free_ext_desc_t;
pub type ze_device_p2p_bandwidth_exp_properties_t = _ze_device_p2p_bandwidth_exp_properties_t;
pub type ze_copy_bandwidth_exp_properties_t = _ze_copy_bandwidth_exp_properties_t;
pub type ze_device_luid_ext_t = _ze_device_luid_ext_t;
pub type ze_device_luid_ext_properties_t = _ze_device_luid_ext_properties_t;
pub type ze_fabric_vertex_pci_exp_address_t = _ze_fabric_vertex_pci_exp_address_t;
pub type ze_fabric_vertex_exp_properties_t = _ze_fabric_vertex_exp_properties_t;
pub type ze_fabric_edge_exp_properties_t = _ze_fabric_edge_exp_properties_t;
pub type ze_device_memory_ext_properties_t = _ze_device_memory_ext_properties_t;
pub type ze_device_ip_version_ext_t = _ze_device_ip_version_ext_t;
pub type ze_kernel_max_group_size_properties_ext_t = _ze_kernel_max_group_size_properties_ext_t;
pub type ze_sub_allocation_t = _ze_sub_allocation_t;
pub type ze_memory_sub_allocations_exp_properties_t = _ze_memory_sub_allocations_exp_properties_t;
pub type ze_init_flags_t = u32;
pub const _ze_init_flag_t_ZE_INIT_FLAG_GPU_ONLY: _ze_init_flag_t = 1;
pub const _ze_init_flag_t_ZE_INIT_FLAG_VPU_ONLY: _ze_init_flag_t = 2;
pub const _ze_init_flag_t_ZE_INIT_FLAG_FORCE_UINT32: _ze_init_flag_t = 2147483647;
pub type _ze_init_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_init_flag_t as ze_init_flag_t;
extern "C" {
    pub fn zeInit(flags: ze_init_flags_t) -> ze_result_t;
}
extern "C" {
    pub fn zeDriverGet(pCount: *mut u32, phDrivers: *mut ze_driver_handle_t) -> ze_result_t;
}
pub const _ze_api_version_t_ZE_API_VERSION_1_0: _ze_api_version_t = 65536;
pub const _ze_api_version_t_ZE_API_VERSION_1_1: _ze_api_version_t = 65537;
pub const _ze_api_version_t_ZE_API_VERSION_1_2: _ze_api_version_t = 65538;
pub const _ze_api_version_t_ZE_API_VERSION_1_3: _ze_api_version_t = 65539;
pub const _ze_api_version_t_ZE_API_VERSION_1_4: _ze_api_version_t = 65540;
pub const _ze_api_version_t_ZE_API_VERSION_1_5: _ze_api_version_t = 65541;
pub const _ze_api_version_t_ZE_API_VERSION_CURRENT: _ze_api_version_t = 65541;
pub const _ze_api_version_t_ZE_API_VERSION_FORCE_UINT32: _ze_api_version_t = 2147483647;
pub type _ze_api_version_t = ::std::os::raw::c_uint;
pub use self::_ze_api_version_t as ze_api_version_t;
extern "C" {
    pub fn zeDriverGetApiVersion(
        hDriver: ze_driver_handle_t,
        version: *mut ze_api_version_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_uuid_t {
    pub id: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__ze_driver_uuid_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_uuid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_driver_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_driver_uuid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_uuid_t),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub uuid: ze_driver_uuid_t,
    pub driverVersion: u32,
}
#[test]
fn bindgen_test_layout__ze_driver_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_properties_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_driver_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_driver_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_properties_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverVersion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_properties_t),
            "::",
            stringify!(driverVersion)
        )
    );
}
extern "C" {
    pub fn zeDriverGetProperties(
        hDriver: ze_driver_handle_t,
        pDriverProperties: *mut ze_driver_properties_t,
    ) -> ze_result_t;
}
pub type ze_ipc_property_flags_t = u32;
pub const _ze_ipc_property_flag_t_ZE_IPC_PROPERTY_FLAG_MEMORY: _ze_ipc_property_flag_t = 1;
pub const _ze_ipc_property_flag_t_ZE_IPC_PROPERTY_FLAG_EVENT_POOL: _ze_ipc_property_flag_t = 2;
pub const _ze_ipc_property_flag_t_ZE_IPC_PROPERTY_FLAG_FORCE_UINT32: _ze_ipc_property_flag_t =
    2147483647;
pub type _ze_ipc_property_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_ipc_property_flag_t as ze_ipc_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_ipc_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: ze_ipc_property_flags_t,
}
#[test]
fn bindgen_test_layout__ze_driver_ipc_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_ipc_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_ipc_properties_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_driver_ipc_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_ipc_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_driver_ipc_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_ipc_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_ipc_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_ipc_properties_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeDriverGetIpcProperties(
        hDriver: ze_driver_handle_t,
        pIpcProperties: *mut ze_driver_ipc_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_extension_properties_t {
    pub name: [::std::os::raw::c_char; 256usize],
    pub version: u32,
}
#[test]
fn bindgen_test_layout__ze_driver_extension_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_extension_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_extension_properties_t>(),
        260usize,
        concat!("Size of: ", stringify!(_ze_driver_extension_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_extension_properties_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_driver_extension_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_extension_properties_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_extension_properties_t),
            "::",
            stringify!(version)
        )
    );
}
extern "C" {
    pub fn zeDriverGetExtensionProperties(
        hDriver: ze_driver_handle_t,
        pCount: *mut u32,
        pExtensionProperties: *mut ze_driver_extension_properties_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeDriverGetExtensionFunctionAddress(
        hDriver: ze_driver_handle_t,
        name: *const ::std::os::raw::c_char,
        ppFunctionAddress: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeDeviceGet(
        hDriver: ze_driver_handle_t,
        pCount: *mut u32,
        phDevices: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeDeviceGetSubDevices(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        phSubdevices: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
pub const _ze_device_type_t_ZE_DEVICE_TYPE_GPU: _ze_device_type_t = 1;
pub const _ze_device_type_t_ZE_DEVICE_TYPE_CPU: _ze_device_type_t = 2;
pub const _ze_device_type_t_ZE_DEVICE_TYPE_FPGA: _ze_device_type_t = 3;
pub const _ze_device_type_t_ZE_DEVICE_TYPE_MCA: _ze_device_type_t = 4;
pub const _ze_device_type_t_ZE_DEVICE_TYPE_VPU: _ze_device_type_t = 5;
pub const _ze_device_type_t_ZE_DEVICE_TYPE_FORCE_UINT32: _ze_device_type_t = 2147483647;
pub type _ze_device_type_t = ::std::os::raw::c_uint;
pub use self::_ze_device_type_t as ze_device_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_uuid_t {
    pub id: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__ze_device_uuid_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_uuid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_device_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_device_uuid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_uuid_t),
            "::",
            stringify!(id)
        )
    );
}
pub type ze_device_property_flags_t = u32;
pub const _ze_device_property_flag_t_ZE_DEVICE_PROPERTY_FLAG_INTEGRATED:
    _ze_device_property_flag_t = 1;
pub const _ze_device_property_flag_t_ZE_DEVICE_PROPERTY_FLAG_SUBDEVICE: _ze_device_property_flag_t =
    2;
pub const _ze_device_property_flag_t_ZE_DEVICE_PROPERTY_FLAG_ECC: _ze_device_property_flag_t = 4;
pub const _ze_device_property_flag_t_ZE_DEVICE_PROPERTY_FLAG_ONDEMANDPAGING:
    _ze_device_property_flag_t = 8;
pub const _ze_device_property_flag_t_ZE_DEVICE_PROPERTY_FLAG_FORCE_UINT32:
    _ze_device_property_flag_t = 2147483647;
pub type _ze_device_property_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_property_flag_t as ze_device_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub type_: ze_device_type_t,
    pub vendorId: u32,
    pub deviceId: u32,
    pub flags: ze_device_property_flags_t,
    pub subdeviceId: u32,
    pub coreClockRate: u32,
    pub maxMemAllocSize: u64,
    pub maxHardwareContexts: u32,
    pub maxCommandQueuePriority: u32,
    pub numThreadsPerEU: u32,
    pub physicalEUSimdWidth: u32,
    pub numEUsPerSubslice: u32,
    pub numSubslicesPerSlice: u32,
    pub numSlices: u32,
    pub timerResolution: u64,
    pub timestampValidBits: u32,
    pub kernelTimestampValidBits: u32,
    pub uuid: ze_device_uuid_t,
    pub name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout__ze_device_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_properties_t>(),
        368usize,
        concat!("Size of: ", stringify!(_ze_device_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorId) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subdeviceId) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(subdeviceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coreClockRate) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(coreClockRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMemAllocSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(maxMemAllocSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxHardwareContexts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(maxHardwareContexts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCommandQueuePriority) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(maxCommandQueuePriority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numThreadsPerEU) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(numThreadsPerEU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalEUSimdWidth) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(physicalEUSimdWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numEUsPerSubslice) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(numEUsPerSubslice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSubslicesPerSlice) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(numSubslicesPerSlice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSlices) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(numSlices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timerResolution) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(timerResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestampValidBits) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(timestampValidBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelTimestampValidBits) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(kernelTimestampValidBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_properties_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_thread_t {
    pub slice: u32,
    pub subslice: u32,
    pub eu: u32,
    pub thread: u32,
}
#[test]
fn bindgen_test_layout__ze_device_thread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_thread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_thread_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_device_thread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_thread_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ze_device_thread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_thread_t),
            "::",
            stringify!(slice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subslice) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_thread_t),
            "::",
            stringify!(subslice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_thread_t),
            "::",
            stringify!(eu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_thread_t),
            "::",
            stringify!(thread)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetProperties(
        hDevice: ze_device_handle_t,
        pDeviceProperties: *mut ze_device_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_compute_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTotalGroupSize: u32,
    pub maxGroupSizeX: u32,
    pub maxGroupSizeY: u32,
    pub maxGroupSizeZ: u32,
    pub maxGroupCountX: u32,
    pub maxGroupCountY: u32,
    pub maxGroupCountZ: u32,
    pub maxSharedLocalMemory: u32,
    pub numSubGroupSizes: u32,
    pub subGroupSizes: [u32; 8usize],
}
#[test]
fn bindgen_test_layout__ze_device_compute_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_compute_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_compute_properties_t>(),
        88usize,
        concat!("Size of: ", stringify!(_ze_device_compute_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_compute_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_compute_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTotalGroupSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxTotalGroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGroupSizeX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxGroupSizeX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGroupSizeY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxGroupSizeY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGroupSizeZ) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxGroupSizeZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGroupCountX) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxGroupCountX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGroupCountY) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxGroupCountY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGroupCountZ) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxGroupCountZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSharedLocalMemory) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(maxSharedLocalMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSubGroupSizes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(numSubGroupSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subGroupSizes) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_compute_properties_t),
            "::",
            stringify!(subGroupSizes)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetComputeProperties(
        hDevice: ze_device_handle_t,
        pComputeProperties: *mut ze_device_compute_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_native_kernel_uuid_t {
    pub id: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__ze_native_kernel_uuid_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_native_kernel_uuid_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_native_kernel_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_native_kernel_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_native_kernel_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_native_kernel_uuid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_native_kernel_uuid_t),
            "::",
            stringify!(id)
        )
    );
}
pub type ze_device_module_flags_t = u32;
pub const _ze_device_module_flag_t_ZE_DEVICE_MODULE_FLAG_FP16: _ze_device_module_flag_t = 1;
pub const _ze_device_module_flag_t_ZE_DEVICE_MODULE_FLAG_FP64: _ze_device_module_flag_t = 2;
pub const _ze_device_module_flag_t_ZE_DEVICE_MODULE_FLAG_INT64_ATOMICS: _ze_device_module_flag_t =
    4;
pub const _ze_device_module_flag_t_ZE_DEVICE_MODULE_FLAG_DP4A: _ze_device_module_flag_t = 8;
pub const _ze_device_module_flag_t_ZE_DEVICE_MODULE_FLAG_FORCE_UINT32: _ze_device_module_flag_t =
    2147483647;
pub type _ze_device_module_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_module_flag_t as ze_device_module_flag_t;
pub type ze_device_fp_flags_t = u32;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_DENORM: _ze_device_fp_flag_t = 1;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_INF_NAN: _ze_device_fp_flag_t = 2;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_ROUND_TO_NEAREST: _ze_device_fp_flag_t = 4;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_ROUND_TO_ZERO: _ze_device_fp_flag_t = 8;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_ROUND_TO_INF: _ze_device_fp_flag_t = 16;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_FMA: _ze_device_fp_flag_t = 32;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_ROUNDED_DIVIDE_SQRT: _ze_device_fp_flag_t = 64;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_SOFT_FLOAT: _ze_device_fp_flag_t = 128;
pub const _ze_device_fp_flag_t_ZE_DEVICE_FP_FLAG_FORCE_UINT32: _ze_device_fp_flag_t = 2147483647;
pub type _ze_device_fp_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_fp_flag_t as ze_device_fp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_module_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub spirvVersionSupported: u32,
    pub flags: ze_device_module_flags_t,
    pub fp16flags: ze_device_fp_flags_t,
    pub fp32flags: ze_device_fp_flags_t,
    pub fp64flags: ze_device_fp_flags_t,
    pub maxArgumentsSize: u32,
    pub printfBufferSize: u32,
    pub nativeKernelSupported: ze_native_kernel_uuid_t,
}
#[test]
fn bindgen_test_layout__ze_device_module_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_module_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_module_properties_t>(),
        64usize,
        concat!("Size of: ", stringify!(_ze_device_module_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_module_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_module_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spirvVersionSupported) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(spirvVersionSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp16flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(fp16flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp32flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(fp32flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp64flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(fp64flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxArgumentsSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(maxArgumentsSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).printfBufferSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(printfBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nativeKernelSupported) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_module_properties_t),
            "::",
            stringify!(nativeKernelSupported)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetModuleProperties(
        hDevice: ze_device_handle_t,
        pModuleProperties: *mut ze_device_module_properties_t,
    ) -> ze_result_t;
}
pub type ze_command_queue_group_property_flags_t = u32;
pub const _ze_command_queue_group_property_flag_t_ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_COMPUTE:
    _ze_command_queue_group_property_flag_t = 1;
pub const _ze_command_queue_group_property_flag_t_ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_COPY:
    _ze_command_queue_group_property_flag_t = 2;
pub const _ze_command_queue_group_property_flag_t_ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_COOPERATIVE_KERNELS : _ze_command_queue_group_property_flag_t = 4 ;
pub const _ze_command_queue_group_property_flag_t_ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_METRICS:
    _ze_command_queue_group_property_flag_t = 8;
pub const _ze_command_queue_group_property_flag_t_ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_FORCE_UINT32 : _ze_command_queue_group_property_flag_t = 2147483647 ;
pub type _ze_command_queue_group_property_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_command_queue_group_property_flag_t as ze_command_queue_group_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_group_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: ze_command_queue_group_property_flags_t,
    pub maxMemoryFillPatternSize: usize,
    pub numQueues: u32,
}
#[test]
fn bindgen_test_layout__ze_command_queue_group_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_queue_group_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_queue_group_properties_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_queue_group_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_queue_group_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_queue_group_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_group_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_group_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_group_properties_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMemoryFillPatternSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_group_properties_t),
            "::",
            stringify!(maxMemoryFillPatternSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numQueues) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_group_properties_t),
            "::",
            stringify!(numQueues)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetCommandQueueGroupProperties(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pCommandQueueGroupProperties: *mut ze_command_queue_group_properties_t,
    ) -> ze_result_t;
}
pub type ze_device_memory_property_flags_t = u32;
pub const _ze_device_memory_property_flag_t_ZE_DEVICE_MEMORY_PROPERTY_FLAG_TBD:
    _ze_device_memory_property_flag_t = 1;
pub const _ze_device_memory_property_flag_t_ZE_DEVICE_MEMORY_PROPERTY_FLAG_FORCE_UINT32:
    _ze_device_memory_property_flag_t = 2147483647;
pub type _ze_device_memory_property_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_memory_property_flag_t as ze_device_memory_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_memory_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: ze_device_memory_property_flags_t,
    pub maxClockRate: u32,
    pub maxBusWidth: u32,
    pub totalSize: u64,
    pub name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout__ze_device_memory_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_memory_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_memory_properties_t>(),
        296usize,
        concat!("Size of: ", stringify!(_ze_device_memory_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_memory_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_memory_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_properties_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxClockRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_properties_t),
            "::",
            stringify!(maxClockRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBusWidth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_properties_t),
            "::",
            stringify!(maxBusWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_properties_t),
            "::",
            stringify!(totalSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_properties_t),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetMemoryProperties(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pMemProperties: *mut ze_device_memory_properties_t,
    ) -> ze_result_t;
}
pub type ze_memory_access_cap_flags_t = u32;
pub const _ze_memory_access_cap_flag_t_ZE_MEMORY_ACCESS_CAP_FLAG_RW: _ze_memory_access_cap_flag_t =
    1;
pub const _ze_memory_access_cap_flag_t_ZE_MEMORY_ACCESS_CAP_FLAG_ATOMIC:
    _ze_memory_access_cap_flag_t = 2;
pub const _ze_memory_access_cap_flag_t_ZE_MEMORY_ACCESS_CAP_FLAG_CONCURRENT:
    _ze_memory_access_cap_flag_t = 4;
pub const _ze_memory_access_cap_flag_t_ZE_MEMORY_ACCESS_CAP_FLAG_CONCURRENT_ATOMIC:
    _ze_memory_access_cap_flag_t = 8;
pub const _ze_memory_access_cap_flag_t_ZE_MEMORY_ACCESS_CAP_FLAG_FORCE_UINT32:
    _ze_memory_access_cap_flag_t = 2147483647;
pub type _ze_memory_access_cap_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_memory_access_cap_flag_t as ze_memory_access_cap_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_memory_access_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hostAllocCapabilities: ze_memory_access_cap_flags_t,
    pub deviceAllocCapabilities: ze_memory_access_cap_flags_t,
    pub sharedSingleDeviceAllocCapabilities: ze_memory_access_cap_flags_t,
    pub sharedCrossDeviceAllocCapabilities: ze_memory_access_cap_flags_t,
    pub sharedSystemAllocCapabilities: ze_memory_access_cap_flags_t,
}
#[test]
fn bindgen_test_layout__ze_device_memory_access_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_memory_access_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_memory_access_properties_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_memory_access_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_memory_access_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_memory_access_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_access_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_access_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostAllocCapabilities) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_access_properties_t),
            "::",
            stringify!(hostAllocCapabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAllocCapabilities) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_access_properties_t),
            "::",
            stringify!(deviceAllocCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sharedSingleDeviceAllocCapabilities) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_access_properties_t),
            "::",
            stringify!(sharedSingleDeviceAllocCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sharedCrossDeviceAllocCapabilities) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_access_properties_t),
            "::",
            stringify!(sharedCrossDeviceAllocCapabilities)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sharedSystemAllocCapabilities) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_access_properties_t),
            "::",
            stringify!(sharedSystemAllocCapabilities)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetMemoryAccessProperties(
        hDevice: ze_device_handle_t,
        pMemAccessProperties: *mut ze_device_memory_access_properties_t,
    ) -> ze_result_t;
}
pub type ze_device_cache_property_flags_t = u32;
pub const _ze_device_cache_property_flag_t_ZE_DEVICE_CACHE_PROPERTY_FLAG_USER_CONTROL:
    _ze_device_cache_property_flag_t = 1;
pub const _ze_device_cache_property_flag_t_ZE_DEVICE_CACHE_PROPERTY_FLAG_FORCE_UINT32:
    _ze_device_cache_property_flag_t = 2147483647;
pub type _ze_device_cache_property_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_cache_property_flag_t as ze_device_cache_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_cache_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: ze_device_cache_property_flags_t,
    pub cacheSize: usize,
}
#[test]
fn bindgen_test_layout__ze_device_cache_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_cache_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_cache_properties_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_device_cache_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_cache_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_cache_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_cache_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_cache_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_cache_properties_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cacheSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_cache_properties_t),
            "::",
            stringify!(cacheSize)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetCacheProperties(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pCacheProperties: *mut ze_device_cache_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_image_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxImageDims1D: u32,
    pub maxImageDims2D: u32,
    pub maxImageDims3D: u32,
    pub maxImageBufferSize: u64,
    pub maxImageArraySlices: u32,
    pub maxSamplers: u32,
    pub maxReadImageArgs: u32,
    pub maxWriteImageArgs: u32,
}
#[test]
fn bindgen_test_layout__ze_device_image_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_image_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_image_properties_t>(),
        56usize,
        concat!("Size of: ", stringify!(_ze_device_image_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_image_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_image_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageDims1D) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxImageDims1D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageDims2D) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxImageDims2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageDims3D) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxImageDims3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageBufferSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxImageBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageArraySlices) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxImageArraySlices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSamplers) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxSamplers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxReadImageArgs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxReadImageArgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWriteImageArgs) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_image_properties_t),
            "::",
            stringify!(maxWriteImageArgs)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetImageProperties(
        hDevice: ze_device_handle_t,
        pImageProperties: *mut ze_device_image_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_external_memory_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryAllocationImportTypes: ze_external_memory_type_flags_t,
    pub memoryAllocationExportTypes: ze_external_memory_type_flags_t,
    pub imageImportTypes: ze_external_memory_type_flags_t,
    pub imageExportTypes: ze_external_memory_type_flags_t,
}
#[test]
fn bindgen_test_layout__ze_device_external_memory_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_external_memory_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_external_memory_properties_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_external_memory_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_external_memory_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_external_memory_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_external_memory_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_external_memory_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryAllocationImportTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_external_memory_properties_t),
            "::",
            stringify!(memoryAllocationImportTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryAllocationExportTypes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_external_memory_properties_t),
            "::",
            stringify!(memoryAllocationExportTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageImportTypes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_external_memory_properties_t),
            "::",
            stringify!(imageImportTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageExportTypes) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_external_memory_properties_t),
            "::",
            stringify!(imageExportTypes)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetExternalMemoryProperties(
        hDevice: ze_device_handle_t,
        pExternalMemoryProperties: *mut ze_device_external_memory_properties_t,
    ) -> ze_result_t;
}
pub type ze_device_p2p_property_flags_t = u32;
pub const _ze_device_p2p_property_flag_t_ZE_DEVICE_P2P_PROPERTY_FLAG_ACCESS:
    _ze_device_p2p_property_flag_t = 1;
pub const _ze_device_p2p_property_flag_t_ZE_DEVICE_P2P_PROPERTY_FLAG_ATOMICS:
    _ze_device_p2p_property_flag_t = 2;
pub const _ze_device_p2p_property_flag_t_ZE_DEVICE_P2P_PROPERTY_FLAG_FORCE_UINT32:
    _ze_device_p2p_property_flag_t = 2147483647;
pub type _ze_device_p2p_property_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_p2p_property_flag_t as ze_device_p2p_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_p2p_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: ze_device_p2p_property_flags_t,
}
#[test]
fn bindgen_test_layout__ze_device_p2p_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_p2p_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_p2p_properties_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_device_p2p_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_p2p_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_p2p_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_properties_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeDeviceGetP2PProperties(
        hDevice: ze_device_handle_t,
        hPeerDevice: ze_device_handle_t,
        pP2PProperties: *mut ze_device_p2p_properties_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeDeviceCanAccessPeer(
        hDevice: ze_device_handle_t,
        hPeerDevice: ze_device_handle_t,
        value: *mut ze_bool_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeDeviceGetStatus(hDevice: ze_device_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeDeviceGetGlobalTimestamps(
        hDevice: ze_device_handle_t,
        hostTimestamp: *mut u64,
        deviceTimestamp: *mut u64,
    ) -> ze_result_t;
}
pub type ze_context_flags_t = u32;
pub const _ze_context_flag_t_ZE_CONTEXT_FLAG_TBD: _ze_context_flag_t = 1;
pub const _ze_context_flag_t_ZE_CONTEXT_FLAG_FORCE_UINT32: _ze_context_flag_t = 2147483647;
pub type _ze_context_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_context_flag_t as ze_context_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_context_flags_t,
}
#[test]
fn bindgen_test_layout__ze_context_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_context_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_context_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeContextCreate(
        hDriver: ze_driver_handle_t,
        desc: *const ze_context_desc_t,
        phContext: *mut ze_context_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeContextCreateEx(
        hDriver: ze_driver_handle_t,
        desc: *const ze_context_desc_t,
        numDevices: u32,
        phDevices: *mut ze_device_handle_t,
        phContext: *mut ze_context_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeContextDestroy(hContext: ze_context_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeContextGetStatus(hContext: ze_context_handle_t) -> ze_result_t;
}
pub type ze_command_queue_flags_t = u32;
pub const _ze_command_queue_flag_t_ZE_COMMAND_QUEUE_FLAG_EXPLICIT_ONLY: _ze_command_queue_flag_t =
    1;
pub const _ze_command_queue_flag_t_ZE_COMMAND_QUEUE_FLAG_FORCE_UINT32: _ze_command_queue_flag_t =
    2147483647;
pub type _ze_command_queue_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_command_queue_flag_t as ze_command_queue_flag_t;
pub const _ze_command_queue_mode_t_ZE_COMMAND_QUEUE_MODE_DEFAULT: _ze_command_queue_mode_t = 0;
pub const _ze_command_queue_mode_t_ZE_COMMAND_QUEUE_MODE_SYNCHRONOUS: _ze_command_queue_mode_t = 1;
pub const _ze_command_queue_mode_t_ZE_COMMAND_QUEUE_MODE_ASYNCHRONOUS: _ze_command_queue_mode_t = 2;
pub const _ze_command_queue_mode_t_ZE_COMMAND_QUEUE_MODE_FORCE_UINT32: _ze_command_queue_mode_t =
    2147483647;
pub type _ze_command_queue_mode_t = ::std::os::raw::c_uint;
pub use self::_ze_command_queue_mode_t as ze_command_queue_mode_t;
pub const _ze_command_queue_priority_t_ZE_COMMAND_QUEUE_PRIORITY_NORMAL:
    _ze_command_queue_priority_t = 0;
pub const _ze_command_queue_priority_t_ZE_COMMAND_QUEUE_PRIORITY_PRIORITY_LOW:
    _ze_command_queue_priority_t = 1;
pub const _ze_command_queue_priority_t_ZE_COMMAND_QUEUE_PRIORITY_PRIORITY_HIGH:
    _ze_command_queue_priority_t = 2;
pub const _ze_command_queue_priority_t_ZE_COMMAND_QUEUE_PRIORITY_FORCE_UINT32:
    _ze_command_queue_priority_t = 2147483647;
pub type _ze_command_queue_priority_t = ::std::os::raw::c_uint;
pub use self::_ze_command_queue_priority_t as ze_command_queue_priority_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub ordinal: u32,
    pub index: u32,
    pub flags: ze_command_queue_flags_t,
    pub mode: ze_command_queue_mode_t,
    pub priority: ze_command_queue_priority_t,
}
#[test]
fn bindgen_test_layout__ze_command_queue_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_queue_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_queue_desc_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_command_queue_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_queue_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_command_queue_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordinal) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_desc_t),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_desc_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_desc_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_desc_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_desc_t),
            "::",
            stringify!(priority)
        )
    );
}
extern "C" {
    pub fn zeCommandQueueCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_command_queue_desc_t,
        phCommandQueue: *mut ze_command_queue_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandQueueDestroy(hCommandQueue: ze_command_queue_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandQueueExecuteCommandLists(
        hCommandQueue: ze_command_queue_handle_t,
        numCommandLists: u32,
        phCommandLists: *mut ze_command_list_handle_t,
        hFence: ze_fence_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandQueueSynchronize(
        hCommandQueue: ze_command_queue_handle_t,
        timeout: u64,
    ) -> ze_result_t;
}
pub type ze_command_list_flags_t = u32;
pub const _ze_command_list_flag_t_ZE_COMMAND_LIST_FLAG_RELAXED_ORDERING: _ze_command_list_flag_t =
    1;
pub const _ze_command_list_flag_t_ZE_COMMAND_LIST_FLAG_MAXIMIZE_THROUGHPUT:
    _ze_command_list_flag_t = 2;
pub const _ze_command_list_flag_t_ZE_COMMAND_LIST_FLAG_EXPLICIT_ONLY: _ze_command_list_flag_t = 4;
pub const _ze_command_list_flag_t_ZE_COMMAND_LIST_FLAG_FORCE_UINT32: _ze_command_list_flag_t =
    2147483647;
pub type _ze_command_list_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_command_list_flag_t as ze_command_list_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub commandQueueGroupOrdinal: u32,
    pub flags: ze_command_list_flags_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_command_list_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_command_list_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandQueueGroupOrdinal) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_desc_t),
            "::",
            stringify!(commandQueueGroupOrdinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeCommandListCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_command_list_desc_t,
        phCommandList: *mut ze_command_list_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListCreateImmediate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        altdesc: *const ze_command_queue_desc_t,
        phCommandList: *mut ze_command_list_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListDestroy(hCommandList: ze_command_list_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListClose(hCommandList: ze_command_list_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListReset(hCommandList: ze_command_list_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendWriteGlobalTimestamp(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut u64,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendBarrier(
        hCommandList: ze_command_list_handle_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendMemoryRangesBarrier(
        hCommandList: ze_command_list_handle_t,
        numRanges: u32,
        pRangeSizes: *const usize,
        pRanges: *mut *const ::std::os::raw::c_void,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeContextSystemBarrier(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendMemoryCopy(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::std::os::raw::c_void,
        srcptr: *const ::std::os::raw::c_void,
        size: usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendMemoryFill(
        hCommandList: ze_command_list_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        pattern: *const ::std::os::raw::c_void,
        pattern_size: usize,
        size: usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_copy_region_t {
    pub originX: u32,
    pub originY: u32,
    pub originZ: u32,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout__ze_copy_region_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_copy_region_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_copy_region_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_copy_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_copy_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ze_copy_region_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_region_t),
            "::",
            stringify!(originX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_region_t),
            "::",
            stringify!(originY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originZ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_region_t),
            "::",
            stringify!(originZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_region_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_region_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_region_t),
            "::",
            stringify!(depth)
        )
    );
}
extern "C" {
    pub fn zeCommandListAppendMemoryCopyRegion(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::std::os::raw::c_void,
        dstRegion: *const ze_copy_region_t,
        dstPitch: u32,
        dstSlicePitch: u32,
        srcptr: *const ::std::os::raw::c_void,
        srcRegion: *const ze_copy_region_t,
        srcPitch: u32,
        srcSlicePitch: u32,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendMemoryCopyFromContext(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::std::os::raw::c_void,
        hContextSrc: ze_context_handle_t,
        srcptr: *const ::std::os::raw::c_void,
        size: usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendImageCopy(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        hSrcImage: ze_image_handle_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_region_t {
    pub originX: u32,
    pub originY: u32,
    pub originZ: u32,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout__ze_image_region_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_region_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_region_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_image_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ze_image_region_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_region_t),
            "::",
            stringify!(originX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_region_t),
            "::",
            stringify!(originY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originZ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_region_t),
            "::",
            stringify!(originZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_region_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_region_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_region_t),
            "::",
            stringify!(depth)
        )
    );
}
extern "C" {
    pub fn zeCommandListAppendImageCopyRegion(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        hSrcImage: ze_image_handle_t,
        pDstRegion: *const ze_image_region_t,
        pSrcRegion: *const ze_image_region_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendImageCopyToMemory(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::std::os::raw::c_void,
        hSrcImage: ze_image_handle_t,
        pSrcRegion: *const ze_image_region_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendImageCopyFromMemory(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        srcptr: *const ::std::os::raw::c_void,
        pDstRegion: *const ze_image_region_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendMemoryPrefetch(
        hCommandList: ze_command_list_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ze_result_t;
}
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_SET_READ_MOSTLY: _ze_memory_advice_t = 0;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_CLEAR_READ_MOSTLY: _ze_memory_advice_t = 1;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_SET_PREFERRED_LOCATION: _ze_memory_advice_t = 2;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_CLEAR_PREFERRED_LOCATION: _ze_memory_advice_t = 3;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_SET_NON_ATOMIC_MOSTLY: _ze_memory_advice_t = 4;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_CLEAR_NON_ATOMIC_MOSTLY: _ze_memory_advice_t = 5;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_BIAS_CACHED: _ze_memory_advice_t = 6;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_BIAS_UNCACHED: _ze_memory_advice_t = 7;
pub const _ze_memory_advice_t_ZE_MEMORY_ADVICE_FORCE_UINT32: _ze_memory_advice_t = 2147483647;
pub type _ze_memory_advice_t = ::std::os::raw::c_uint;
pub use self::_ze_memory_advice_t as ze_memory_advice_t;
extern "C" {
    pub fn zeCommandListAppendMemAdvise(
        hCommandList: ze_command_list_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        advice: ze_memory_advice_t,
    ) -> ze_result_t;
}
pub type ze_event_pool_flags_t = u32;
pub const _ze_event_pool_flag_t_ZE_EVENT_POOL_FLAG_HOST_VISIBLE: _ze_event_pool_flag_t = 1;
pub const _ze_event_pool_flag_t_ZE_EVENT_POOL_FLAG_IPC: _ze_event_pool_flag_t = 2;
pub const _ze_event_pool_flag_t_ZE_EVENT_POOL_FLAG_KERNEL_TIMESTAMP: _ze_event_pool_flag_t = 4;
pub const _ze_event_pool_flag_t_ZE_EVENT_POOL_FLAG_FORCE_UINT32: _ze_event_pool_flag_t = 2147483647;
pub type _ze_event_pool_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_event_pool_flag_t as ze_event_pool_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_event_pool_flags_t,
    pub count: u32,
}
#[test]
fn bindgen_test_layout__ze_event_pool_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_pool_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_pool_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_event_pool_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_pool_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_pool_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_desc_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_desc_t),
            "::",
            stringify!(count)
        )
    );
}
extern "C" {
    pub fn zeEventPoolCreate(
        hContext: ze_context_handle_t,
        desc: *const ze_event_pool_desc_t,
        numDevices: u32,
        phDevices: *mut ze_device_handle_t,
        phEventPool: *mut ze_event_pool_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeEventPoolDestroy(hEventPool: ze_event_pool_handle_t) -> ze_result_t;
}
pub type ze_event_scope_flags_t = u32;
pub const _ze_event_scope_flag_t_ZE_EVENT_SCOPE_FLAG_SUBDEVICE: _ze_event_scope_flag_t = 1;
pub const _ze_event_scope_flag_t_ZE_EVENT_SCOPE_FLAG_DEVICE: _ze_event_scope_flag_t = 2;
pub const _ze_event_scope_flag_t_ZE_EVENT_SCOPE_FLAG_HOST: _ze_event_scope_flag_t = 4;
pub const _ze_event_scope_flag_t_ZE_EVENT_SCOPE_FLAG_FORCE_UINT32: _ze_event_scope_flag_t =
    2147483647;
pub type _ze_event_scope_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_event_scope_flag_t as ze_event_scope_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub index: u32,
    pub signal: ze_event_scope_flags_t,
    pub wait: ze_event_scope_flags_t,
}
#[test]
fn bindgen_test_layout__ze_event_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_desc_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_event_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_desc_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_desc_t),
            "::",
            stringify!(signal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_desc_t),
            "::",
            stringify!(wait)
        )
    );
}
extern "C" {
    pub fn zeEventCreate(
        hEventPool: ze_event_pool_handle_t,
        desc: *const ze_event_desc_t,
        phEvent: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeEventDestroy(hEvent: ze_event_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeEventPoolGetIpcHandle(
        hEventPool: ze_event_pool_handle_t,
        phIpc: *mut ze_ipc_event_pool_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeEventPoolOpenIpcHandle(
        hContext: ze_context_handle_t,
        hIpc: ze_ipc_event_pool_handle_t,
        phEventPool: *mut ze_event_pool_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeEventPoolCloseIpcHandle(hEventPool: ze_event_pool_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendSignalEvent(
        hCommandList: ze_command_list_handle_t,
        hEvent: ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendWaitOnEvents(
        hCommandList: ze_command_list_handle_t,
        numEvents: u32,
        phEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeEventHostSignal(hEvent: ze_event_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeEventHostSynchronize(hEvent: ze_event_handle_t, timeout: u64) -> ze_result_t;
}
extern "C" {
    pub fn zeEventQueryStatus(hEvent: ze_event_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendEventReset(
        hCommandList: ze_command_list_handle_t,
        hEvent: ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeEventHostReset(hEvent: ze_event_handle_t) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_timestamp_data_t {
    pub kernelStart: u64,
    pub kernelEnd: u64,
}
#[test]
fn bindgen_test_layout__ze_kernel_timestamp_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_timestamp_data_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_timestamp_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_kernel_timestamp_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_timestamp_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_timestamp_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelStart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_timestamp_data_t),
            "::",
            stringify!(kernelStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelEnd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_timestamp_data_t),
            "::",
            stringify!(kernelEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_timestamp_result_t {
    pub global: ze_kernel_timestamp_data_t,
    pub context: ze_kernel_timestamp_data_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_timestamp_result_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_timestamp_result_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_timestamp_result_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_kernel_timestamp_result_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_timestamp_result_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_timestamp_result_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_timestamp_result_t),
            "::",
            stringify!(global)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_timestamp_result_t),
            "::",
            stringify!(context)
        )
    );
}
extern "C" {
    pub fn zeEventQueryKernelTimestamp(
        hEvent: ze_event_handle_t,
        dstptr: *mut ze_kernel_timestamp_result_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendQueryKernelTimestamps(
        hCommandList: ze_command_list_handle_t,
        numEvents: u32,
        phEvents: *mut ze_event_handle_t,
        dstptr: *mut ::std::os::raw::c_void,
        pOffsets: *const usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
pub type ze_fence_flags_t = u32;
pub const _ze_fence_flag_t_ZE_FENCE_FLAG_SIGNALED: _ze_fence_flag_t = 1;
pub const _ze_fence_flag_t_ZE_FENCE_FLAG_FORCE_UINT32: _ze_fence_flag_t = 2147483647;
pub type _ze_fence_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_fence_flag_t as ze_fence_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_fence_flags_t,
}
#[test]
fn bindgen_test_layout__ze_fence_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fence_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fence_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_fence_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fence_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_fence_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeFenceCreate(
        hCommandQueue: ze_command_queue_handle_t,
        desc: *const ze_fence_desc_t,
        phFence: *mut ze_fence_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeFenceDestroy(hFence: ze_fence_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeFenceHostSynchronize(hFence: ze_fence_handle_t, timeout: u64) -> ze_result_t;
}
extern "C" {
    pub fn zeFenceQueryStatus(hFence: ze_fence_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeFenceReset(hFence: ze_fence_handle_t) -> ze_result_t;
}
pub type ze_image_flags_t = u32;
pub const _ze_image_flag_t_ZE_IMAGE_FLAG_KERNEL_WRITE: _ze_image_flag_t = 1;
pub const _ze_image_flag_t_ZE_IMAGE_FLAG_BIAS_UNCACHED: _ze_image_flag_t = 2;
pub const _ze_image_flag_t_ZE_IMAGE_FLAG_FORCE_UINT32: _ze_image_flag_t = 2147483647;
pub type _ze_image_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_image_flag_t as ze_image_flag_t;
pub const _ze_image_type_t_ZE_IMAGE_TYPE_1D: _ze_image_type_t = 0;
pub const _ze_image_type_t_ZE_IMAGE_TYPE_1DARRAY: _ze_image_type_t = 1;
pub const _ze_image_type_t_ZE_IMAGE_TYPE_2D: _ze_image_type_t = 2;
pub const _ze_image_type_t_ZE_IMAGE_TYPE_2DARRAY: _ze_image_type_t = 3;
pub const _ze_image_type_t_ZE_IMAGE_TYPE_3D: _ze_image_type_t = 4;
pub const _ze_image_type_t_ZE_IMAGE_TYPE_BUFFER: _ze_image_type_t = 5;
pub const _ze_image_type_t_ZE_IMAGE_TYPE_FORCE_UINT32: _ze_image_type_t = 2147483647;
pub type _ze_image_type_t = ::std::os::raw::c_uint;
pub use self::_ze_image_type_t as ze_image_type_t;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_8: _ze_image_format_layout_t = 0;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_16: _ze_image_format_layout_t = 1;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_32: _ze_image_format_layout_t = 2;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_8_8: _ze_image_format_layout_t = 3;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_8_8_8_8: _ze_image_format_layout_t = 4;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_16_16: _ze_image_format_layout_t = 5;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_16_16_16_16: _ze_image_format_layout_t =
    6;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_32_32: _ze_image_format_layout_t = 7;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_32_32_32_32: _ze_image_format_layout_t =
    8;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_10_10_10_2: _ze_image_format_layout_t =
    9;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_11_11_10: _ze_image_format_layout_t = 10;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_5_6_5: _ze_image_format_layout_t = 11;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_5_5_5_1: _ze_image_format_layout_t = 12;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_4_4_4_4: _ze_image_format_layout_t = 13;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_Y8: _ze_image_format_layout_t = 14;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_NV12: _ze_image_format_layout_t = 15;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_YUYV: _ze_image_format_layout_t = 16;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_VYUY: _ze_image_format_layout_t = 17;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_YVYU: _ze_image_format_layout_t = 18;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_UYVY: _ze_image_format_layout_t = 19;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_AYUV: _ze_image_format_layout_t = 20;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_P010: _ze_image_format_layout_t = 21;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_Y410: _ze_image_format_layout_t = 22;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_P012: _ze_image_format_layout_t = 23;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_Y16: _ze_image_format_layout_t = 24;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_P016: _ze_image_format_layout_t = 25;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_Y216: _ze_image_format_layout_t = 26;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_P216: _ze_image_format_layout_t = 27;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_P8: _ze_image_format_layout_t = 28;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_YUY2: _ze_image_format_layout_t = 29;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_A8P8: _ze_image_format_layout_t = 30;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_IA44: _ze_image_format_layout_t = 31;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_AI44: _ze_image_format_layout_t = 32;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_Y416: _ze_image_format_layout_t = 33;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_Y210: _ze_image_format_layout_t = 34;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_I420: _ze_image_format_layout_t = 35;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_YV12: _ze_image_format_layout_t = 36;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_400P: _ze_image_format_layout_t = 37;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_422H: _ze_image_format_layout_t = 38;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_422V: _ze_image_format_layout_t = 39;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_444P: _ze_image_format_layout_t = 40;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_RGBP: _ze_image_format_layout_t = 41;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_BRGP: _ze_image_format_layout_t = 42;
pub const _ze_image_format_layout_t_ZE_IMAGE_FORMAT_LAYOUT_FORCE_UINT32: _ze_image_format_layout_t =
    2147483647;
pub type _ze_image_format_layout_t = ::std::os::raw::c_uint;
pub use self::_ze_image_format_layout_t as ze_image_format_layout_t;
pub const _ze_image_format_type_t_ZE_IMAGE_FORMAT_TYPE_UINT: _ze_image_format_type_t = 0;
pub const _ze_image_format_type_t_ZE_IMAGE_FORMAT_TYPE_SINT: _ze_image_format_type_t = 1;
pub const _ze_image_format_type_t_ZE_IMAGE_FORMAT_TYPE_UNORM: _ze_image_format_type_t = 2;
pub const _ze_image_format_type_t_ZE_IMAGE_FORMAT_TYPE_SNORM: _ze_image_format_type_t = 3;
pub const _ze_image_format_type_t_ZE_IMAGE_FORMAT_TYPE_FLOAT: _ze_image_format_type_t = 4;
pub const _ze_image_format_type_t_ZE_IMAGE_FORMAT_TYPE_FORCE_UINT32: _ze_image_format_type_t =
    2147483647;
pub type _ze_image_format_type_t = ::std::os::raw::c_uint;
pub use self::_ze_image_format_type_t as ze_image_format_type_t;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_R: _ze_image_format_swizzle_t = 0;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_G: _ze_image_format_swizzle_t = 1;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_B: _ze_image_format_swizzle_t = 2;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_A: _ze_image_format_swizzle_t = 3;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_0: _ze_image_format_swizzle_t = 4;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_1: _ze_image_format_swizzle_t = 5;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_X: _ze_image_format_swizzle_t = 6;
pub const _ze_image_format_swizzle_t_ZE_IMAGE_FORMAT_SWIZZLE_FORCE_UINT32:
    _ze_image_format_swizzle_t = 2147483647;
pub type _ze_image_format_swizzle_t = ::std::os::raw::c_uint;
pub use self::_ze_image_format_swizzle_t as ze_image_format_swizzle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_format_t {
    pub layout: ze_image_format_layout_t,
    pub type_: ze_image_format_type_t,
    pub x: ze_image_format_swizzle_t,
    pub y: ze_image_format_swizzle_t,
    pub z: ze_image_format_swizzle_t,
    pub w: ze_image_format_swizzle_t,
}
#[test]
fn bindgen_test_layout__ze_image_format_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_format_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_format_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_image_format_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_format_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ze_image_format_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_format_t),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_format_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_format_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_format_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_format_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_format_t),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_image_flags_t,
    pub type_: ze_image_type_t,
    pub format: ze_image_format_t,
    pub width: u64,
    pub height: u32,
    pub depth: u32,
    pub arraylevels: u32,
    pub miplevels: u32,
}
#[test]
fn bindgen_test_layout__ze_image_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_desc_t>(),
        72usize,
        concat!("Size of: ", stringify!(_ze_image_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_image_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arraylevels) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(arraylevels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miplevels) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_desc_t),
            "::",
            stringify!(miplevels)
        )
    );
}
pub type ze_image_sampler_filter_flags_t = u32;
pub const _ze_image_sampler_filter_flag_t_ZE_IMAGE_SAMPLER_FILTER_FLAG_POINT:
    _ze_image_sampler_filter_flag_t = 1;
pub const _ze_image_sampler_filter_flag_t_ZE_IMAGE_SAMPLER_FILTER_FLAG_LINEAR:
    _ze_image_sampler_filter_flag_t = 2;
pub const _ze_image_sampler_filter_flag_t_ZE_IMAGE_SAMPLER_FILTER_FLAG_FORCE_UINT32:
    _ze_image_sampler_filter_flag_t = 2147483647;
pub type _ze_image_sampler_filter_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_image_sampler_filter_flag_t as ze_image_sampler_filter_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub samplerFilterFlags: ze_image_sampler_filter_flags_t,
}
#[test]
fn bindgen_test_layout__ze_image_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_properties_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_image_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_image_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerFilterFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_properties_t),
            "::",
            stringify!(samplerFilterFlags)
        )
    );
}
extern "C" {
    pub fn zeImageGetProperties(
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        pImageProperties: *mut ze_image_properties_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeImageCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        phImage: *mut ze_image_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeImageDestroy(hImage: ze_image_handle_t) -> ze_result_t;
}
pub type ze_device_mem_alloc_flags_t = u32;
pub const _ze_device_mem_alloc_flag_t_ZE_DEVICE_MEM_ALLOC_FLAG_BIAS_CACHED:
    _ze_device_mem_alloc_flag_t = 1;
pub const _ze_device_mem_alloc_flag_t_ZE_DEVICE_MEM_ALLOC_FLAG_BIAS_UNCACHED:
    _ze_device_mem_alloc_flag_t = 2;
pub const _ze_device_mem_alloc_flag_t_ZE_DEVICE_MEM_ALLOC_FLAG_BIAS_INITIAL_PLACEMENT:
    _ze_device_mem_alloc_flag_t = 4;
pub const _ze_device_mem_alloc_flag_t_ZE_DEVICE_MEM_ALLOC_FLAG_FORCE_UINT32:
    _ze_device_mem_alloc_flag_t = 2147483647;
pub type _ze_device_mem_alloc_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_mem_alloc_flag_t as ze_device_mem_alloc_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_mem_alloc_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_device_mem_alloc_flags_t,
    pub ordinal: u32,
}
#[test]
fn bindgen_test_layout__ze_device_mem_alloc_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_mem_alloc_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_mem_alloc_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_device_mem_alloc_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_mem_alloc_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_mem_alloc_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_mem_alloc_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_mem_alloc_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_mem_alloc_desc_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordinal) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_mem_alloc_desc_t),
            "::",
            stringify!(ordinal)
        )
    );
}
pub type ze_host_mem_alloc_flags_t = u32;
pub const _ze_host_mem_alloc_flag_t_ZE_HOST_MEM_ALLOC_FLAG_BIAS_CACHED: _ze_host_mem_alloc_flag_t =
    1;
pub const _ze_host_mem_alloc_flag_t_ZE_HOST_MEM_ALLOC_FLAG_BIAS_UNCACHED:
    _ze_host_mem_alloc_flag_t = 2;
pub const _ze_host_mem_alloc_flag_t_ZE_HOST_MEM_ALLOC_FLAG_BIAS_WRITE_COMBINED:
    _ze_host_mem_alloc_flag_t = 4;
pub const _ze_host_mem_alloc_flag_t_ZE_HOST_MEM_ALLOC_FLAG_BIAS_INITIAL_PLACEMENT:
    _ze_host_mem_alloc_flag_t = 8;
pub const _ze_host_mem_alloc_flag_t_ZE_HOST_MEM_ALLOC_FLAG_FORCE_UINT32: _ze_host_mem_alloc_flag_t =
    2147483647;
pub type _ze_host_mem_alloc_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_host_mem_alloc_flag_t as ze_host_mem_alloc_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_host_mem_alloc_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_host_mem_alloc_flags_t,
}
#[test]
fn bindgen_test_layout__ze_host_mem_alloc_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_host_mem_alloc_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_host_mem_alloc_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_host_mem_alloc_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_host_mem_alloc_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_host_mem_alloc_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_host_mem_alloc_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_host_mem_alloc_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_host_mem_alloc_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeMemAllocShared(
        hContext: ze_context_handle_t,
        device_desc: *const ze_device_mem_alloc_desc_t,
        host_desc: *const ze_host_mem_alloc_desc_t,
        size: usize,
        alignment: usize,
        hDevice: ze_device_handle_t,
        pptr: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeMemAllocDevice(
        hContext: ze_context_handle_t,
        device_desc: *const ze_device_mem_alloc_desc_t,
        size: usize,
        alignment: usize,
        hDevice: ze_device_handle_t,
        pptr: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeMemAllocHost(
        hContext: ze_context_handle_t,
        host_desc: *const ze_host_mem_alloc_desc_t,
        size: usize,
        alignment: usize,
        pptr: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeMemFree(
        hContext: ze_context_handle_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
pub const _ze_memory_type_t_ZE_MEMORY_TYPE_UNKNOWN: _ze_memory_type_t = 0;
pub const _ze_memory_type_t_ZE_MEMORY_TYPE_HOST: _ze_memory_type_t = 1;
pub const _ze_memory_type_t_ZE_MEMORY_TYPE_DEVICE: _ze_memory_type_t = 2;
pub const _ze_memory_type_t_ZE_MEMORY_TYPE_SHARED: _ze_memory_type_t = 3;
pub const _ze_memory_type_t_ZE_MEMORY_TYPE_FORCE_UINT32: _ze_memory_type_t = 2147483647;
pub type _ze_memory_type_t = ::std::os::raw::c_uint;
pub use self::_ze_memory_type_t as ze_memory_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_memory_allocation_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub type_: ze_memory_type_t,
    pub id: u64,
    pub pageSize: u64,
}
#[test]
fn bindgen_test_layout__ze_memory_allocation_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_memory_allocation_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_memory_allocation_properties_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_memory_allocation_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_memory_allocation_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_memory_allocation_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_allocation_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_allocation_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_allocation_properties_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_allocation_properties_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_allocation_properties_t),
            "::",
            stringify!(pageSize)
        )
    );
}
extern "C" {
    pub fn zeMemGetAllocProperties(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        pMemAllocProperties: *mut ze_memory_allocation_properties_t,
        phDevice: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeMemGetAddressRange(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        pBase: *mut *mut ::std::os::raw::c_void,
        pSize: *mut usize,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeMemGetIpcHandle(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        pIpcHandle: *mut ze_ipc_mem_handle_t,
    ) -> ze_result_t;
}
pub type ze_ipc_memory_flags_t = u32;
pub const _ze_ipc_memory_flag_t_ZE_IPC_MEMORY_FLAG_BIAS_CACHED: _ze_ipc_memory_flag_t = 1;
pub const _ze_ipc_memory_flag_t_ZE_IPC_MEMORY_FLAG_BIAS_UNCACHED: _ze_ipc_memory_flag_t = 2;
pub const _ze_ipc_memory_flag_t_ZE_IPC_MEMORY_FLAG_FORCE_UINT32: _ze_ipc_memory_flag_t = 2147483647;
pub type _ze_ipc_memory_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_ipc_memory_flag_t as ze_ipc_memory_flag_t;
extern "C" {
    pub fn zeMemOpenIpcHandle(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        handle: ze_ipc_mem_handle_t,
        flags: ze_ipc_memory_flags_t,
        pptr: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeMemCloseIpcHandle(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_external_memory_export_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_external_memory_type_flags_t,
}
#[test]
fn bindgen_test_layout__ze_external_memory_export_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_external_memory_export_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_external_memory_export_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_external_memory_export_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_external_memory_export_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_external_memory_export_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_external_memory_import_fd_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__ze_external_memory_import_fd_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_external_memory_import_fd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_external_memory_import_fd_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_external_memory_import_fd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_external_memory_import_fd_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_external_memory_import_fd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_fd_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_fd_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_fd_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_fd_t),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_external_memory_export_fd_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__ze_external_memory_export_fd_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_external_memory_export_fd_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_external_memory_export_fd_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_external_memory_export_fd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_external_memory_export_fd_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_external_memory_export_fd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_fd_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_fd_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_fd_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_fd_t),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_external_memory_import_win32_handle_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub handle: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_external_memory_import_win32_handle_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_external_memory_import_win32_handle_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_external_memory_import_win32_handle_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_ze_external_memory_import_win32_handle_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_external_memory_import_win32_handle_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_external_memory_import_win32_handle_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_win32_handle_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_win32_handle_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_win32_handle_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_win32_handle_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_import_win32_handle_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_external_memory_export_win32_handle_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub handle: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_external_memory_export_win32_handle_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_external_memory_export_win32_handle_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_external_memory_export_win32_handle_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_external_memory_export_win32_handle_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_external_memory_export_win32_handle_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_external_memory_export_win32_handle_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_win32_handle_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_win32_handle_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_win32_handle_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_external_memory_export_win32_handle_t),
            "::",
            stringify!(handle)
        )
    );
}
pub const _ze_module_format_t_ZE_MODULE_FORMAT_IL_SPIRV: _ze_module_format_t = 0;
pub const _ze_module_format_t_ZE_MODULE_FORMAT_NATIVE: _ze_module_format_t = 1;
pub const _ze_module_format_t_ZE_MODULE_FORMAT_FORCE_UINT32: _ze_module_format_t = 2147483647;
pub type _ze_module_format_t = ::std::os::raw::c_uint;
pub use self::_ze_module_format_t as ze_module_format_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_constants_t {
    pub numConstants: u32,
    pub pConstantIds: *const u32,
    pub pConstantValues: *mut *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_module_constants_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_constants_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_constants_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_module_constants_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_constants_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_module_constants_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numConstants) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_constants_t),
            "::",
            stringify!(numConstants)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConstantIds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_constants_t),
            "::",
            stringify!(pConstantIds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConstantValues) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_constants_t),
            "::",
            stringify!(pConstantValues)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: ze_module_format_t,
    pub inputSize: usize,
    pub pInputModule: *const u8,
    pub pBuildFlags: *const ::std::os::raw::c_char,
    pub pConstants: *const ze_module_constants_t,
}
#[test]
fn bindgen_test_layout__ze_module_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_desc_t>(),
        56usize,
        concat!("Size of: ", stringify!(_ze_module_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_module_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_desc_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_desc_t),
            "::",
            stringify!(inputSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputModule) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_desc_t),
            "::",
            stringify!(pInputModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBuildFlags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_desc_t),
            "::",
            stringify!(pBuildFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConstants) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_desc_t),
            "::",
            stringify!(pConstants)
        )
    );
}
extern "C" {
    pub fn zeModuleCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_module_desc_t,
        phModule: *mut ze_module_handle_t,
        phBuildLog: *mut ze_module_build_log_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleDestroy(hModule: ze_module_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleDynamicLink(
        numModules: u32,
        phModules: *mut ze_module_handle_t,
        phLinkLog: *mut ze_module_build_log_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleBuildLogDestroy(hModuleBuildLog: ze_module_build_log_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleBuildLogGetString(
        hModuleBuildLog: ze_module_build_log_handle_t,
        pSize: *mut usize,
        pBuildLog: *mut ::std::os::raw::c_char,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleGetNativeBinary(
        hModule: ze_module_handle_t,
        pSize: *mut usize,
        pModuleNativeBinary: *mut u8,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleGetGlobalPointer(
        hModule: ze_module_handle_t,
        pGlobalName: *const ::std::os::raw::c_char,
        pSize: *mut usize,
        pptr: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleGetKernelNames(
        hModule: ze_module_handle_t,
        pCount: *mut u32,
        pNames: *mut *const ::std::os::raw::c_char,
    ) -> ze_result_t;
}
pub type ze_module_property_flags_t = u32;
pub const _ze_module_property_flag_t_ZE_MODULE_PROPERTY_FLAG_IMPORTS: _ze_module_property_flag_t =
    1;
pub const _ze_module_property_flag_t_ZE_MODULE_PROPERTY_FLAG_FORCE_UINT32:
    _ze_module_property_flag_t = 2147483647;
pub type _ze_module_property_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_module_property_flag_t as ze_module_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: ze_module_property_flags_t,
}
#[test]
fn bindgen_test_layout__ze_module_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_properties_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_module_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_module_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_properties_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeModuleGetProperties(
        hModule: ze_module_handle_t,
        pModuleProperties: *mut ze_module_properties_t,
    ) -> ze_result_t;
}
pub type ze_kernel_flags_t = u32;
pub const _ze_kernel_flag_t_ZE_KERNEL_FLAG_FORCE_RESIDENCY: _ze_kernel_flag_t = 1;
pub const _ze_kernel_flag_t_ZE_KERNEL_FLAG_EXPLICIT_RESIDENCY: _ze_kernel_flag_t = 2;
pub const _ze_kernel_flag_t_ZE_KERNEL_FLAG_FORCE_UINT32: _ze_kernel_flag_t = 2147483647;
pub type _ze_kernel_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_kernel_flag_t as ze_kernel_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_kernel_flags_t,
    pub pKernelName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ze_kernel_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_desc_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_kernel_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_desc_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pKernelName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_desc_t),
            "::",
            stringify!(pKernelName)
        )
    );
}
extern "C" {
    pub fn zeKernelCreate(
        hModule: ze_module_handle_t,
        desc: *const ze_kernel_desc_t,
        phKernel: *mut ze_kernel_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelDestroy(hKernel: ze_kernel_handle_t) -> ze_result_t;
}
extern "C" {
    pub fn zeModuleGetFunctionPointer(
        hModule: ze_module_handle_t,
        pFunctionName: *const ::std::os::raw::c_char,
        pfnFunction: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelSetGroupSize(
        hKernel: ze_kernel_handle_t,
        groupSizeX: u32,
        groupSizeY: u32,
        groupSizeZ: u32,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelSuggestGroupSize(
        hKernel: ze_kernel_handle_t,
        globalSizeX: u32,
        globalSizeY: u32,
        globalSizeZ: u32,
        groupSizeX: *mut u32,
        groupSizeY: *mut u32,
        groupSizeZ: *mut u32,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelSuggestMaxCooperativeGroupCount(
        hKernel: ze_kernel_handle_t,
        totalGroupCount: *mut u32,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelSetArgumentValue(
        hKernel: ze_kernel_handle_t,
        argIndex: u32,
        argSize: usize,
        pArgValue: *const ::std::os::raw::c_void,
    ) -> ze_result_t;
}
pub type ze_kernel_indirect_access_flags_t = u32;
pub const _ze_kernel_indirect_access_flag_t_ZE_KERNEL_INDIRECT_ACCESS_FLAG_HOST:
    _ze_kernel_indirect_access_flag_t = 1;
pub const _ze_kernel_indirect_access_flag_t_ZE_KERNEL_INDIRECT_ACCESS_FLAG_DEVICE:
    _ze_kernel_indirect_access_flag_t = 2;
pub const _ze_kernel_indirect_access_flag_t_ZE_KERNEL_INDIRECT_ACCESS_FLAG_SHARED:
    _ze_kernel_indirect_access_flag_t = 4;
pub const _ze_kernel_indirect_access_flag_t_ZE_KERNEL_INDIRECT_ACCESS_FLAG_FORCE_UINT32:
    _ze_kernel_indirect_access_flag_t = 2147483647;
pub type _ze_kernel_indirect_access_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_kernel_indirect_access_flag_t as ze_kernel_indirect_access_flag_t;
extern "C" {
    pub fn zeKernelSetIndirectAccess(
        hKernel: ze_kernel_handle_t,
        flags: ze_kernel_indirect_access_flags_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelGetIndirectAccess(
        hKernel: ze_kernel_handle_t,
        pFlags: *mut ze_kernel_indirect_access_flags_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelGetSourceAttributes(
        hKernel: ze_kernel_handle_t,
        pSize: *mut u32,
        pString: *mut *mut ::std::os::raw::c_char,
    ) -> ze_result_t;
}
pub type ze_cache_config_flags_t = u32;
pub const _ze_cache_config_flag_t_ZE_CACHE_CONFIG_FLAG_LARGE_SLM: _ze_cache_config_flag_t = 1;
pub const _ze_cache_config_flag_t_ZE_CACHE_CONFIG_FLAG_LARGE_DATA: _ze_cache_config_flag_t = 2;
pub const _ze_cache_config_flag_t_ZE_CACHE_CONFIG_FLAG_FORCE_UINT32: _ze_cache_config_flag_t =
    2147483647;
pub type _ze_cache_config_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_cache_config_flag_t as ze_cache_config_flag_t;
extern "C" {
    pub fn zeKernelSetCacheConfig(
        hKernel: ze_kernel_handle_t,
        flags: ze_cache_config_flags_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_uuid_t {
    pub kid: [u8; 16usize],
    pub mid: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__ze_kernel_uuid_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_uuid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_uuid_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_kernel_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_kernel_uuid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_uuid_t),
            "::",
            stringify!(kid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_uuid_t),
            "::",
            stringify!(mid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub numKernelArgs: u32,
    pub requiredGroupSizeX: u32,
    pub requiredGroupSizeY: u32,
    pub requiredGroupSizeZ: u32,
    pub requiredNumSubGroups: u32,
    pub requiredSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxNumSubgroups: u32,
    pub localMemSize: u32,
    pub privateMemSize: u32,
    pub spillMemSize: u32,
    pub uuid: ze_kernel_uuid_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_properties_t>(),
        96usize,
        concat!("Size of: ", stringify!(_ze_kernel_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numKernelArgs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(numKernelArgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredGroupSizeX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(requiredGroupSizeX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredGroupSizeY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(requiredGroupSizeY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredGroupSizeZ) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(requiredGroupSizeZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredNumSubGroups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(requiredNumSubGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredSubgroupSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(requiredSubgroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSubgroupSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(maxSubgroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumSubgroups) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(maxNumSubgroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localMemSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(localMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privateMemSize) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(privateMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spillMemSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(spillMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_properties_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_preferred_group_size_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub preferredMultiple: u32,
}
#[test]
fn bindgen_test_layout__ze_kernel_preferred_group_size_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_preferred_group_size_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_preferred_group_size_properties_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_preferred_group_size_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_preferred_group_size_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_preferred_group_size_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_preferred_group_size_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_preferred_group_size_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preferredMultiple) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_preferred_group_size_properties_t),
            "::",
            stringify!(preferredMultiple)
        )
    );
}
extern "C" {
    pub fn zeKernelGetProperties(
        hKernel: ze_kernel_handle_t,
        pKernelProperties: *mut ze_kernel_properties_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeKernelGetName(
        hKernel: ze_kernel_handle_t,
        pSize: *mut usize,
        pName: *mut ::std::os::raw::c_char,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_group_count_t {
    pub groupCountX: u32,
    pub groupCountY: u32,
    pub groupCountZ: u32,
}
#[test]
fn bindgen_test_layout__ze_group_count_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_group_count_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_group_count_t>(),
        12usize,
        concat!("Size of: ", stringify!(_ze_group_count_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_group_count_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ze_group_count_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCountX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_group_count_t),
            "::",
            stringify!(groupCountX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCountY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_group_count_t),
            "::",
            stringify!(groupCountY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCountZ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_group_count_t),
            "::",
            stringify!(groupCountZ)
        )
    );
}
extern "C" {
    pub fn zeCommandListAppendLaunchKernel(
        hCommandList: ze_command_list_handle_t,
        hKernel: ze_kernel_handle_t,
        pLaunchFuncArgs: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendLaunchCooperativeKernel(
        hCommandList: ze_command_list_handle_t,
        hKernel: ze_kernel_handle_t,
        pLaunchFuncArgs: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendLaunchKernelIndirect(
        hCommandList: ze_command_list_handle_t,
        hKernel: ze_kernel_handle_t,
        pLaunchArgumentsBuffer: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendLaunchMultipleKernelsIndirect(
        hCommandList: ze_command_list_handle_t,
        numKernels: u32,
        phKernels: *mut ze_kernel_handle_t,
        pCountBuffer: *const u32,
        pLaunchArgumentsBuffer: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
pub const _ze_module_program_exp_version_t_ZE_MODULE_PROGRAM_EXP_VERSION_1_0:
    _ze_module_program_exp_version_t = 65536;
pub const _ze_module_program_exp_version_t_ZE_MODULE_PROGRAM_EXP_VERSION_CURRENT:
    _ze_module_program_exp_version_t = 65536;
pub const _ze_module_program_exp_version_t_ZE_MODULE_PROGRAM_EXP_VERSION_FORCE_UINT32:
    _ze_module_program_exp_version_t = 2147483647;
pub type _ze_module_program_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_module_program_exp_version_t as ze_module_program_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_program_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub count: u32,
    pub inputSizes: *const usize,
    pub pInputModules: *mut *const u8,
    pub pBuildFlags: *mut *const ::std::os::raw::c_char,
    pub pConstants: *mut *const ze_module_constants_t,
}
#[test]
fn bindgen_test_layout__ze_module_program_exp_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_program_exp_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_program_exp_desc_t>(),
        56usize,
        concat!("Size of: ", stringify!(_ze_module_program_exp_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_program_exp_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_module_program_exp_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_program_exp_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_program_exp_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_program_exp_desc_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputSizes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_program_exp_desc_t),
            "::",
            stringify!(inputSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputModules) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_program_exp_desc_t),
            "::",
            stringify!(pInputModules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBuildFlags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_program_exp_desc_t),
            "::",
            stringify!(pBuildFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConstants) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_program_exp_desc_t),
            "::",
            stringify!(pConstants)
        )
    );
}
pub const _ze_raytracing_ext_version_t_ZE_RAYTRACING_EXT_VERSION_1_0: _ze_raytracing_ext_version_t =
    65536;
pub const _ze_raytracing_ext_version_t_ZE_RAYTRACING_EXT_VERSION_CURRENT:
    _ze_raytracing_ext_version_t = 65536;
pub const _ze_raytracing_ext_version_t_ZE_RAYTRACING_EXT_VERSION_FORCE_UINT32:
    _ze_raytracing_ext_version_t = 2147483647;
pub type _ze_raytracing_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_raytracing_ext_version_t as ze_raytracing_ext_version_t;
pub type ze_device_raytracing_ext_flags_t = u32;
pub const _ze_device_raytracing_ext_flag_t_ZE_DEVICE_RAYTRACING_EXT_FLAG_RAYQUERY:
    _ze_device_raytracing_ext_flag_t = 1;
pub const _ze_device_raytracing_ext_flag_t_ZE_DEVICE_RAYTRACING_EXT_FLAG_FORCE_UINT32:
    _ze_device_raytracing_ext_flag_t = 2147483647;
pub type _ze_device_raytracing_ext_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_raytracing_ext_flag_t as ze_device_raytracing_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_raytracing_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: ze_device_raytracing_ext_flags_t,
    pub maxBVHLevels: u32,
}
#[test]
fn bindgen_test_layout__ze_device_raytracing_ext_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_raytracing_ext_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_raytracing_ext_properties_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_raytracing_ext_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_raytracing_ext_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_raytracing_ext_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_raytracing_ext_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_raytracing_ext_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_raytracing_ext_properties_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBVHLevels) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_raytracing_ext_properties_t),
            "::",
            stringify!(maxBVHLevels)
        )
    );
}
pub type ze_raytracing_mem_alloc_ext_flags_t = u32;
pub const _ze_raytracing_mem_alloc_ext_flag_t_ZE_RAYTRACING_MEM_ALLOC_EXT_FLAG_TBD:
    _ze_raytracing_mem_alloc_ext_flag_t = 1;
pub const _ze_raytracing_mem_alloc_ext_flag_t_ZE_RAYTRACING_MEM_ALLOC_EXT_FLAG_FORCE_UINT32:
    _ze_raytracing_mem_alloc_ext_flag_t = 2147483647;
pub type _ze_raytracing_mem_alloc_ext_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_raytracing_mem_alloc_ext_flag_t as ze_raytracing_mem_alloc_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_raytracing_mem_alloc_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_raytracing_mem_alloc_ext_flags_t,
}
#[test]
fn bindgen_test_layout__ze_raytracing_mem_alloc_ext_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_raytracing_mem_alloc_ext_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_raytracing_mem_alloc_ext_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_raytracing_mem_alloc_ext_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_raytracing_mem_alloc_ext_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_raytracing_mem_alloc_ext_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_raytracing_mem_alloc_ext_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_raytracing_mem_alloc_ext_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_raytracing_mem_alloc_ext_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeContextMakeMemoryResident(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeContextEvictMemory(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeContextMakeImageResident(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        hImage: ze_image_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeContextEvictImage(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        hImage: ze_image_handle_t,
    ) -> ze_result_t;
}
pub const _ze_sampler_address_mode_t_ZE_SAMPLER_ADDRESS_MODE_NONE: _ze_sampler_address_mode_t = 0;
pub const _ze_sampler_address_mode_t_ZE_SAMPLER_ADDRESS_MODE_REPEAT: _ze_sampler_address_mode_t = 1;
pub const _ze_sampler_address_mode_t_ZE_SAMPLER_ADDRESS_MODE_CLAMP: _ze_sampler_address_mode_t = 2;
pub const _ze_sampler_address_mode_t_ZE_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
    _ze_sampler_address_mode_t = 3;
pub const _ze_sampler_address_mode_t_ZE_SAMPLER_ADDRESS_MODE_MIRROR: _ze_sampler_address_mode_t = 4;
pub const _ze_sampler_address_mode_t_ZE_SAMPLER_ADDRESS_MODE_FORCE_UINT32:
    _ze_sampler_address_mode_t = 2147483647;
pub type _ze_sampler_address_mode_t = ::std::os::raw::c_uint;
pub use self::_ze_sampler_address_mode_t as ze_sampler_address_mode_t;
pub const _ze_sampler_filter_mode_t_ZE_SAMPLER_FILTER_MODE_NEAREST: _ze_sampler_filter_mode_t = 0;
pub const _ze_sampler_filter_mode_t_ZE_SAMPLER_FILTER_MODE_LINEAR: _ze_sampler_filter_mode_t = 1;
pub const _ze_sampler_filter_mode_t_ZE_SAMPLER_FILTER_MODE_FORCE_UINT32: _ze_sampler_filter_mode_t =
    2147483647;
pub type _ze_sampler_filter_mode_t = ::std::os::raw::c_uint;
pub use self::_ze_sampler_filter_mode_t as ze_sampler_filter_mode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_sampler_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub addressMode: ze_sampler_address_mode_t,
    pub filterMode: ze_sampler_filter_mode_t,
    pub isNormalized: ze_bool_t,
}
#[test]
fn bindgen_test_layout__ze_sampler_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_sampler_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_sampler_desc_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_sampler_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_sampler_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_sampler_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_desc_t),
            "::",
            stringify!(addressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_desc_t),
            "::",
            stringify!(filterMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isNormalized) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_desc_t),
            "::",
            stringify!(isNormalized)
        )
    );
}
extern "C" {
    pub fn zeSamplerCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_sampler_desc_t,
        phSampler: *mut ze_sampler_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeSamplerDestroy(hSampler: ze_sampler_handle_t) -> ze_result_t;
}
pub const _ze_memory_access_attribute_t_ZE_MEMORY_ACCESS_ATTRIBUTE_NONE:
    _ze_memory_access_attribute_t = 0;
pub const _ze_memory_access_attribute_t_ZE_MEMORY_ACCESS_ATTRIBUTE_READWRITE:
    _ze_memory_access_attribute_t = 1;
pub const _ze_memory_access_attribute_t_ZE_MEMORY_ACCESS_ATTRIBUTE_READONLY:
    _ze_memory_access_attribute_t = 2;
pub const _ze_memory_access_attribute_t_ZE_MEMORY_ACCESS_ATTRIBUTE_FORCE_UINT32:
    _ze_memory_access_attribute_t = 2147483647;
pub type _ze_memory_access_attribute_t = ::std::os::raw::c_uint;
pub use self::_ze_memory_access_attribute_t as ze_memory_access_attribute_t;
extern "C" {
    pub fn zeVirtualMemReserve(
        hContext: ze_context_handle_t,
        pStart: *const ::std::os::raw::c_void,
        size: usize,
        pptr: *mut *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeVirtualMemFree(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeVirtualMemQueryPageSize(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        size: usize,
        pagesize: *mut usize,
    ) -> ze_result_t;
}
pub type ze_physical_mem_flags_t = u32;
pub const _ze_physical_mem_flag_t_ZE_PHYSICAL_MEM_FLAG_TBD: _ze_physical_mem_flag_t = 1;
pub const _ze_physical_mem_flag_t_ZE_PHYSICAL_MEM_FLAG_FORCE_UINT32: _ze_physical_mem_flag_t =
    2147483647;
pub type _ze_physical_mem_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_physical_mem_flag_t as ze_physical_mem_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_physical_mem_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_physical_mem_flags_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout__ze_physical_mem_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_physical_mem_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_physical_mem_desc_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_physical_mem_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_physical_mem_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_physical_mem_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_desc_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_desc_t),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn zePhysicalMemCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *mut ze_physical_mem_desc_t,
        phPhysicalMemory: *mut ze_physical_mem_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zePhysicalMemDestroy(
        hContext: ze_context_handle_t,
        hPhysicalMemory: ze_physical_mem_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeVirtualMemMap(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        hPhysicalMemory: ze_physical_mem_handle_t,
        offset: usize,
        access: ze_memory_access_attribute_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeVirtualMemUnmap(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeVirtualMemSetAccessAttribute(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        access: ze_memory_access_attribute_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeVirtualMemGetAccessAttribute(
        hContext: ze_context_handle_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        access: *mut ze_memory_access_attribute_t,
        outSize: *mut usize,
    ) -> ze_result_t;
}
pub const _ze_float_atomics_ext_version_t_ZE_FLOAT_ATOMICS_EXT_VERSION_1_0:
    _ze_float_atomics_ext_version_t = 65536;
pub const _ze_float_atomics_ext_version_t_ZE_FLOAT_ATOMICS_EXT_VERSION_CURRENT:
    _ze_float_atomics_ext_version_t = 65536;
pub const _ze_float_atomics_ext_version_t_ZE_FLOAT_ATOMICS_EXT_VERSION_FORCE_UINT32:
    _ze_float_atomics_ext_version_t = 2147483647;
pub type _ze_float_atomics_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_float_atomics_ext_version_t as ze_float_atomics_ext_version_t;
pub type ze_device_fp_atomic_ext_flags_t = u32;
pub const _ze_device_fp_atomic_ext_flag_t_ZE_DEVICE_FP_ATOMIC_EXT_FLAG_GLOBAL_LOAD_STORE:
    _ze_device_fp_atomic_ext_flag_t = 1;
pub const _ze_device_fp_atomic_ext_flag_t_ZE_DEVICE_FP_ATOMIC_EXT_FLAG_GLOBAL_ADD:
    _ze_device_fp_atomic_ext_flag_t = 2;
pub const _ze_device_fp_atomic_ext_flag_t_ZE_DEVICE_FP_ATOMIC_EXT_FLAG_GLOBAL_MIN_MAX:
    _ze_device_fp_atomic_ext_flag_t = 4;
pub const _ze_device_fp_atomic_ext_flag_t_ZE_DEVICE_FP_ATOMIC_EXT_FLAG_LOCAL_LOAD_STORE:
    _ze_device_fp_atomic_ext_flag_t = 65536;
pub const _ze_device_fp_atomic_ext_flag_t_ZE_DEVICE_FP_ATOMIC_EXT_FLAG_LOCAL_ADD:
    _ze_device_fp_atomic_ext_flag_t = 131072;
pub const _ze_device_fp_atomic_ext_flag_t_ZE_DEVICE_FP_ATOMIC_EXT_FLAG_LOCAL_MIN_MAX:
    _ze_device_fp_atomic_ext_flag_t = 262144;
pub const _ze_device_fp_atomic_ext_flag_t_ZE_DEVICE_FP_ATOMIC_EXT_FLAG_FORCE_UINT32:
    _ze_device_fp_atomic_ext_flag_t = 2147483647;
pub type _ze_device_fp_atomic_ext_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_device_fp_atomic_ext_flag_t as ze_device_fp_atomic_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_float_atomic_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fp16Flags: ze_device_fp_atomic_ext_flags_t,
    pub fp32Flags: ze_device_fp_atomic_ext_flags_t,
    pub fp64Flags: ze_device_fp_atomic_ext_flags_t,
}
#[test]
fn bindgen_test_layout__ze_float_atomic_ext_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_float_atomic_ext_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_float_atomic_ext_properties_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_float_atomic_ext_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_float_atomic_ext_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_float_atomic_ext_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_float_atomic_ext_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_float_atomic_ext_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp16Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_float_atomic_ext_properties_t),
            "::",
            stringify!(fp16Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp32Flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_float_atomic_ext_properties_t),
            "::",
            stringify!(fp32Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp64Flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_float_atomic_ext_properties_t),
            "::",
            stringify!(fp64Flags)
        )
    );
}
pub const _ze_global_offset_exp_version_t_ZE_GLOBAL_OFFSET_EXP_VERSION_1_0:
    _ze_global_offset_exp_version_t = 65536;
pub const _ze_global_offset_exp_version_t_ZE_GLOBAL_OFFSET_EXP_VERSION_CURRENT:
    _ze_global_offset_exp_version_t = 65536;
pub const _ze_global_offset_exp_version_t_ZE_GLOBAL_OFFSET_EXP_VERSION_FORCE_UINT32:
    _ze_global_offset_exp_version_t = 2147483647;
pub type _ze_global_offset_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_global_offset_exp_version_t as ze_global_offset_exp_version_t;
extern "C" {
    pub fn zeKernelSetGlobalOffsetExp(
        hKernel: ze_kernel_handle_t,
        offsetX: u32,
        offsetY: u32,
        offsetZ: u32,
    ) -> ze_result_t;
}
pub const _ze_relaxed_allocation_limits_exp_version_t_ZE_RELAXED_ALLOCATION_LIMITS_EXP_VERSION_1_0 : _ze_relaxed_allocation_limits_exp_version_t = 65536 ;
pub const _ze_relaxed_allocation_limits_exp_version_t_ZE_RELAXED_ALLOCATION_LIMITS_EXP_VERSION_CURRENT : _ze_relaxed_allocation_limits_exp_version_t = 65536 ;
pub const _ze_relaxed_allocation_limits_exp_version_t_ZE_RELAXED_ALLOCATION_LIMITS_EXP_VERSION_FORCE_UINT32 : _ze_relaxed_allocation_limits_exp_version_t = 2147483647 ;
pub type _ze_relaxed_allocation_limits_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_relaxed_allocation_limits_exp_version_t as ze_relaxed_allocation_limits_exp_version_t;
pub type ze_relaxed_allocation_limits_exp_flags_t = u32;
pub const _ze_relaxed_allocation_limits_exp_flag_t_ZE_RELAXED_ALLOCATION_LIMITS_EXP_FLAG_MAX_SIZE : _ze_relaxed_allocation_limits_exp_flag_t = 1 ;
pub const _ze_relaxed_allocation_limits_exp_flag_t_ZE_RELAXED_ALLOCATION_LIMITS_EXP_FLAG_FORCE_UINT32 : _ze_relaxed_allocation_limits_exp_flag_t = 2147483647 ;
pub type _ze_relaxed_allocation_limits_exp_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_relaxed_allocation_limits_exp_flag_t as ze_relaxed_allocation_limits_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_relaxed_allocation_limits_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_relaxed_allocation_limits_exp_flags_t,
}
#[test]
fn bindgen_test_layout__ze_relaxed_allocation_limits_exp_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_relaxed_allocation_limits_exp_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_relaxed_allocation_limits_exp_desc_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_relaxed_allocation_limits_exp_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_relaxed_allocation_limits_exp_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_relaxed_allocation_limits_exp_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_relaxed_allocation_limits_exp_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_relaxed_allocation_limits_exp_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_relaxed_allocation_limits_exp_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
pub const _ze_cache_reservation_ext_version_t_ZE_CACHE_RESERVATION_EXT_VERSION_1_0:
    _ze_cache_reservation_ext_version_t = 65536;
pub const _ze_cache_reservation_ext_version_t_ZE_CACHE_RESERVATION_EXT_VERSION_CURRENT:
    _ze_cache_reservation_ext_version_t = 65536;
pub const _ze_cache_reservation_ext_version_t_ZE_CACHE_RESERVATION_EXT_VERSION_FORCE_UINT32:
    _ze_cache_reservation_ext_version_t = 2147483647;
pub type _ze_cache_reservation_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_cache_reservation_ext_version_t as ze_cache_reservation_ext_version_t;
pub const _ze_cache_ext_region_t_ZE_CACHE_EXT_REGION_ZE_CACHE_REGION_DEFAULT:
    _ze_cache_ext_region_t = 0;
pub const _ze_cache_ext_region_t_ZE_CACHE_EXT_REGION_ZE_CACHE_RESERVE_REGION:
    _ze_cache_ext_region_t = 1;
pub const _ze_cache_ext_region_t_ZE_CACHE_EXT_REGION_ZE_CACHE_NON_RESERVED_REGION:
    _ze_cache_ext_region_t = 2;
pub const _ze_cache_ext_region_t_ZE_CACHE_EXT_REGION_FORCE_UINT32: _ze_cache_ext_region_t =
    2147483647;
pub type _ze_cache_ext_region_t = ::std::os::raw::c_uint;
pub use self::_ze_cache_ext_region_t as ze_cache_ext_region_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_cache_reservation_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxCacheReservationSize: usize,
}
#[test]
fn bindgen_test_layout__ze_cache_reservation_ext_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_cache_reservation_ext_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_cache_reservation_ext_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_cache_reservation_ext_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_cache_reservation_ext_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_cache_reservation_ext_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_cache_reservation_ext_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_cache_reservation_ext_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCacheReservationSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_cache_reservation_ext_desc_t),
            "::",
            stringify!(maxCacheReservationSize)
        )
    );
}
extern "C" {
    pub fn zeDeviceReserveCacheExt(
        hDevice: ze_device_handle_t,
        cacheLevel: usize,
        cacheReservationSize: usize,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeDeviceSetCacheAdviceExt(
        hDevice: ze_device_handle_t,
        ptr: *mut ::std::os::raw::c_void,
        regionSize: usize,
        cacheRegion: ze_cache_ext_region_t,
    ) -> ze_result_t;
}
pub const _ze_event_query_timestamps_exp_version_t_ZE_EVENT_QUERY_TIMESTAMPS_EXP_VERSION_1_0:
    _ze_event_query_timestamps_exp_version_t = 65536;
pub const _ze_event_query_timestamps_exp_version_t_ZE_EVENT_QUERY_TIMESTAMPS_EXP_VERSION_CURRENT:
    _ze_event_query_timestamps_exp_version_t = 65536;
pub const _ze_event_query_timestamps_exp_version_t_ZE_EVENT_QUERY_TIMESTAMPS_EXP_VERSION_FORCE_UINT32 : _ze_event_query_timestamps_exp_version_t = 2147483647 ;
pub type _ze_event_query_timestamps_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_event_query_timestamps_exp_version_t as ze_event_query_timestamps_exp_version_t;
extern "C" {
    pub fn zeEventQueryTimestampsExp(
        hEvent: ze_event_handle_t,
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pTimestamps: *mut ze_kernel_timestamp_result_t,
    ) -> ze_result_t;
}
pub const _ze_image_memory_properties_exp_version_t_ZE_IMAGE_MEMORY_PROPERTIES_EXP_VERSION_1_0:
    _ze_image_memory_properties_exp_version_t = 65536;
pub const _ze_image_memory_properties_exp_version_t_ZE_IMAGE_MEMORY_PROPERTIES_EXP_VERSION_CURRENT : _ze_image_memory_properties_exp_version_t = 65536 ;
pub const _ze_image_memory_properties_exp_version_t_ZE_IMAGE_MEMORY_PROPERTIES_EXP_VERSION_FORCE_UINT32 : _ze_image_memory_properties_exp_version_t = 2147483647 ;
pub type _ze_image_memory_properties_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_image_memory_properties_exp_version_t as ze_image_memory_properties_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_memory_properties_exp_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub size: u64,
    pub rowPitch: u64,
    pub slicePitch: u64,
}
#[test]
fn bindgen_test_layout__ze_image_memory_properties_exp_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_memory_properties_exp_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_memory_properties_exp_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_image_memory_properties_exp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_memory_properties_exp_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_image_memory_properties_exp_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_memory_properties_exp_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_memory_properties_exp_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_memory_properties_exp_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowPitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_memory_properties_exp_t),
            "::",
            stringify!(rowPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slicePitch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_memory_properties_exp_t),
            "::",
            stringify!(slicePitch)
        )
    );
}
extern "C" {
    pub fn zeImageGetMemoryPropertiesExp(
        hImage: ze_image_handle_t,
        pMemoryProperties: *mut ze_image_memory_properties_exp_t,
    ) -> ze_result_t;
}
pub const _ze_image_view_ext_version_t_ZE_IMAGE_VIEW_EXT_VERSION_1_0: _ze_image_view_ext_version_t =
    65536;
pub const _ze_image_view_ext_version_t_ZE_IMAGE_VIEW_EXT_VERSION_CURRENT:
    _ze_image_view_ext_version_t = 65536;
pub const _ze_image_view_ext_version_t_ZE_IMAGE_VIEW_EXT_VERSION_FORCE_UINT32:
    _ze_image_view_ext_version_t = 2147483647;
pub type _ze_image_view_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_image_view_ext_version_t as ze_image_view_ext_version_t;
extern "C" {
    pub fn zeImageViewCreateExt(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        hImage: ze_image_handle_t,
        phImageView: *mut ze_image_handle_t,
    ) -> ze_result_t;
}
pub const _ze_image_view_exp_version_t_ZE_IMAGE_VIEW_EXP_VERSION_1_0: _ze_image_view_exp_version_t =
    65536;
pub const _ze_image_view_exp_version_t_ZE_IMAGE_VIEW_EXP_VERSION_CURRENT:
    _ze_image_view_exp_version_t = 65536;
pub const _ze_image_view_exp_version_t_ZE_IMAGE_VIEW_EXP_VERSION_FORCE_UINT32:
    _ze_image_view_exp_version_t = 2147483647;
pub type _ze_image_view_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_image_view_exp_version_t as ze_image_view_exp_version_t;
extern "C" {
    pub fn zeImageViewCreateExp(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        hImage: ze_image_handle_t,
        phImageView: *mut ze_image_handle_t,
    ) -> ze_result_t;
}
pub const _ze_image_view_planar_ext_version_t_ZE_IMAGE_VIEW_PLANAR_EXT_VERSION_1_0:
    _ze_image_view_planar_ext_version_t = 65536;
pub const _ze_image_view_planar_ext_version_t_ZE_IMAGE_VIEW_PLANAR_EXT_VERSION_CURRENT:
    _ze_image_view_planar_ext_version_t = 65536;
pub const _ze_image_view_planar_ext_version_t_ZE_IMAGE_VIEW_PLANAR_EXT_VERSION_FORCE_UINT32:
    _ze_image_view_planar_ext_version_t = 2147483647;
pub type _ze_image_view_planar_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_image_view_planar_ext_version_t as ze_image_view_planar_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_view_planar_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeIndex: u32,
}
#[test]
fn bindgen_test_layout__ze_image_view_planar_ext_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_view_planar_ext_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_view_planar_ext_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_image_view_planar_ext_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_view_planar_ext_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_image_view_planar_ext_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_view_planar_ext_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_view_planar_ext_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_view_planar_ext_desc_t),
            "::",
            stringify!(planeIndex)
        )
    );
}
pub const _ze_image_view_planar_exp_version_t_ZE_IMAGE_VIEW_PLANAR_EXP_VERSION_1_0:
    _ze_image_view_planar_exp_version_t = 65536;
pub const _ze_image_view_planar_exp_version_t_ZE_IMAGE_VIEW_PLANAR_EXP_VERSION_CURRENT:
    _ze_image_view_planar_exp_version_t = 65536;
pub const _ze_image_view_planar_exp_version_t_ZE_IMAGE_VIEW_PLANAR_EXP_VERSION_FORCE_UINT32:
    _ze_image_view_planar_exp_version_t = 2147483647;
pub type _ze_image_view_planar_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_image_view_planar_exp_version_t as ze_image_view_planar_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_view_planar_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeIndex: u32,
}
#[test]
fn bindgen_test_layout__ze_image_view_planar_exp_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_view_planar_exp_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_view_planar_exp_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_image_view_planar_exp_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_view_planar_exp_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_image_view_planar_exp_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_view_planar_exp_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_view_planar_exp_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_view_planar_exp_desc_t),
            "::",
            stringify!(planeIndex)
        )
    );
}
pub const _ze_scheduling_hints_exp_version_t_ZE_SCHEDULING_HINTS_EXP_VERSION_1_0:
    _ze_scheduling_hints_exp_version_t = 65536;
pub const _ze_scheduling_hints_exp_version_t_ZE_SCHEDULING_HINTS_EXP_VERSION_CURRENT:
    _ze_scheduling_hints_exp_version_t = 65536;
pub const _ze_scheduling_hints_exp_version_t_ZE_SCHEDULING_HINTS_EXP_VERSION_FORCE_UINT32:
    _ze_scheduling_hints_exp_version_t = 2147483647;
pub type _ze_scheduling_hints_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_scheduling_hints_exp_version_t as ze_scheduling_hints_exp_version_t;
pub type ze_scheduling_hint_exp_flags_t = u32;
pub const _ze_scheduling_hint_exp_flag_t_ZE_SCHEDULING_HINT_EXP_FLAG_OLDEST_FIRST:
    _ze_scheduling_hint_exp_flag_t = 1;
pub const _ze_scheduling_hint_exp_flag_t_ZE_SCHEDULING_HINT_EXP_FLAG_ROUND_ROBIN:
    _ze_scheduling_hint_exp_flag_t = 2;
pub const _ze_scheduling_hint_exp_flag_t_ZE_SCHEDULING_HINT_EXP_FLAG_STALL_BASED_ROUND_ROBIN:
    _ze_scheduling_hint_exp_flag_t = 4;
pub const _ze_scheduling_hint_exp_flag_t_ZE_SCHEDULING_HINT_EXP_FLAG_FORCE_UINT32:
    _ze_scheduling_hint_exp_flag_t = 2147483647;
pub type _ze_scheduling_hint_exp_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_scheduling_hint_exp_flag_t as ze_scheduling_hint_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_scheduling_hint_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub schedulingHintFlags: ze_scheduling_hint_exp_flags_t,
}
#[test]
fn bindgen_test_layout__ze_scheduling_hint_exp_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_scheduling_hint_exp_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_scheduling_hint_exp_properties_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_scheduling_hint_exp_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_scheduling_hint_exp_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_scheduling_hint_exp_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_scheduling_hint_exp_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_scheduling_hint_exp_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schedulingHintFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_scheduling_hint_exp_properties_t),
            "::",
            stringify!(schedulingHintFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_scheduling_hint_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_scheduling_hint_exp_flags_t,
}
#[test]
fn bindgen_test_layout__ze_scheduling_hint_exp_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_scheduling_hint_exp_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_scheduling_hint_exp_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_scheduling_hint_exp_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_scheduling_hint_exp_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_scheduling_hint_exp_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_scheduling_hint_exp_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_scheduling_hint_exp_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_scheduling_hint_exp_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeKernelSchedulingHintExp(
        hKernel: ze_kernel_handle_t,
        pHint: *mut ze_scheduling_hint_exp_desc_t,
    ) -> ze_result_t;
}
pub const _ze_linkonce_odr_ext_version_t_ZE_LINKONCE_ODR_EXT_VERSION_1_0:
    _ze_linkonce_odr_ext_version_t = 65536;
pub const _ze_linkonce_odr_ext_version_t_ZE_LINKONCE_ODR_EXT_VERSION_CURRENT:
    _ze_linkonce_odr_ext_version_t = 65536;
pub const _ze_linkonce_odr_ext_version_t_ZE_LINKONCE_ODR_EXT_VERSION_FORCE_UINT32:
    _ze_linkonce_odr_ext_version_t = 2147483647;
pub type _ze_linkonce_odr_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_linkonce_odr_ext_version_t as ze_linkonce_odr_ext_version_t;
pub const _ze_power_saving_hint_exp_version_t_ZE_POWER_SAVING_HINT_EXP_VERSION_1_0:
    _ze_power_saving_hint_exp_version_t = 65536;
pub const _ze_power_saving_hint_exp_version_t_ZE_POWER_SAVING_HINT_EXP_VERSION_CURRENT:
    _ze_power_saving_hint_exp_version_t = 65536;
pub const _ze_power_saving_hint_exp_version_t_ZE_POWER_SAVING_HINT_EXP_VERSION_FORCE_UINT32:
    _ze_power_saving_hint_exp_version_t = 2147483647;
pub type _ze_power_saving_hint_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_power_saving_hint_exp_version_t as ze_power_saving_hint_exp_version_t;
pub const _ze_power_saving_hint_type_t_ZE_POWER_SAVING_HINT_TYPE_MIN: _ze_power_saving_hint_type_t =
    0;
pub const _ze_power_saving_hint_type_t_ZE_POWER_SAVING_HINT_TYPE_MAX: _ze_power_saving_hint_type_t =
    100;
pub const _ze_power_saving_hint_type_t_ZE_POWER_SAVING_HINT_TYPE_FORCE_UINT32:
    _ze_power_saving_hint_type_t = 2147483647;
pub type _ze_power_saving_hint_type_t = ::std::os::raw::c_uint;
pub use self::_ze_power_saving_hint_type_t as ze_power_saving_hint_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_power_saving_hint_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub hint: u32,
}
#[test]
fn bindgen_test_layout__ze_context_power_saving_hint_exp_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_power_saving_hint_exp_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_power_saving_hint_exp_desc_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_context_power_saving_hint_exp_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_power_saving_hint_exp_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_context_power_saving_hint_exp_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_power_saving_hint_exp_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_power_saving_hint_exp_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_power_saving_hint_exp_desc_t),
            "::",
            stringify!(hint)
        )
    );
}
pub const _ze_subgroup_ext_version_t_ZE_SUBGROUP_EXT_VERSION_1_0: _ze_subgroup_ext_version_t =
    65536;
pub const _ze_subgroup_ext_version_t_ZE_SUBGROUP_EXT_VERSION_CURRENT: _ze_subgroup_ext_version_t =
    65536;
pub const _ze_subgroup_ext_version_t_ZE_SUBGROUP_EXT_VERSION_FORCE_UINT32:
    _ze_subgroup_ext_version_t = 2147483647;
pub type _ze_subgroup_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_subgroup_ext_version_t as ze_subgroup_ext_version_t;
pub const _ze_eu_count_ext_version_t_ZE_EU_COUNT_EXT_VERSION_1_0: _ze_eu_count_ext_version_t =
    65536;
pub const _ze_eu_count_ext_version_t_ZE_EU_COUNT_EXT_VERSION_CURRENT: _ze_eu_count_ext_version_t =
    65536;
pub const _ze_eu_count_ext_version_t_ZE_EU_COUNT_EXT_VERSION_FORCE_UINT32:
    _ze_eu_count_ext_version_t = 2147483647;
pub type _ze_eu_count_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_eu_count_ext_version_t as ze_eu_count_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_eu_count_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub numTotalEUs: u32,
}
#[test]
fn bindgen_test_layout__ze_eu_count_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_eu_count_ext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_eu_count_ext_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_eu_count_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_eu_count_ext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_eu_count_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_eu_count_ext_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_eu_count_ext_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numTotalEUs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_eu_count_ext_t),
            "::",
            stringify!(numTotalEUs)
        )
    );
}
pub const _ze_pci_properties_ext_version_t_ZE_PCI_PROPERTIES_EXT_VERSION_1_0:
    _ze_pci_properties_ext_version_t = 65536;
pub const _ze_pci_properties_ext_version_t_ZE_PCI_PROPERTIES_EXT_VERSION_CURRENT:
    _ze_pci_properties_ext_version_t = 65536;
pub const _ze_pci_properties_ext_version_t_ZE_PCI_PROPERTIES_EXT_VERSION_FORCE_UINT32:
    _ze_pci_properties_ext_version_t = 2147483647;
pub type _ze_pci_properties_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_pci_properties_ext_version_t as ze_pci_properties_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_pci_address_ext_t {
    pub domain: u32,
    pub bus: u32,
    pub device: u32,
    pub function: u32,
}
#[test]
fn bindgen_test_layout__ze_pci_address_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_pci_address_ext_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_pci_address_ext_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_pci_address_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_pci_address_ext_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ze_pci_address_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_address_ext_t),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_address_ext_t),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_address_ext_t),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_address_ext_t),
            "::",
            stringify!(function)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_pci_speed_ext_t {
    pub genVersion: i32,
    pub width: i32,
    pub maxBandwidth: i64,
}
#[test]
fn bindgen_test_layout__ze_pci_speed_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_pci_speed_ext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_pci_speed_ext_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_pci_speed_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_pci_speed_ext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_pci_speed_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_speed_ext_t),
            "::",
            stringify!(genVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_speed_ext_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBandwidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_speed_ext_t),
            "::",
            stringify!(maxBandwidth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_pci_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub address: ze_pci_address_ext_t,
    pub maxSpeed: ze_pci_speed_ext_t,
}
#[test]
fn bindgen_test_layout__ze_pci_ext_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_pci_ext_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_pci_ext_properties_t>(),
        48usize,
        concat!("Size of: ", stringify!(_ze_pci_ext_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_pci_ext_properties_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_pci_ext_properties_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_ext_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_ext_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_ext_properties_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSpeed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_pci_ext_properties_t),
            "::",
            stringify!(maxSpeed)
        )
    );
}
extern "C" {
    pub fn zeDevicePciGetPropertiesExt(
        hDevice: ze_device_handle_t,
        pPciProperties: *mut ze_pci_ext_properties_t,
    ) -> ze_result_t;
}
pub const _ze_srgb_ext_version_t_ZE_SRGB_EXT_VERSION_1_0: _ze_srgb_ext_version_t = 65536;
pub const _ze_srgb_ext_version_t_ZE_SRGB_EXT_VERSION_CURRENT: _ze_srgb_ext_version_t = 65536;
pub const _ze_srgb_ext_version_t_ZE_SRGB_EXT_VERSION_FORCE_UINT32: _ze_srgb_ext_version_t =
    2147483647;
pub type _ze_srgb_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_srgb_ext_version_t as ze_srgb_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_srgb_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub sRGB: ze_bool_t,
}
#[test]
fn bindgen_test_layout__ze_srgb_ext_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_srgb_ext_desc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_srgb_ext_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_srgb_ext_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_srgb_ext_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_srgb_ext_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_srgb_ext_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_srgb_ext_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sRGB) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_srgb_ext_desc_t),
            "::",
            stringify!(sRGB)
        )
    );
}
pub const _ze_image_copy_ext_version_t_ZE_IMAGE_COPY_EXT_VERSION_1_0: _ze_image_copy_ext_version_t =
    65536;
pub const _ze_image_copy_ext_version_t_ZE_IMAGE_COPY_EXT_VERSION_CURRENT:
    _ze_image_copy_ext_version_t = 65536;
pub const _ze_image_copy_ext_version_t_ZE_IMAGE_COPY_EXT_VERSION_FORCE_UINT32:
    _ze_image_copy_ext_version_t = 2147483647;
pub type _ze_image_copy_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_image_copy_ext_version_t as ze_image_copy_ext_version_t;
extern "C" {
    pub fn zeCommandListAppendImageCopyToMemoryExt(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::std::os::raw::c_void,
        hSrcImage: ze_image_handle_t,
        pSrcRegion: *const ze_image_region_t,
        destRowPitch: u32,
        destSlicePitch: u32,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeCommandListAppendImageCopyFromMemoryExt(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        srcptr: *const ::std::os::raw::c_void,
        pDstRegion: *const ze_image_region_t,
        srcRowPitch: u32,
        srcSlicePitch: u32,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
pub const _ze_image_query_alloc_properties_ext_version_t_ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_VERSION_1_0 : _ze_image_query_alloc_properties_ext_version_t = 65536 ;
pub const _ze_image_query_alloc_properties_ext_version_t_ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_VERSION_CURRENT : _ze_image_query_alloc_properties_ext_version_t = 65536 ;
pub const _ze_image_query_alloc_properties_ext_version_t_ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_VERSION_FORCE_UINT32 : _ze_image_query_alloc_properties_ext_version_t = 2147483647 ;
pub type _ze_image_query_alloc_properties_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_image_query_alloc_properties_ext_version_t as ze_image_query_alloc_properties_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_allocation_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub id: u64,
}
#[test]
fn bindgen_test_layout__ze_image_allocation_ext_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_allocation_ext_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_allocation_ext_properties_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_image_allocation_ext_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_allocation_ext_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_image_allocation_ext_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_allocation_ext_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_allocation_ext_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_allocation_ext_properties_t),
            "::",
            stringify!(id)
        )
    );
}
extern "C" {
    pub fn zeImageGetAllocPropertiesExt(
        hContext: ze_context_handle_t,
        hImage: ze_image_handle_t,
        pImageAllocProperties: *mut ze_image_allocation_ext_properties_t,
    ) -> ze_result_t;
}
pub const _ze_linkage_inspection_ext_version_t_ZE_LINKAGE_INSPECTION_EXT_VERSION_1_0:
    _ze_linkage_inspection_ext_version_t = 65536;
pub const _ze_linkage_inspection_ext_version_t_ZE_LINKAGE_INSPECTION_EXT_VERSION_CURRENT:
    _ze_linkage_inspection_ext_version_t = 65536;
pub const _ze_linkage_inspection_ext_version_t_ZE_LINKAGE_INSPECTION_EXT_VERSION_FORCE_UINT32:
    _ze_linkage_inspection_ext_version_t = 2147483647;
pub type _ze_linkage_inspection_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_linkage_inspection_ext_version_t as ze_linkage_inspection_ext_version_t;
pub type ze_linkage_inspection_ext_flags_t = u32;
pub const _ze_linkage_inspection_ext_flag_t_ZE_LINKAGE_INSPECTION_EXT_FLAG_IMPORTS:
    _ze_linkage_inspection_ext_flag_t = 1;
pub const _ze_linkage_inspection_ext_flag_t_ZE_LINKAGE_INSPECTION_EXT_FLAG_UNRESOLVABLE_IMPORTS:
    _ze_linkage_inspection_ext_flag_t = 2;
pub const _ze_linkage_inspection_ext_flag_t_ZE_LINKAGE_INSPECTION_EXT_FLAG_EXPORTS:
    _ze_linkage_inspection_ext_flag_t = 4;
pub const _ze_linkage_inspection_ext_flag_t_ZE_LINKAGE_INSPECTION_EXT_FLAG_FORCE_UINT32:
    _ze_linkage_inspection_ext_flag_t = 2147483647;
pub type _ze_linkage_inspection_ext_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_linkage_inspection_ext_flag_t as ze_linkage_inspection_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_linkage_inspection_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_linkage_inspection_ext_flags_t,
}
#[test]
fn bindgen_test_layout__ze_linkage_inspection_ext_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_linkage_inspection_ext_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_linkage_inspection_ext_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_linkage_inspection_ext_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_linkage_inspection_ext_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_linkage_inspection_ext_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_linkage_inspection_ext_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_linkage_inspection_ext_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_linkage_inspection_ext_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn zeModuleInspectLinkageExt(
        pInspectDesc: *mut ze_linkage_inspection_ext_desc_t,
        numModules: u32,
        phModules: *mut ze_module_handle_t,
        phLog: *mut ze_module_build_log_handle_t,
    ) -> ze_result_t;
}
pub const _ze_memory_compression_hints_ext_version_t_ZE_MEMORY_COMPRESSION_HINTS_EXT_VERSION_1_0:
    _ze_memory_compression_hints_ext_version_t = 65536;
pub const _ze_memory_compression_hints_ext_version_t_ZE_MEMORY_COMPRESSION_HINTS_EXT_VERSION_CURRENT : _ze_memory_compression_hints_ext_version_t = 65536 ;
pub const _ze_memory_compression_hints_ext_version_t_ZE_MEMORY_COMPRESSION_HINTS_EXT_VERSION_FORCE_UINT32 : _ze_memory_compression_hints_ext_version_t = 2147483647 ;
pub type _ze_memory_compression_hints_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_memory_compression_hints_ext_version_t as ze_memory_compression_hints_ext_version_t;
pub type ze_memory_compression_hints_ext_flags_t = u32;
pub const _ze_memory_compression_hints_ext_flag_t_ZE_MEMORY_COMPRESSION_HINTS_EXT_FLAG_COMPRESSED : _ze_memory_compression_hints_ext_flag_t = 1 ;
pub const _ze_memory_compression_hints_ext_flag_t_ZE_MEMORY_COMPRESSION_HINTS_EXT_FLAG_UNCOMPRESSED : _ze_memory_compression_hints_ext_flag_t = 2 ;
pub const _ze_memory_compression_hints_ext_flag_t_ZE_MEMORY_COMPRESSION_HINTS_EXT_FLAG_FORCE_UINT32 : _ze_memory_compression_hints_ext_flag_t = 2147483647 ;
pub type _ze_memory_compression_hints_ext_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_memory_compression_hints_ext_flag_t as ze_memory_compression_hints_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_memory_compression_hints_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: ze_memory_compression_hints_ext_flags_t,
}
#[test]
fn bindgen_test_layout__ze_memory_compression_hints_ext_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_memory_compression_hints_ext_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_memory_compression_hints_ext_desc_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_memory_compression_hints_ext_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_memory_compression_hints_ext_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_memory_compression_hints_ext_desc_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_compression_hints_ext_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_compression_hints_ext_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_compression_hints_ext_desc_t),
            "::",
            stringify!(flags)
        )
    );
}
pub const _ze_memory_free_policies_ext_version_t_ZE_MEMORY_FREE_POLICIES_EXT_VERSION_1_0:
    _ze_memory_free_policies_ext_version_t = 65536;
pub const _ze_memory_free_policies_ext_version_t_ZE_MEMORY_FREE_POLICIES_EXT_VERSION_CURRENT:
    _ze_memory_free_policies_ext_version_t = 65536;
pub const _ze_memory_free_policies_ext_version_t_ZE_MEMORY_FREE_POLICIES_EXT_VERSION_FORCE_UINT32 : _ze_memory_free_policies_ext_version_t = 2147483647 ;
pub type _ze_memory_free_policies_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_memory_free_policies_ext_version_t as ze_memory_free_policies_ext_version_t;
pub type ze_driver_memory_free_policy_ext_flags_t = u32;
pub const _ze_driver_memory_free_policy_ext_flag_t_ZE_DRIVER_MEMORY_FREE_POLICY_EXT_FLAG_BLOCKING_FREE : _ze_driver_memory_free_policy_ext_flag_t = 1 ;
pub const _ze_driver_memory_free_policy_ext_flag_t_ZE_DRIVER_MEMORY_FREE_POLICY_EXT_FLAG_DEFER_FREE : _ze_driver_memory_free_policy_ext_flag_t = 2 ;
pub const _ze_driver_memory_free_policy_ext_flag_t_ZE_DRIVER_MEMORY_FREE_POLICY_EXT_FLAG_FORCE_UINT32 : _ze_driver_memory_free_policy_ext_flag_t = 2147483647 ;
pub type _ze_driver_memory_free_policy_ext_flag_t = ::std::os::raw::c_uint;
pub use self::_ze_driver_memory_free_policy_ext_flag_t as ze_driver_memory_free_policy_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_memory_free_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub freePolicies: ze_driver_memory_free_policy_ext_flags_t,
}
#[test]
fn bindgen_test_layout__ze_driver_memory_free_ext_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_memory_free_ext_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_memory_free_ext_properties_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_driver_memory_free_ext_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_memory_free_ext_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_driver_memory_free_ext_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_memory_free_ext_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_memory_free_ext_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freePolicies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_memory_free_ext_properties_t),
            "::",
            stringify!(freePolicies)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_memory_free_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub freePolicy: ze_driver_memory_free_policy_ext_flags_t,
}
#[test]
fn bindgen_test_layout__ze_memory_free_ext_desc_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_memory_free_ext_desc_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_memory_free_ext_desc_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_memory_free_ext_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_memory_free_ext_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_memory_free_ext_desc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_free_ext_desc_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_free_ext_desc_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freePolicy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_free_ext_desc_t),
            "::",
            stringify!(freePolicy)
        )
    );
}
extern "C" {
    pub fn zeMemFreeExt(
        hContext: ze_context_handle_t,
        pMemFreeDesc: *const ze_memory_free_ext_desc_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_p2p_bandwidth_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub logicalBandwidth: u32,
    pub physicalBandwidth: u32,
    pub bandwidthUnit: ze_bandwidth_unit_t,
    pub logicalLatency: u32,
    pub physicalLatency: u32,
    pub latencyUnit: ze_latency_unit_t,
}
#[test]
fn bindgen_test_layout__ze_device_p2p_bandwidth_exp_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_p2p_bandwidth_exp_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_p2p_bandwidth_exp_properties_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_p2p_bandwidth_exp_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logicalBandwidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(logicalBandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalBandwidth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(physicalBandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bandwidthUnit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(bandwidthUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logicalLatency) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(logicalLatency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalLatency) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(physicalLatency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latencyUnit) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_p2p_bandwidth_exp_properties_t),
            "::",
            stringify!(latencyUnit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_copy_bandwidth_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub copyBandwidth: u32,
    pub copyBandwidthUnit: ze_bandwidth_unit_t,
}
#[test]
fn bindgen_test_layout__ze_copy_bandwidth_exp_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_copy_bandwidth_exp_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_copy_bandwidth_exp_properties_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_copy_bandwidth_exp_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_copy_bandwidth_exp_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_copy_bandwidth_exp_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_bandwidth_exp_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_bandwidth_exp_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyBandwidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_bandwidth_exp_properties_t),
            "::",
            stringify!(copyBandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyBandwidthUnit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_copy_bandwidth_exp_properties_t),
            "::",
            stringify!(copyBandwidthUnit)
        )
    );
}
pub const _ze_device_luid_ext_version_t_ZE_DEVICE_LUID_EXT_VERSION_1_0:
    _ze_device_luid_ext_version_t = 65536;
pub const _ze_device_luid_ext_version_t_ZE_DEVICE_LUID_EXT_VERSION_CURRENT:
    _ze_device_luid_ext_version_t = 65536;
pub const _ze_device_luid_ext_version_t_ZE_DEVICE_LUID_EXT_VERSION_FORCE_UINT32:
    _ze_device_luid_ext_version_t = 2147483647;
pub type _ze_device_luid_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_device_luid_ext_version_t as ze_device_luid_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_luid_ext_t {
    pub id: [u8; 8usize],
}
#[test]
fn bindgen_test_layout__ze_device_luid_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_luid_ext_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_luid_ext_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_device_luid_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_luid_ext_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_ze_device_luid_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_luid_ext_t),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_luid_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub luid: ze_device_luid_ext_t,
    pub nodeMask: u32,
}
#[test]
fn bindgen_test_layout__ze_device_luid_ext_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_luid_ext_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_luid_ext_properties_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_device_luid_ext_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_luid_ext_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_luid_ext_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_luid_ext_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_luid_ext_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_luid_ext_properties_t),
            "::",
            stringify!(luid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_luid_ext_properties_t),
            "::",
            stringify!(nodeMask)
        )
    );
}
pub const _ze_fabric_vertex_exp_type_t_ZE_FABRIC_VERTEX_EXP_TYPE_UNKNOWN:
    _ze_fabric_vertex_exp_type_t = 0;
pub const _ze_fabric_vertex_exp_type_t_ZE_FABRIC_VERTEX_EXP_TYPE_DEVICE:
    _ze_fabric_vertex_exp_type_t = 1;
pub const _ze_fabric_vertex_exp_type_t_ZE_FABRIC_VERTEX_EXP_TYPE_SUBDEVICE:
    _ze_fabric_vertex_exp_type_t = 2;
pub const _ze_fabric_vertex_exp_type_t_ZE_FABRIC_VERTEX_EXP_TYPE_SWITCH:
    _ze_fabric_vertex_exp_type_t = 3;
pub const _ze_fabric_vertex_exp_type_t_ZE_FABRIC_VERTEX_EXP_TYPE_FORCE_UINT32:
    _ze_fabric_vertex_exp_type_t = 2147483647;
pub type _ze_fabric_vertex_exp_type_t = ::std::os::raw::c_uint;
pub use self::_ze_fabric_vertex_exp_type_t as ze_fabric_vertex_exp_type_t;
pub const _ze_fabric_edge_exp_duplexity_t_ZE_FABRIC_EDGE_EXP_DUPLEXITY_UNKNOWN:
    _ze_fabric_edge_exp_duplexity_t = 0;
pub const _ze_fabric_edge_exp_duplexity_t_ZE_FABRIC_EDGE_EXP_DUPLEXITY_HALF_DUPLEX:
    _ze_fabric_edge_exp_duplexity_t = 1;
pub const _ze_fabric_edge_exp_duplexity_t_ZE_FABRIC_EDGE_EXP_DUPLEXITY_FULL_DUPLEX:
    _ze_fabric_edge_exp_duplexity_t = 2;
pub const _ze_fabric_edge_exp_duplexity_t_ZE_FABRIC_EDGE_EXP_DUPLEXITY_FORCE_UINT32:
    _ze_fabric_edge_exp_duplexity_t = 2147483647;
pub type _ze_fabric_edge_exp_duplexity_t = ::std::os::raw::c_uint;
pub use self::_ze_fabric_edge_exp_duplexity_t as ze_fabric_edge_exp_duplexity_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fabric_vertex_pci_exp_address_t {
    pub domain: u32,
    pub bus: u32,
    pub device: u32,
    pub function: u32,
}
#[test]
fn bindgen_test_layout__ze_fabric_vertex_pci_exp_address_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fabric_vertex_pci_exp_address_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fabric_vertex_pci_exp_address_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_fabric_vertex_pci_exp_address_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fabric_vertex_pci_exp_address_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_fabric_vertex_pci_exp_address_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_pci_exp_address_t),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_pci_exp_address_t),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_pci_exp_address_t),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_pci_exp_address_t),
            "::",
            stringify!(function)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fabric_vertex_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub uuid: ze_uuid_t,
    pub type_: ze_fabric_vertex_exp_type_t,
    pub remote: ze_bool_t,
    pub address: ze_fabric_vertex_pci_exp_address_t,
}
#[test]
fn bindgen_test_layout__ze_fabric_vertex_exp_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fabric_vertex_exp_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fabric_vertex_exp_properties_t>(),
        56usize,
        concat!("Size of: ", stringify!(_ze_fabric_vertex_exp_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fabric_vertex_exp_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_fabric_vertex_exp_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_exp_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_exp_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_exp_properties_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_exp_properties_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_exp_properties_t),
            "::",
            stringify!(remote)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_vertex_exp_properties_t),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fabric_edge_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub uuid: ze_uuid_t,
    pub model: [::std::os::raw::c_char; 256usize],
    pub bandwidth: u32,
    pub bandwidthUnit: ze_bandwidth_unit_t,
    pub latency: u32,
    pub latencyUnit: ze_latency_unit_t,
    pub duplexity: ze_fabric_edge_exp_duplexity_t,
}
#[test]
fn bindgen_test_layout__ze_fabric_edge_exp_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fabric_edge_exp_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fabric_edge_exp_properties_t>(),
        312usize,
        concat!("Size of: ", stringify!(_ze_fabric_edge_exp_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fabric_edge_exp_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_fabric_edge_exp_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bandwidth) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(bandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bandwidthUnit) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(bandwidthUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latency) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latencyUnit) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(latencyUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duplexity) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fabric_edge_exp_properties_t),
            "::",
            stringify!(duplexity)
        )
    );
}
extern "C" {
    pub fn zeFabricVertexGetExp(
        hDriver: ze_driver_handle_t,
        pCount: *mut u32,
        phVertices: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeFabricVertexGetSubVerticesExp(
        hVertex: ze_fabric_vertex_handle_t,
        pCount: *mut u32,
        phSubvertices: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeFabricVertexGetPropertiesExp(
        hVertex: ze_fabric_vertex_handle_t,
        pVertexProperties: *mut ze_fabric_vertex_exp_properties_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeFabricVertexGetDeviceExp(
        hVertex: ze_fabric_vertex_handle_t,
        phDevice: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeDeviceGetFabricVertexExp(
        hDevice: ze_device_handle_t,
        phVertex: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeFabricEdgeGetExp(
        hVertexA: ze_fabric_vertex_handle_t,
        hVertexB: ze_fabric_vertex_handle_t,
        pCount: *mut u32,
        phEdges: *mut ze_fabric_edge_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeFabricEdgeGetVerticesExp(
        hEdge: ze_fabric_edge_handle_t,
        phVertexA: *mut ze_fabric_vertex_handle_t,
        phVertexB: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
extern "C" {
    pub fn zeFabricEdgeGetPropertiesExp(
        hEdge: ze_fabric_edge_handle_t,
        pEdgeProperties: *mut ze_fabric_edge_exp_properties_t,
    ) -> ze_result_t;
}
pub const _ze_device_memory_properties_ext_version_t_ZE_DEVICE_MEMORY_PROPERTIES_EXT_VERSION_1_0:
    _ze_device_memory_properties_ext_version_t = 65536;
pub const _ze_device_memory_properties_ext_version_t_ZE_DEVICE_MEMORY_PROPERTIES_EXT_VERSION_CURRENT : _ze_device_memory_properties_ext_version_t = 65536 ;
pub const _ze_device_memory_properties_ext_version_t_ZE_DEVICE_MEMORY_PROPERTIES_EXT_VERSION_FORCE_UINT32 : _ze_device_memory_properties_ext_version_t = 2147483647 ;
pub type _ze_device_memory_properties_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_device_memory_properties_ext_version_t as ze_device_memory_properties_ext_version_t;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_HBM: _ze_device_memory_ext_type_t =
    0;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_HBM2:
    _ze_device_memory_ext_type_t = 1;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_DDR: _ze_device_memory_ext_type_t =
    2;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_DDR2:
    _ze_device_memory_ext_type_t = 3;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_DDR3:
    _ze_device_memory_ext_type_t = 4;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_DDR4:
    _ze_device_memory_ext_type_t = 5;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_DDR5:
    _ze_device_memory_ext_type_t = 6;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR:
    _ze_device_memory_ext_type_t = 7;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR3:
    _ze_device_memory_ext_type_t = 8;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR4:
    _ze_device_memory_ext_type_t = 9;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR5:
    _ze_device_memory_ext_type_t = 10;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_SRAM:
    _ze_device_memory_ext_type_t = 11;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_L1: _ze_device_memory_ext_type_t =
    12;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_L3: _ze_device_memory_ext_type_t =
    13;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_GRF: _ze_device_memory_ext_type_t =
    14;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_SLM: _ze_device_memory_ext_type_t =
    15;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_GDDR4:
    _ze_device_memory_ext_type_t = 16;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_GDDR5:
    _ze_device_memory_ext_type_t = 17;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_GDDR5X:
    _ze_device_memory_ext_type_t = 18;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_GDDR6:
    _ze_device_memory_ext_type_t = 19;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_GDDR6X:
    _ze_device_memory_ext_type_t = 20;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_GDDR7:
    _ze_device_memory_ext_type_t = 21;
pub const _ze_device_memory_ext_type_t_ZE_DEVICE_MEMORY_EXT_TYPE_FORCE_UINT32:
    _ze_device_memory_ext_type_t = 2147483647;
pub type _ze_device_memory_ext_type_t = ::std::os::raw::c_uint;
pub use self::_ze_device_memory_ext_type_t as ze_device_memory_ext_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_memory_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub type_: ze_device_memory_ext_type_t,
    pub physicalSize: u64,
    pub readBandwidth: u32,
    pub writeBandwidth: u32,
    pub bandwidthUnit: ze_bandwidth_unit_t,
}
#[test]
fn bindgen_test_layout__ze_device_memory_ext_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_memory_ext_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_memory_ext_properties_t>(),
        48usize,
        concat!("Size of: ", stringify!(_ze_device_memory_ext_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_memory_ext_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_memory_ext_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_ext_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_ext_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_ext_properties_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_ext_properties_t),
            "::",
            stringify!(physicalSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readBandwidth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_ext_properties_t),
            "::",
            stringify!(readBandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeBandwidth) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_ext_properties_t),
            "::",
            stringify!(writeBandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bandwidthUnit) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_memory_ext_properties_t),
            "::",
            stringify!(bandwidthUnit)
        )
    );
}
pub const _ze_bfloat16_conversions_ext_version_t_ZE_BFLOAT16_CONVERSIONS_EXT_VERSION_1_0:
    _ze_bfloat16_conversions_ext_version_t = 65536;
pub const _ze_bfloat16_conversions_ext_version_t_ZE_BFLOAT16_CONVERSIONS_EXT_VERSION_CURRENT:
    _ze_bfloat16_conversions_ext_version_t = 65536;
pub const _ze_bfloat16_conversions_ext_version_t_ZE_BFLOAT16_CONVERSIONS_EXT_VERSION_FORCE_UINT32 : _ze_bfloat16_conversions_ext_version_t = 2147483647 ;
pub type _ze_bfloat16_conversions_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_bfloat16_conversions_ext_version_t as ze_bfloat16_conversions_ext_version_t;
pub const _ze_device_ip_version_version_t_ZE_DEVICE_IP_VERSION_VERSION_1_0:
    _ze_device_ip_version_version_t = 65536;
pub const _ze_device_ip_version_version_t_ZE_DEVICE_IP_VERSION_VERSION_CURRENT:
    _ze_device_ip_version_version_t = 65536;
pub const _ze_device_ip_version_version_t_ZE_DEVICE_IP_VERSION_VERSION_FORCE_UINT32:
    _ze_device_ip_version_version_t = 2147483647;
pub type _ze_device_ip_version_version_t = ::std::os::raw::c_uint;
pub use self::_ze_device_ip_version_version_t as ze_device_ip_version_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_ip_version_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::std::os::raw::c_void,
    pub ipVersion: u32,
}
#[test]
fn bindgen_test_layout__ze_device_ip_version_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_ip_version_ext_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_ip_version_ext_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_device_ip_version_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_ip_version_ext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_ip_version_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_ip_version_ext_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_ip_version_ext_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_ip_version_ext_t),
            "::",
            stringify!(ipVersion)
        )
    );
}
pub const _ze_kernel_max_group_size_properties_ext_version_t_ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_VERSION_1_0 : _ze_kernel_max_group_size_properties_ext_version_t = 65536 ;
pub const _ze_kernel_max_group_size_properties_ext_version_t_ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_VERSION_CURRENT : _ze_kernel_max_group_size_properties_ext_version_t = 65536 ;
pub const _ze_kernel_max_group_size_properties_ext_version_t_ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_VERSION_FORCE_UINT32 : _ze_kernel_max_group_size_properties_ext_version_t = 2147483647 ;
pub type _ze_kernel_max_group_size_properties_ext_version_t = ::std::os::raw::c_uint;
pub use self::_ze_kernel_max_group_size_properties_ext_version_t as ze_kernel_max_group_size_properties_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_max_group_size_properties_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxGroupSize: u32,
}
#[test]
fn bindgen_test_layout__ze_kernel_max_group_size_properties_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_max_group_size_properties_ext_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_max_group_size_properties_ext_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_max_group_size_properties_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_max_group_size_properties_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_max_group_size_properties_ext_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_max_group_size_properties_ext_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_max_group_size_properties_ext_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGroupSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_max_group_size_properties_ext_t),
            "::",
            stringify!(maxGroupSize)
        )
    );
}
pub const _ze_sub_allocations_exp_version_t_ZE_SUB_ALLOCATIONS_EXP_VERSION_1_0:
    _ze_sub_allocations_exp_version_t = 65536;
pub const _ze_sub_allocations_exp_version_t_ZE_SUB_ALLOCATIONS_EXP_VERSION_CURRENT:
    _ze_sub_allocations_exp_version_t = 65536;
pub const _ze_sub_allocations_exp_version_t_ZE_SUB_ALLOCATIONS_EXP_VERSION_FORCE_UINT32:
    _ze_sub_allocations_exp_version_t = 2147483647;
pub type _ze_sub_allocations_exp_version_t = ::std::os::raw::c_uint;
pub use self::_ze_sub_allocations_exp_version_t as ze_sub_allocations_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_sub_allocation_t {
    pub base: *mut ::std::os::raw::c_void,
    pub size: usize,
}
#[test]
fn bindgen_test_layout__ze_sub_allocation_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_sub_allocation_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_sub_allocation_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_sub_allocation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_sub_allocation_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_sub_allocation_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sub_allocation_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sub_allocation_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_memory_sub_allocations_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pCount: *mut u32,
    pub pSubAllocations: *mut ze_sub_allocation_t,
}
#[test]
fn bindgen_test_layout__ze_memory_sub_allocations_exp_properties_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_memory_sub_allocations_exp_properties_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_memory_sub_allocations_exp_properties_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_memory_sub_allocations_exp_properties_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_memory_sub_allocations_exp_properties_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_memory_sub_allocations_exp_properties_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_sub_allocations_exp_properties_t),
            "::",
            stringify!(stype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_sub_allocations_exp_properties_t),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_sub_allocations_exp_properties_t),
            "::",
            stringify!(pCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSubAllocations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_memory_sub_allocations_exp_properties_t),
            "::",
            stringify!(pSubAllocations)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_init_params_t {
    pub pflags: *mut ze_init_flags_t,
}
#[test]
fn bindgen_test_layout__ze_init_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_init_params_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_init_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_init_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_init_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_init_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pflags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_init_params_t),
            "::",
            stringify!(pflags)
        )
    );
}
pub type ze_init_params_t = _ze_init_params_t;
pub type ze_pfnInitCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_init_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_global_callbacks_t {
    pub pfnInitCb: ze_pfnInitCb_t,
}
#[test]
fn bindgen_test_layout__ze_global_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_global_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_global_callbacks_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_global_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_global_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_global_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnInitCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_global_callbacks_t),
            "::",
            stringify!(pfnInitCb)
        )
    );
}
pub type ze_global_callbacks_t = _ze_global_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_get_params_t {
    pub ppCount: *mut *mut u32,
    pub pphDrivers: *mut *mut ze_driver_handle_t,
}
#[test]
fn bindgen_test_layout__ze_driver_get_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_get_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_get_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_driver_get_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_get_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_driver_get_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphDrivers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_params_t),
            "::",
            stringify!(pphDrivers)
        )
    );
}
pub type ze_driver_get_params_t = _ze_driver_get_params_t;
pub type ze_pfnDriverGetCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_driver_get_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_get_api_version_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub pversion: *mut *mut ze_api_version_t,
}
#[test]
fn bindgen_test_layout__ze_driver_get_api_version_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_get_api_version_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_get_api_version_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_driver_get_api_version_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_get_api_version_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_driver_get_api_version_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDriver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_api_version_params_t),
            "::",
            stringify!(phDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pversion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_api_version_params_t),
            "::",
            stringify!(pversion)
        )
    );
}
pub type ze_driver_get_api_version_params_t = _ze_driver_get_api_version_params_t;
pub type ze_pfnDriverGetApiVersionCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_driver_get_api_version_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_get_properties_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppDriverProperties: *mut *mut ze_driver_properties_t,
}
#[test]
fn bindgen_test_layout__ze_driver_get_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_get_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_get_properties_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_driver_get_properties_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_get_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_driver_get_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDriver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_properties_params_t),
            "::",
            stringify!(phDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppDriverProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_properties_params_t),
            "::",
            stringify!(ppDriverProperties)
        )
    );
}
pub type ze_driver_get_properties_params_t = _ze_driver_get_properties_params_t;
pub type ze_pfnDriverGetPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_driver_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_get_ipc_properties_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppIpcProperties: *mut *mut ze_driver_ipc_properties_t,
}
#[test]
fn bindgen_test_layout__ze_driver_get_ipc_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_get_ipc_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_get_ipc_properties_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_driver_get_ipc_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_get_ipc_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_driver_get_ipc_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDriver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_ipc_properties_params_t),
            "::",
            stringify!(phDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppIpcProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_ipc_properties_params_t),
            "::",
            stringify!(ppIpcProperties)
        )
    );
}
pub type ze_driver_get_ipc_properties_params_t = _ze_driver_get_ipc_properties_params_t;
pub type ze_pfnDriverGetIpcPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_driver_get_ipc_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_get_extension_properties_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppExtensionProperties: *mut *mut ze_driver_extension_properties_t,
}
#[test]
fn bindgen_test_layout__ze_driver_get_extension_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_get_extension_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_get_extension_properties_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_driver_get_extension_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_get_extension_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_driver_get_extension_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDriver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_extension_properties_params_t),
            "::",
            stringify!(phDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_extension_properties_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppExtensionProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_get_extension_properties_params_t),
            "::",
            stringify!(ppExtensionProperties)
        )
    );
}
pub type ze_driver_get_extension_properties_params_t = _ze_driver_get_extension_properties_params_t;
pub type ze_pfnDriverGetExtensionPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_driver_get_extension_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_callbacks_t {
    pub pfnGetCb: ze_pfnDriverGetCb_t,
    pub pfnGetApiVersionCb: ze_pfnDriverGetApiVersionCb_t,
    pub pfnGetPropertiesCb: ze_pfnDriverGetPropertiesCb_t,
    pub pfnGetIpcPropertiesCb: ze_pfnDriverGetIpcPropertiesCb_t,
    pub pfnGetExtensionPropertiesCb: ze_pfnDriverGetExtensionPropertiesCb_t,
}
#[test]
fn bindgen_test_layout__ze_driver_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_driver_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_driver_callbacks_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_driver_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_driver_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_driver_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_callbacks_t),
            "::",
            stringify!(pfnGetCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetApiVersionCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_callbacks_t),
            "::",
            stringify!(pfnGetApiVersionCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetPropertiesCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_callbacks_t),
            "::",
            stringify!(pfnGetPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetIpcPropertiesCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_callbacks_t),
            "::",
            stringify!(pfnGetIpcPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetExtensionPropertiesCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_driver_callbacks_t),
            "::",
            stringify!(pfnGetExtensionPropertiesCb)
        )
    );
}
pub type ze_driver_callbacks_t = _ze_driver_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppCount: *mut *mut u32,
    pub pphDevices: *mut *mut ze_device_handle_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_device_get_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_get_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDriver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_params_t),
            "::",
            stringify!(phDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphDevices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_params_t),
            "::",
            stringify!(pphDevices)
        )
    );
}
pub type ze_device_get_params_t = _ze_device_get_params_t;
pub type ze_pfnDeviceGetCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_sub_devices_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub pphSubdevices: *mut *mut ze_device_handle_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_sub_devices_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_sub_devices_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_sub_devices_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_device_get_sub_devices_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_sub_devices_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_sub_devices_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_sub_devices_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_sub_devices_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphSubdevices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_sub_devices_params_t),
            "::",
            stringify!(pphSubdevices)
        )
    );
}
pub type ze_device_get_sub_devices_params_t = _ze_device_get_sub_devices_params_t;
pub type ze_pfnDeviceGetSubDevicesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_sub_devices_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppDeviceProperties: *mut *mut ze_device_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_properties_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_device_get_properties_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppDeviceProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_properties_params_t),
            "::",
            stringify!(ppDeviceProperties)
        )
    );
}
pub type ze_device_get_properties_params_t = _ze_device_get_properties_params_t;
pub type ze_pfnDeviceGetPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_compute_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppComputeProperties: *mut *mut ze_device_compute_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_compute_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_compute_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_compute_properties_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_compute_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_compute_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_compute_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_compute_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppComputeProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_compute_properties_params_t),
            "::",
            stringify!(ppComputeProperties)
        )
    );
}
pub type ze_device_get_compute_properties_params_t = _ze_device_get_compute_properties_params_t;
pub type ze_pfnDeviceGetComputePropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_compute_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_module_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppModuleProperties: *mut *mut ze_device_module_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_module_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_module_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_module_properties_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_module_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_module_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_module_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_module_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppModuleProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_module_properties_params_t),
            "::",
            stringify!(ppModuleProperties)
        )
    );
}
pub type ze_device_get_module_properties_params_t = _ze_device_get_module_properties_params_t;
pub type ze_pfnDeviceGetModulePropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_module_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_command_queue_group_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppCommandQueueGroupProperties: *mut *mut ze_command_queue_group_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_command_queue_group_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_command_queue_group_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_command_queue_group_properties_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_command_queue_group_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_command_queue_group_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_command_queue_group_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_command_queue_group_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_command_queue_group_properties_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ppCommandQueueGroupProperties) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_command_queue_group_properties_params_t),
            "::",
            stringify!(ppCommandQueueGroupProperties)
        )
    );
}
pub type ze_device_get_command_queue_group_properties_params_t =
    _ze_device_get_command_queue_group_properties_params_t;
pub type ze_pfnDeviceGetCommandQueueGroupPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_command_queue_group_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_memory_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppMemProperties: *mut *mut ze_device_memory_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_memory_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_memory_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_memory_properties_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_memory_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_memory_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_memory_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_memory_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_memory_properties_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppMemProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_memory_properties_params_t),
            "::",
            stringify!(ppMemProperties)
        )
    );
}
pub type ze_device_get_memory_properties_params_t = _ze_device_get_memory_properties_params_t;
pub type ze_pfnDeviceGetMemoryPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_memory_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_memory_access_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppMemAccessProperties: *mut *mut ze_device_memory_access_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_memory_access_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_memory_access_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_memory_access_properties_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_memory_access_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_memory_access_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_memory_access_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_memory_access_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppMemAccessProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_memory_access_properties_params_t),
            "::",
            stringify!(ppMemAccessProperties)
        )
    );
}
pub type ze_device_get_memory_access_properties_params_t =
    _ze_device_get_memory_access_properties_params_t;
pub type ze_pfnDeviceGetMemoryAccessPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_memory_access_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_cache_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppCacheProperties: *mut *mut ze_device_cache_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_cache_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_cache_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_cache_properties_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_cache_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_cache_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_cache_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_cache_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_cache_properties_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCacheProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_cache_properties_params_t),
            "::",
            stringify!(ppCacheProperties)
        )
    );
}
pub type ze_device_get_cache_properties_params_t = _ze_device_get_cache_properties_params_t;
pub type ze_pfnDeviceGetCachePropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_cache_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_image_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppImageProperties: *mut *mut ze_device_image_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_image_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_image_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_image_properties_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_image_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_image_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_image_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_image_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppImageProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_image_properties_params_t),
            "::",
            stringify!(ppImageProperties)
        )
    );
}
pub type ze_device_get_image_properties_params_t = _ze_device_get_image_properties_params_t;
pub type ze_pfnDeviceGetImagePropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_image_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_external_memory_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppExternalMemoryProperties: *mut *mut ze_device_external_memory_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_external_memory_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_external_memory_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_external_memory_properties_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_external_memory_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_external_memory_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_external_memory_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_external_memory_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppExternalMemoryProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_external_memory_properties_params_t),
            "::",
            stringify!(ppExternalMemoryProperties)
        )
    );
}
pub type ze_device_get_external_memory_properties_params_t =
    _ze_device_get_external_memory_properties_params_t;
pub type ze_pfnDeviceGetExternalMemoryPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_external_memory_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_p2_p_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub phPeerDevice: *mut ze_device_handle_t,
    pub ppP2PProperties: *mut *mut ze_device_p2p_properties_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_p2_p_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_p2_p_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_p2_p_properties_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_device_get_p2_p_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_p2_p_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_get_p2_p_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_p2_p_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phPeerDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_p2_p_properties_params_t),
            "::",
            stringify!(phPeerDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppP2PProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_p2_p_properties_params_t),
            "::",
            stringify!(ppP2PProperties)
        )
    );
}
pub type ze_device_get_p2_p_properties_params_t = _ze_device_get_p2_p_properties_params_t;
pub type ze_pfnDeviceGetP2PPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_p2_p_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_can_access_peer_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub phPeerDevice: *mut ze_device_handle_t,
    pub pvalue: *mut *mut ze_bool_t,
}
#[test]
fn bindgen_test_layout__ze_device_can_access_peer_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_can_access_peer_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_can_access_peer_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_device_can_access_peer_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_can_access_peer_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_device_can_access_peer_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_can_access_peer_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phPeerDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_can_access_peer_params_t),
            "::",
            stringify!(phPeerDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pvalue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_can_access_peer_params_t),
            "::",
            stringify!(pvalue)
        )
    );
}
pub type ze_device_can_access_peer_params_t = _ze_device_can_access_peer_params_t;
pub type ze_pfnDeviceCanAccessPeerCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_can_access_peer_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_get_status_params_t {
    pub phDevice: *mut ze_device_handle_t,
}
#[test]
fn bindgen_test_layout__ze_device_get_status_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_get_status_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_get_status_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_device_get_status_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_get_status_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_get_status_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_get_status_params_t),
            "::",
            stringify!(phDevice)
        )
    );
}
pub type ze_device_get_status_params_t = _ze_device_get_status_params_t;
pub type ze_pfnDeviceGetStatusCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_device_get_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_callbacks_t {
    pub pfnGetCb: ze_pfnDeviceGetCb_t,
    pub pfnGetSubDevicesCb: ze_pfnDeviceGetSubDevicesCb_t,
    pub pfnGetPropertiesCb: ze_pfnDeviceGetPropertiesCb_t,
    pub pfnGetComputePropertiesCb: ze_pfnDeviceGetComputePropertiesCb_t,
    pub pfnGetModulePropertiesCb: ze_pfnDeviceGetModulePropertiesCb_t,
    pub pfnGetCommandQueueGroupPropertiesCb: ze_pfnDeviceGetCommandQueueGroupPropertiesCb_t,
    pub pfnGetMemoryPropertiesCb: ze_pfnDeviceGetMemoryPropertiesCb_t,
    pub pfnGetMemoryAccessPropertiesCb: ze_pfnDeviceGetMemoryAccessPropertiesCb_t,
    pub pfnGetCachePropertiesCb: ze_pfnDeviceGetCachePropertiesCb_t,
    pub pfnGetImagePropertiesCb: ze_pfnDeviceGetImagePropertiesCb_t,
    pub pfnGetExternalMemoryPropertiesCb: ze_pfnDeviceGetExternalMemoryPropertiesCb_t,
    pub pfnGetP2PPropertiesCb: ze_pfnDeviceGetP2PPropertiesCb_t,
    pub pfnCanAccessPeerCb: ze_pfnDeviceCanAccessPeerCb_t,
    pub pfnGetStatusCb: ze_pfnDeviceGetStatusCb_t,
}
#[test]
fn bindgen_test_layout__ze_device_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_device_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_device_callbacks_t>(),
        112usize,
        concat!("Size of: ", stringify!(_ze_device_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_device_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_device_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetSubDevicesCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetSubDevicesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetPropertiesCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetComputePropertiesCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetComputePropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetModulePropertiesCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetModulePropertiesCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnGetCommandQueueGroupPropertiesCb) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetCommandQueueGroupPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetMemoryPropertiesCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetMemoryPropertiesCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnGetMemoryAccessPropertiesCb) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetMemoryAccessPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetCachePropertiesCb) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetCachePropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetImagePropertiesCb) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetImagePropertiesCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnGetExternalMemoryPropertiesCb) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetExternalMemoryPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetP2PPropertiesCb) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetP2PPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCanAccessPeerCb) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnCanAccessPeerCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetStatusCb) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_device_callbacks_t),
            "::",
            stringify!(pfnGetStatusCb)
        )
    );
}
pub type ze_device_callbacks_t = _ze_device_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_create_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub pdesc: *mut *const ze_context_desc_t,
    pub pphContext: *mut *mut ze_context_handle_t,
}
#[test]
fn bindgen_test_layout__ze_context_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_create_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_context_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_context_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDriver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_create_params_t),
            "::",
            stringify!(phDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphContext) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_create_params_t),
            "::",
            stringify!(pphContext)
        )
    );
}
pub type ze_context_create_params_t = _ze_context_create_params_t;
pub type ze_pfnContextCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_destroy_params_t {
    pub phContext: *mut ze_context_handle_t,
}
#[test]
fn bindgen_test_layout__ze_context_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_context_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_context_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_destroy_params_t),
            "::",
            stringify!(phContext)
        )
    );
}
pub type ze_context_destroy_params_t = _ze_context_destroy_params_t;
pub type ze_pfnContextDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_get_status_params_t {
    pub phContext: *mut ze_context_handle_t,
}
#[test]
fn bindgen_test_layout__ze_context_get_status_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_get_status_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_get_status_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_context_get_status_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_get_status_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_context_get_status_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_get_status_params_t),
            "::",
            stringify!(phContext)
        )
    );
}
pub type ze_context_get_status_params_t = _ze_context_get_status_params_t;
pub type ze_pfnContextGetStatusCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_get_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_system_barrier_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
}
#[test]
fn bindgen_test_layout__ze_context_system_barrier_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_system_barrier_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_system_barrier_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_context_system_barrier_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_system_barrier_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_context_system_barrier_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_system_barrier_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_system_barrier_params_t),
            "::",
            stringify!(phDevice)
        )
    );
}
pub type ze_context_system_barrier_params_t = _ze_context_system_barrier_params_t;
pub type ze_pfnContextSystemBarrierCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_system_barrier_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_make_memory_resident_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pptr: *mut *mut ::std::os::raw::c_void,
    pub psize: *mut usize,
}
#[test]
fn bindgen_test_layout__ze_context_make_memory_resident_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_make_memory_resident_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_make_memory_resident_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_context_make_memory_resident_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_make_memory_resident_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_context_make_memory_resident_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_make_memory_resident_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_make_memory_resident_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_make_memory_resident_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_make_memory_resident_params_t),
            "::",
            stringify!(psize)
        )
    );
}
pub type ze_context_make_memory_resident_params_t = _ze_context_make_memory_resident_params_t;
pub type ze_pfnContextMakeMemoryResidentCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_make_memory_resident_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_evict_memory_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pptr: *mut *mut ::std::os::raw::c_void,
    pub psize: *mut usize,
}
#[test]
fn bindgen_test_layout__ze_context_evict_memory_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_evict_memory_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_evict_memory_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_context_evict_memory_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_evict_memory_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_context_evict_memory_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_evict_memory_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_evict_memory_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_evict_memory_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_evict_memory_params_t),
            "::",
            stringify!(psize)
        )
    );
}
pub type ze_context_evict_memory_params_t = _ze_context_evict_memory_params_t;
pub type ze_pfnContextEvictMemoryCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_evict_memory_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_make_image_resident_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub phImage: *mut ze_image_handle_t,
}
#[test]
fn bindgen_test_layout__ze_context_make_image_resident_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_make_image_resident_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_make_image_resident_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_context_make_image_resident_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_make_image_resident_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_context_make_image_resident_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_make_image_resident_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_make_image_resident_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_make_image_resident_params_t),
            "::",
            stringify!(phImage)
        )
    );
}
pub type ze_context_make_image_resident_params_t = _ze_context_make_image_resident_params_t;
pub type ze_pfnContextMakeImageResidentCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_make_image_resident_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_evict_image_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub phImage: *mut ze_image_handle_t,
}
#[test]
fn bindgen_test_layout__ze_context_evict_image_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_evict_image_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_evict_image_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_context_evict_image_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_evict_image_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_context_evict_image_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_evict_image_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_evict_image_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_evict_image_params_t),
            "::",
            stringify!(phImage)
        )
    );
}
pub type ze_context_evict_image_params_t = _ze_context_evict_image_params_t;
pub type ze_pfnContextEvictImageCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_context_evict_image_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_callbacks_t {
    pub pfnCreateCb: ze_pfnContextCreateCb_t,
    pub pfnDestroyCb: ze_pfnContextDestroyCb_t,
    pub pfnGetStatusCb: ze_pfnContextGetStatusCb_t,
    pub pfnSystemBarrierCb: ze_pfnContextSystemBarrierCb_t,
    pub pfnMakeMemoryResidentCb: ze_pfnContextMakeMemoryResidentCb_t,
    pub pfnEvictMemoryCb: ze_pfnContextEvictMemoryCb_t,
    pub pfnMakeImageResidentCb: ze_pfnContextMakeImageResidentCb_t,
    pub pfnEvictImageCb: ze_pfnContextEvictImageCb_t,
}
#[test]
fn bindgen_test_layout__ze_context_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_context_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_context_callbacks_t>(),
        64usize,
        concat!("Size of: ", stringify!(_ze_context_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_context_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_context_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetStatusCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnGetStatusCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSystemBarrierCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnSystemBarrierCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnMakeMemoryResidentCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnMakeMemoryResidentCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnEvictMemoryCb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnEvictMemoryCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnMakeImageResidentCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnMakeImageResidentCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnEvictImageCb) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_context_callbacks_t),
            "::",
            stringify!(pfnEvictImageCb)
        )
    );
}
pub type ze_context_callbacks_t = _ze_context_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_command_queue_desc_t,
    pub pphCommandQueue: *mut *mut ze_command_queue_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_queue_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_queue_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_queue_create_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_command_queue_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_queue_create_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_queue_create_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_create_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_create_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphCommandQueue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_create_params_t),
            "::",
            stringify!(pphCommandQueue)
        )
    );
}
pub type ze_command_queue_create_params_t = _ze_command_queue_create_params_t;
pub type ze_pfnCommandQueueCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_queue_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_destroy_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_queue_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_queue_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_queue_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_command_queue_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_queue_destroy_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_queue_destroy_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandQueue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_destroy_params_t),
            "::",
            stringify!(phCommandQueue)
        )
    );
}
pub type ze_command_queue_destroy_params_t = _ze_command_queue_destroy_params_t;
pub type ze_pfnCommandQueueDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_queue_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_execute_command_lists_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
    pub pnumCommandLists: *mut u32,
    pub pphCommandLists: *mut *mut ze_command_list_handle_t,
    pub phFence: *mut ze_fence_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_queue_execute_command_lists_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_queue_execute_command_lists_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_queue_execute_command_lists_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_queue_execute_command_lists_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_queue_execute_command_lists_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_queue_execute_command_lists_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandQueue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_execute_command_lists_params_t),
            "::",
            stringify!(phCommandQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumCommandLists) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_execute_command_lists_params_t),
            "::",
            stringify!(pnumCommandLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphCommandLists) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_execute_command_lists_params_t),
            "::",
            stringify!(pphCommandLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phFence) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_execute_command_lists_params_t),
            "::",
            stringify!(phFence)
        )
    );
}
pub type ze_command_queue_execute_command_lists_params_t =
    _ze_command_queue_execute_command_lists_params_t;
pub type ze_pfnCommandQueueExecuteCommandListsCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_queue_execute_command_lists_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_synchronize_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
    pub ptimeout: *mut u64,
}
#[test]
fn bindgen_test_layout__ze_command_queue_synchronize_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_queue_synchronize_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_queue_synchronize_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_queue_synchronize_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_queue_synchronize_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_queue_synchronize_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandQueue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_synchronize_params_t),
            "::",
            stringify!(phCommandQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptimeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_synchronize_params_t),
            "::",
            stringify!(ptimeout)
        )
    );
}
pub type ze_command_queue_synchronize_params_t = _ze_command_queue_synchronize_params_t;
pub type ze_pfnCommandQueueSynchronizeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_queue_synchronize_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_callbacks_t {
    pub pfnCreateCb: ze_pfnCommandQueueCreateCb_t,
    pub pfnDestroyCb: ze_pfnCommandQueueDestroyCb_t,
    pub pfnExecuteCommandListsCb: ze_pfnCommandQueueExecuteCommandListsCb_t,
    pub pfnSynchronizeCb: ze_pfnCommandQueueSynchronizeCb_t,
}
#[test]
fn bindgen_test_layout__ze_command_queue_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_queue_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_queue_callbacks_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_command_queue_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_queue_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_command_queue_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnExecuteCommandListsCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_callbacks_t),
            "::",
            stringify!(pfnExecuteCommandListsCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSynchronizeCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_queue_callbacks_t),
            "::",
            stringify!(pfnSynchronizeCb)
        )
    );
}
pub type ze_command_queue_callbacks_t = _ze_command_queue_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_command_list_desc_t,
    pub pphCommandList: *mut *mut ze_command_list_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_create_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_command_list_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_create_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_create_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphCommandList) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_params_t),
            "::",
            stringify!(pphCommandList)
        )
    );
}
pub type ze_command_list_create_params_t = _ze_command_list_create_params_t;
pub type ze_pfnCommandListCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_create_immediate_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub paltdesc: *mut *const ze_command_queue_desc_t,
    pub pphCommandList: *mut *mut ze_command_list_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_create_immediate_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_create_immediate_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_create_immediate_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_create_immediate_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_create_immediate_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_create_immediate_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_immediate_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_immediate_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paltdesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_immediate_params_t),
            "::",
            stringify!(paltdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphCommandList) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_create_immediate_params_t),
            "::",
            stringify!(pphCommandList)
        )
    );
}
pub type ze_command_list_create_immediate_params_t = _ze_command_list_create_immediate_params_t;
pub type ze_pfnCommandListCreateImmediateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_create_immediate_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_destroy_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_command_list_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_destroy_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_destroy_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_destroy_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
}
pub type ze_command_list_destroy_params_t = _ze_command_list_destroy_params_t;
pub type ze_pfnCommandListDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_close_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_close_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_close_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_close_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_command_list_close_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_close_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_command_list_close_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_close_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
}
pub type ze_command_list_close_params_t = _ze_command_list_close_params_t;
pub type ze_pfnCommandListCloseCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_close_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_reset_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_reset_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_reset_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_reset_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_command_list_reset_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_reset_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_command_list_reset_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_reset_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
}
pub type ze_command_list_reset_params_t = _ze_command_list_reset_params_t;
pub type ze_pfnCommandListResetCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_write_global_timestamp_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut u64,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_write_global_timestamp_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_write_global_timestamp_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_write_global_timestamp_params_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_write_global_timestamp_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_write_global_timestamp_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_write_global_timestamp_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_write_global_timestamp_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_write_global_timestamp_params_t),
            "::",
            stringify!(pdstptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_write_global_timestamp_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_write_global_timestamp_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_write_global_timestamp_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_write_global_timestamp_params_t =
    _ze_command_list_append_write_global_timestamp_params_t;
pub type ze_pfnCommandListAppendWriteGlobalTimestampCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_write_global_timestamp_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_barrier_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_barrier_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_barrier_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_barrier_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_barrier_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_barrier_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_barrier_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_barrier_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_barrier_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_barrier_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_barrier_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_barrier_params_t = _ze_command_list_append_barrier_params_t;
pub type ze_pfnCommandListAppendBarrierCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_barrier_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_memory_ranges_barrier_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumRanges: *mut u32,
    pub ppRangeSizes: *mut *const usize,
    pub ppRanges: *mut *mut *const ::std::os::raw::c_void,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_memory_ranges_barrier_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_memory_ranges_barrier_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_memory_ranges_barrier_params_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_memory_ranges_barrier_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumRanges) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t),
            "::",
            stringify!(pnumRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppRangeSizes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t),
            "::",
            stringify!(ppRangeSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppRanges) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t),
            "::",
            stringify!(ppRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_ranges_barrier_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_memory_ranges_barrier_params_t =
    _ze_command_list_append_memory_ranges_barrier_params_t;
pub type ze_pfnCommandListAppendMemoryRangesBarrierCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_memory_ranges_barrier_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_memory_copy_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::std::os::raw::c_void,
    pub psrcptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_memory_copy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_memory_copy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_memory_copy_params_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_memory_copy_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_memory_copy_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_memory_copy_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_params_t),
            "::",
            stringify!(pdstptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psrcptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_params_t),
            "::",
            stringify!(psrcptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_memory_copy_params_t = _ze_command_list_append_memory_copy_params_t;
pub type ze_pfnCommandListAppendMemoryCopyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_memory_copy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_memory_fill_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pptr: *mut *mut ::std::os::raw::c_void,
    pub ppattern: *mut *const ::std::os::raw::c_void,
    pub ppattern_size: *mut usize,
    pub psize: *mut usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_memory_fill_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_memory_fill_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_memory_fill_params_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_memory_fill_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_memory_fill_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_memory_fill_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppattern) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(ppattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppattern_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(ppattern_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_fill_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_memory_fill_params_t = _ze_command_list_append_memory_fill_params_t;
pub type ze_pfnCommandListAppendMemoryFillCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_memory_fill_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_memory_copy_region_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::std::os::raw::c_void,
    pub pdstRegion: *mut *const ze_copy_region_t,
    pub pdstPitch: *mut u32,
    pub pdstSlicePitch: *mut u32,
    pub psrcptr: *mut *const ::std::os::raw::c_void,
    pub psrcRegion: *mut *const ze_copy_region_t,
    pub psrcPitch: *mut u32,
    pub psrcSlicePitch: *mut u32,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_memory_copy_region_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_memory_copy_region_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_memory_copy_region_params_t>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_memory_copy_region_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(pdstptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstRegion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(pdstRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstPitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(pdstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstSlicePitch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(pdstSlicePitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psrcptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(psrcptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psrcRegion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(psrcRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psrcPitch) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(psrcPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psrcSlicePitch) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(psrcSlicePitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_region_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_memory_copy_region_params_t =
    _ze_command_list_append_memory_copy_region_params_t;
pub type ze_pfnCommandListAppendMemoryCopyRegionCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_memory_copy_region_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_memory_copy_from_context_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::std::os::raw::c_void,
    pub phContextSrc: *mut ze_context_handle_t,
    pub psrcptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_memory_copy_from_context_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        _ze_command_list_append_memory_copy_from_context_params_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_memory_copy_from_context_params_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_memory_copy_from_context_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(pdstptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContextSrc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(phContextSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psrcptr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(psrcptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_copy_from_context_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_memory_copy_from_context_params_t =
    _ze_command_list_append_memory_copy_from_context_params_t;
pub type ze_pfnCommandListAppendMemoryCopyFromContextCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_memory_copy_from_context_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_image_copy_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDstImage: *mut ze_image_handle_t,
    pub phSrcImage: *mut ze_image_handle_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_image_copy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_image_copy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_image_copy_params_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_image_copy_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_image_copy_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_image_copy_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDstImage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_params_t),
            "::",
            stringify!(phDstImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSrcImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_params_t),
            "::",
            stringify!(phSrcImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_image_copy_params_t = _ze_command_list_append_image_copy_params_t;
pub type ze_pfnCommandListAppendImageCopyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_image_copy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_image_copy_region_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDstImage: *mut ze_image_handle_t,
    pub phSrcImage: *mut ze_image_handle_t,
    pub ppDstRegion: *mut *const ze_image_region_t,
    pub ppSrcRegion: *mut *const ze_image_region_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_image_copy_region_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_image_copy_region_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_image_copy_region_params_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_image_copy_region_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_image_copy_region_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDstImage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(phDstImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSrcImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(phSrcImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppDstRegion) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(ppDstRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSrcRegion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(ppSrcRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_region_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_image_copy_region_params_t =
    _ze_command_list_append_image_copy_region_params_t;
pub type ze_pfnCommandListAppendImageCopyRegionCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_image_copy_region_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_image_copy_to_memory_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::std::os::raw::c_void,
    pub phSrcImage: *mut ze_image_handle_t,
    pub ppSrcRegion: *mut *const ze_image_region_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_image_copy_to_memory_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_image_copy_to_memory_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_image_copy_to_memory_params_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_image_copy_to_memory_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t),
            "::",
            stringify!(pdstptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSrcImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t),
            "::",
            stringify!(phSrcImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSrcRegion) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t),
            "::",
            stringify!(ppSrcRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_to_memory_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_image_copy_to_memory_params_t =
    _ze_command_list_append_image_copy_to_memory_params_t;
pub type ze_pfnCommandListAppendImageCopyToMemoryCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_image_copy_to_memory_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_image_copy_from_memory_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDstImage: *mut ze_image_handle_t,
    pub psrcptr: *mut *const ::std::os::raw::c_void,
    pub ppDstRegion: *mut *const ze_image_region_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_image_copy_from_memory_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_image_copy_from_memory_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_image_copy_from_memory_params_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_image_copy_from_memory_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDstImage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t),
            "::",
            stringify!(phDstImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psrcptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t),
            "::",
            stringify!(psrcptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppDstRegion) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t),
            "::",
            stringify!(ppDstRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_image_copy_from_memory_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_image_copy_from_memory_params_t =
    _ze_command_list_append_image_copy_from_memory_params_t;
pub type ze_pfnCommandListAppendImageCopyFromMemoryCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_image_copy_from_memory_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_memory_prefetch_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_memory_prefetch_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_memory_prefetch_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_memory_prefetch_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_memory_prefetch_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_memory_prefetch_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_memory_prefetch_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_prefetch_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_prefetch_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_memory_prefetch_params_t),
            "::",
            stringify!(psize)
        )
    );
}
pub type ze_command_list_append_memory_prefetch_params_t =
    _ze_command_list_append_memory_prefetch_params_t;
pub type ze_pfnCommandListAppendMemoryPrefetchCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_memory_prefetch_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_mem_advise_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
    pub padvice: *mut ze_memory_advice_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_mem_advise_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_mem_advise_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_mem_advise_params_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_mem_advise_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_mem_advise_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_mem_advise_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_mem_advise_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_mem_advise_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_mem_advise_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_mem_advise_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padvice) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_mem_advise_params_t),
            "::",
            stringify!(padvice)
        )
    );
}
pub type ze_command_list_append_mem_advise_params_t = _ze_command_list_append_mem_advise_params_t;
pub type ze_pfnCommandListAppendMemAdviseCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_mem_advise_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_signal_event_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phEvent: *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_signal_event_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_signal_event_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_signal_event_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_signal_event_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_signal_event_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_signal_event_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_signal_event_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_signal_event_params_t),
            "::",
            stringify!(phEvent)
        )
    );
}
pub type ze_command_list_append_signal_event_params_t =
    _ze_command_list_append_signal_event_params_t;
pub type ze_pfnCommandListAppendSignalEventCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_signal_event_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_wait_on_events_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumEvents: *mut u32,
    pub pphEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_wait_on_events_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_wait_on_events_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_wait_on_events_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_wait_on_events_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_wait_on_events_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_wait_on_events_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_wait_on_events_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumEvents) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_wait_on_events_params_t),
            "::",
            stringify!(pnumEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphEvents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_wait_on_events_params_t),
            "::",
            stringify!(pphEvents)
        )
    );
}
pub type ze_command_list_append_wait_on_events_params_t =
    _ze_command_list_append_wait_on_events_params_t;
pub type ze_pfnCommandListAppendWaitOnEventsCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_wait_on_events_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_event_reset_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phEvent: *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_event_reset_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_event_reset_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_event_reset_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_event_reset_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_event_reset_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_event_reset_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_event_reset_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_event_reset_params_t),
            "::",
            stringify!(phEvent)
        )
    );
}
pub type ze_command_list_append_event_reset_params_t = _ze_command_list_append_event_reset_params_t;
pub type ze_pfnCommandListAppendEventResetCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_event_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_query_kernel_timestamps_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumEvents: *mut u32,
    pub pphEvents: *mut *mut ze_event_handle_t,
    pub pdstptr: *mut *mut ::std::os::raw::c_void,
    pub ppOffsets: *mut *const usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_query_kernel_timestamps_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        _ze_command_list_append_query_kernel_timestamps_params_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_query_kernel_timestamps_params_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_query_kernel_timestamps_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumEvents) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(pnumEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphEvents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(pphEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstptr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(pdstptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppOffsets) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(ppOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_query_kernel_timestamps_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_query_kernel_timestamps_params_t =
    _ze_command_list_append_query_kernel_timestamps_params_t;
pub type ze_pfnCommandListAppendQueryKernelTimestampsCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_query_kernel_timestamps_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_launch_kernel_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppLaunchFuncArgs: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_launch_kernel_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_launch_kernel_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_launch_kernel_params_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_launch_kernel_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_launch_kernel_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_launch_kernel_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppLaunchFuncArgs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_params_t),
            "::",
            stringify!(ppLaunchFuncArgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_launch_kernel_params_t =
    _ze_command_list_append_launch_kernel_params_t;
pub type ze_pfnCommandListAppendLaunchKernelCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_launch_kernel_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_launch_cooperative_kernel_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppLaunchFuncArgs: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_launch_cooperative_kernel_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        _ze_command_list_append_launch_cooperative_kernel_params_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_launch_cooperative_kernel_params_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_launch_cooperative_kernel_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppLaunchFuncArgs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t),
            "::",
            stringify!(ppLaunchFuncArgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_cooperative_kernel_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_launch_cooperative_kernel_params_t =
    _ze_command_list_append_launch_cooperative_kernel_params_t;
pub type ze_pfnCommandListAppendLaunchCooperativeKernelCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_launch_cooperative_kernel_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_launch_kernel_indirect_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppLaunchArgumentsBuffer: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_launch_kernel_indirect_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_append_launch_kernel_indirect_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_launch_kernel_indirect_params_t>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_launch_kernel_indirect_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppLaunchArgumentsBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t),
            "::",
            stringify!(ppLaunchArgumentsBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_kernel_indirect_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_launch_kernel_indirect_params_t =
    _ze_command_list_append_launch_kernel_indirect_params_t;
pub type ze_pfnCommandListAppendLaunchKernelIndirectCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_launch_kernel_indirect_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_append_launch_multiple_kernels_indirect_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumKernels: *mut u32,
    pub pphKernels: *mut *mut ze_kernel_handle_t,
    pub ppCountBuffer: *mut *const u32,
    pub ppLaunchArgumentsBuffer: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_append_launch_multiple_kernels_indirect_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<
        _ze_command_list_append_launch_multiple_kernels_indirect_params_t,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_append_launch_multiple_kernels_indirect_params_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_append_launch_multiple_kernels_indirect_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(phCommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumKernels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(pnumKernels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphKernels) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(pphKernels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCountBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(ppCountBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppLaunchArgumentsBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(ppLaunchArgumentsBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSignalEvent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(phSignalEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumWaitEvents) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(pnumWaitEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphWaitEvents) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_append_launch_multiple_kernels_indirect_params_t),
            "::",
            stringify!(pphWaitEvents)
        )
    );
}
pub type ze_command_list_append_launch_multiple_kernels_indirect_params_t =
    _ze_command_list_append_launch_multiple_kernels_indirect_params_t;
pub type ze_pfnCommandListAppendLaunchMultipleKernelsIndirectCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_command_list_append_launch_multiple_kernels_indirect_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_callbacks_t {
    pub pfnCreateCb: ze_pfnCommandListCreateCb_t,
    pub pfnCreateImmediateCb: ze_pfnCommandListCreateImmediateCb_t,
    pub pfnDestroyCb: ze_pfnCommandListDestroyCb_t,
    pub pfnCloseCb: ze_pfnCommandListCloseCb_t,
    pub pfnResetCb: ze_pfnCommandListResetCb_t,
    pub pfnAppendWriteGlobalTimestampCb: ze_pfnCommandListAppendWriteGlobalTimestampCb_t,
    pub pfnAppendBarrierCb: ze_pfnCommandListAppendBarrierCb_t,
    pub pfnAppendMemoryRangesBarrierCb: ze_pfnCommandListAppendMemoryRangesBarrierCb_t,
    pub pfnAppendMemoryCopyCb: ze_pfnCommandListAppendMemoryCopyCb_t,
    pub pfnAppendMemoryFillCb: ze_pfnCommandListAppendMemoryFillCb_t,
    pub pfnAppendMemoryCopyRegionCb: ze_pfnCommandListAppendMemoryCopyRegionCb_t,
    pub pfnAppendMemoryCopyFromContextCb: ze_pfnCommandListAppendMemoryCopyFromContextCb_t,
    pub pfnAppendImageCopyCb: ze_pfnCommandListAppendImageCopyCb_t,
    pub pfnAppendImageCopyRegionCb: ze_pfnCommandListAppendImageCopyRegionCb_t,
    pub pfnAppendImageCopyToMemoryCb: ze_pfnCommandListAppendImageCopyToMemoryCb_t,
    pub pfnAppendImageCopyFromMemoryCb: ze_pfnCommandListAppendImageCopyFromMemoryCb_t,
    pub pfnAppendMemoryPrefetchCb: ze_pfnCommandListAppendMemoryPrefetchCb_t,
    pub pfnAppendMemAdviseCb: ze_pfnCommandListAppendMemAdviseCb_t,
    pub pfnAppendSignalEventCb: ze_pfnCommandListAppendSignalEventCb_t,
    pub pfnAppendWaitOnEventsCb: ze_pfnCommandListAppendWaitOnEventsCb_t,
    pub pfnAppendEventResetCb: ze_pfnCommandListAppendEventResetCb_t,
    pub pfnAppendQueryKernelTimestampsCb: ze_pfnCommandListAppendQueryKernelTimestampsCb_t,
    pub pfnAppendLaunchKernelCb: ze_pfnCommandListAppendLaunchKernelCb_t,
    pub pfnAppendLaunchCooperativeKernelCb: ze_pfnCommandListAppendLaunchCooperativeKernelCb_t,
    pub pfnAppendLaunchKernelIndirectCb: ze_pfnCommandListAppendLaunchKernelIndirectCb_t,
    pub pfnAppendLaunchMultipleKernelsIndirectCb:
        ze_pfnCommandListAppendLaunchMultipleKernelsIndirectCb_t,
}
#[test]
fn bindgen_test_layout__ze_command_list_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_command_list_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_command_list_callbacks_t>(),
        208usize,
        concat!("Size of: ", stringify!(_ze_command_list_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_command_list_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_command_list_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateImmediateCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnCreateImmediateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCloseCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnCloseCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnResetCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnResetCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendWriteGlobalTimestampCb) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendWriteGlobalTimestampCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendBarrierCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendBarrierCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendMemoryRangesBarrierCb) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendMemoryRangesBarrierCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendMemoryCopyCb) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendMemoryCopyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendMemoryFillCb) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendMemoryFillCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendMemoryCopyRegionCb) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendMemoryCopyRegionCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendMemoryCopyFromContextCb) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendMemoryCopyFromContextCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendImageCopyCb) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendImageCopyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendImageCopyRegionCb) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendImageCopyRegionCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendImageCopyToMemoryCb) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendImageCopyToMemoryCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendImageCopyFromMemoryCb) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendImageCopyFromMemoryCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendMemoryPrefetchCb) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendMemoryPrefetchCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendMemAdviseCb) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendMemAdviseCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendSignalEventCb) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendSignalEventCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendWaitOnEventsCb) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendWaitOnEventsCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendEventResetCb) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendEventResetCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendQueryKernelTimestampsCb) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendQueryKernelTimestampsCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAppendLaunchKernelCb) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendLaunchKernelCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendLaunchCooperativeKernelCb) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendLaunchCooperativeKernelCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendLaunchKernelIndirectCb) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendLaunchKernelIndirectCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnAppendLaunchMultipleKernelsIndirectCb) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_command_list_callbacks_t),
            "::",
            stringify!(pfnAppendLaunchMultipleKernelsIndirectCb)
        )
    );
}
pub type ze_command_list_callbacks_t = _ze_command_list_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_get_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_image_desc_t,
    pub ppImageProperties: *mut *mut ze_image_properties_t,
}
#[test]
fn bindgen_test_layout__ze_image_get_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_get_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_get_properties_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_image_get_properties_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_get_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_image_get_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_get_properties_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_get_properties_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppImageProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_get_properties_params_t),
            "::",
            stringify!(ppImageProperties)
        )
    );
}
pub type ze_image_get_properties_params_t = _ze_image_get_properties_params_t;
pub type ze_pfnImageGetPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_image_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_image_desc_t,
    pub pphImage: *mut *mut ze_image_handle_t,
}
#[test]
fn bindgen_test_layout__ze_image_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_create_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_image_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_image_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_create_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_create_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphImage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_create_params_t),
            "::",
            stringify!(pphImage)
        )
    );
}
pub type ze_image_create_params_t = _ze_image_create_params_t;
pub type ze_pfnImageCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_image_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_destroy_params_t {
    pub phImage: *mut ze_image_handle_t,
}
#[test]
fn bindgen_test_layout__ze_image_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_image_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_image_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phImage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_destroy_params_t),
            "::",
            stringify!(phImage)
        )
    );
}
pub type ze_image_destroy_params_t = _ze_image_destroy_params_t;
pub type ze_pfnImageDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_image_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_callbacks_t {
    pub pfnGetPropertiesCb: ze_pfnImageGetPropertiesCb_t,
    pub pfnCreateCb: ze_pfnImageCreateCb_t,
    pub pfnDestroyCb: ze_pfnImageDestroyCb_t,
}
#[test]
fn bindgen_test_layout__ze_image_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_image_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_image_callbacks_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_image_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_image_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_image_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetPropertiesCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_callbacks_t),
            "::",
            stringify!(pfnGetPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_image_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
}
pub type ze_image_callbacks_t = _ze_image_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_create_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
    pub pdesc: *mut *const ze_fence_desc_t,
    pub pphFence: *mut *mut ze_fence_handle_t,
}
#[test]
fn bindgen_test_layout__ze_fence_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fence_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fence_create_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_fence_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fence_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_fence_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phCommandQueue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_create_params_t),
            "::",
            stringify!(phCommandQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphFence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_create_params_t),
            "::",
            stringify!(pphFence)
        )
    );
}
pub type ze_fence_create_params_t = _ze_fence_create_params_t;
pub type ze_pfnFenceCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_fence_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_destroy_params_t {
    pub phFence: *mut ze_fence_handle_t,
}
#[test]
fn bindgen_test_layout__ze_fence_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fence_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fence_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_fence_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fence_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_fence_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phFence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_destroy_params_t),
            "::",
            stringify!(phFence)
        )
    );
}
pub type ze_fence_destroy_params_t = _ze_fence_destroy_params_t;
pub type ze_pfnFenceDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_fence_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_host_synchronize_params_t {
    pub phFence: *mut ze_fence_handle_t,
    pub ptimeout: *mut u64,
}
#[test]
fn bindgen_test_layout__ze_fence_host_synchronize_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fence_host_synchronize_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fence_host_synchronize_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_fence_host_synchronize_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fence_host_synchronize_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_fence_host_synchronize_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phFence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_host_synchronize_params_t),
            "::",
            stringify!(phFence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptimeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_host_synchronize_params_t),
            "::",
            stringify!(ptimeout)
        )
    );
}
pub type ze_fence_host_synchronize_params_t = _ze_fence_host_synchronize_params_t;
pub type ze_pfnFenceHostSynchronizeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_fence_host_synchronize_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_query_status_params_t {
    pub phFence: *mut ze_fence_handle_t,
}
#[test]
fn bindgen_test_layout__ze_fence_query_status_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fence_query_status_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fence_query_status_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_fence_query_status_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fence_query_status_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_fence_query_status_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phFence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_query_status_params_t),
            "::",
            stringify!(phFence)
        )
    );
}
pub type ze_fence_query_status_params_t = _ze_fence_query_status_params_t;
pub type ze_pfnFenceQueryStatusCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_fence_query_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_reset_params_t {
    pub phFence: *mut ze_fence_handle_t,
}
#[test]
fn bindgen_test_layout__ze_fence_reset_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fence_reset_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fence_reset_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_fence_reset_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fence_reset_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_fence_reset_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phFence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_reset_params_t),
            "::",
            stringify!(phFence)
        )
    );
}
pub type ze_fence_reset_params_t = _ze_fence_reset_params_t;
pub type ze_pfnFenceResetCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_fence_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_callbacks_t {
    pub pfnCreateCb: ze_pfnFenceCreateCb_t,
    pub pfnDestroyCb: ze_pfnFenceDestroyCb_t,
    pub pfnHostSynchronizeCb: ze_pfnFenceHostSynchronizeCb_t,
    pub pfnQueryStatusCb: ze_pfnFenceQueryStatusCb_t,
    pub pfnResetCb: ze_pfnFenceResetCb_t,
}
#[test]
fn bindgen_test_layout__ze_fence_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_fence_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_fence_callbacks_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_fence_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_fence_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_fence_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnHostSynchronizeCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_callbacks_t),
            "::",
            stringify!(pfnHostSynchronizeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnQueryStatusCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_callbacks_t),
            "::",
            stringify!(pfnQueryStatusCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnResetCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_fence_callbacks_t),
            "::",
            stringify!(pfnResetCb)
        )
    );
}
pub type ze_fence_callbacks_t = _ze_fence_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pdesc: *mut *const ze_event_pool_desc_t,
    pub pnumDevices: *mut u32,
    pub pphDevices: *mut *mut ze_device_handle_t,
    pub pphEventPool: *mut *mut ze_event_pool_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_pool_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_pool_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_pool_create_params_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_event_pool_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_pool_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_pool_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_create_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumDevices) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_create_params_t),
            "::",
            stringify!(pnumDevices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphDevices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_create_params_t),
            "::",
            stringify!(pphDevices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphEventPool) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_create_params_t),
            "::",
            stringify!(pphEventPool)
        )
    );
}
pub type ze_event_pool_create_params_t = _ze_event_pool_create_params_t;
pub type ze_pfnEventPoolCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_pool_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_destroy_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_pool_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_pool_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_pool_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_event_pool_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_pool_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_pool_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEventPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_destroy_params_t),
            "::",
            stringify!(phEventPool)
        )
    );
}
pub type ze_event_pool_destroy_params_t = _ze_event_pool_destroy_params_t;
pub type ze_pfnEventPoolDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_pool_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_get_ipc_handle_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
    pub pphIpc: *mut *mut ze_ipc_event_pool_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_pool_get_ipc_handle_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_pool_get_ipc_handle_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_pool_get_ipc_handle_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_event_pool_get_ipc_handle_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_pool_get_ipc_handle_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_event_pool_get_ipc_handle_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEventPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_get_ipc_handle_params_t),
            "::",
            stringify!(phEventPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphIpc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_get_ipc_handle_params_t),
            "::",
            stringify!(pphIpc)
        )
    );
}
pub type ze_event_pool_get_ipc_handle_params_t = _ze_event_pool_get_ipc_handle_params_t;
pub type ze_pfnEventPoolGetIpcHandleCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_pool_get_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_open_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phIpc: *mut ze_ipc_event_pool_handle_t,
    pub pphEventPool: *mut *mut ze_event_pool_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_pool_open_ipc_handle_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_pool_open_ipc_handle_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_pool_open_ipc_handle_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_event_pool_open_ipc_handle_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_pool_open_ipc_handle_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_event_pool_open_ipc_handle_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_open_ipc_handle_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phIpc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_open_ipc_handle_params_t),
            "::",
            stringify!(phIpc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphEventPool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_open_ipc_handle_params_t),
            "::",
            stringify!(pphEventPool)
        )
    );
}
pub type ze_event_pool_open_ipc_handle_params_t = _ze_event_pool_open_ipc_handle_params_t;
pub type ze_pfnEventPoolOpenIpcHandleCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_pool_open_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_close_ipc_handle_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_pool_close_ipc_handle_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_pool_close_ipc_handle_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_pool_close_ipc_handle_params_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_ze_event_pool_close_ipc_handle_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_pool_close_ipc_handle_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_event_pool_close_ipc_handle_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEventPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_close_ipc_handle_params_t),
            "::",
            stringify!(phEventPool)
        )
    );
}
pub type ze_event_pool_close_ipc_handle_params_t = _ze_event_pool_close_ipc_handle_params_t;
pub type ze_pfnEventPoolCloseIpcHandleCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_pool_close_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_callbacks_t {
    pub pfnCreateCb: ze_pfnEventPoolCreateCb_t,
    pub pfnDestroyCb: ze_pfnEventPoolDestroyCb_t,
    pub pfnGetIpcHandleCb: ze_pfnEventPoolGetIpcHandleCb_t,
    pub pfnOpenIpcHandleCb: ze_pfnEventPoolOpenIpcHandleCb_t,
    pub pfnCloseIpcHandleCb: ze_pfnEventPoolCloseIpcHandleCb_t,
}
#[test]
fn bindgen_test_layout__ze_event_pool_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_pool_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_pool_callbacks_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_event_pool_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_pool_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_pool_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetIpcHandleCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_callbacks_t),
            "::",
            stringify!(pfnGetIpcHandleCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnOpenIpcHandleCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_callbacks_t),
            "::",
            stringify!(pfnOpenIpcHandleCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCloseIpcHandleCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_pool_callbacks_t),
            "::",
            stringify!(pfnCloseIpcHandleCb)
        )
    );
}
pub type ze_event_pool_callbacks_t = _ze_event_pool_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_create_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
    pub pdesc: *mut *const ze_event_desc_t,
    pub pphEvent: *mut *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_create_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_event_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEventPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_create_params_t),
            "::",
            stringify!(phEventPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphEvent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_create_params_t),
            "::",
            stringify!(pphEvent)
        )
    );
}
pub type ze_event_create_params_t = _ze_event_create_params_t;
pub type ze_pfnEventCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_destroy_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_event_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_destroy_params_t),
            "::",
            stringify!(phEvent)
        )
    );
}
pub type ze_event_destroy_params_t = _ze_event_destroy_params_t;
pub type ze_pfnEventDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_host_signal_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_host_signal_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_host_signal_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_host_signal_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_event_host_signal_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_host_signal_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_host_signal_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_host_signal_params_t),
            "::",
            stringify!(phEvent)
        )
    );
}
pub type ze_event_host_signal_params_t = _ze_event_host_signal_params_t;
pub type ze_pfnEventHostSignalCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_host_signal_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_host_synchronize_params_t {
    pub phEvent: *mut ze_event_handle_t,
    pub ptimeout: *mut u64,
}
#[test]
fn bindgen_test_layout__ze_event_host_synchronize_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_host_synchronize_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_host_synchronize_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_event_host_synchronize_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_host_synchronize_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_event_host_synchronize_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_host_synchronize_params_t),
            "::",
            stringify!(phEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptimeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_host_synchronize_params_t),
            "::",
            stringify!(ptimeout)
        )
    );
}
pub type ze_event_host_synchronize_params_t = _ze_event_host_synchronize_params_t;
pub type ze_pfnEventHostSynchronizeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_host_synchronize_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_query_status_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_query_status_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_query_status_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_query_status_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_event_query_status_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_query_status_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_query_status_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_query_status_params_t),
            "::",
            stringify!(phEvent)
        )
    );
}
pub type ze_event_query_status_params_t = _ze_event_query_status_params_t;
pub type ze_pfnEventQueryStatusCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_query_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_host_reset_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
#[test]
fn bindgen_test_layout__ze_event_host_reset_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_host_reset_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_host_reset_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_event_host_reset_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_host_reset_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_host_reset_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_host_reset_params_t),
            "::",
            stringify!(phEvent)
        )
    );
}
pub type ze_event_host_reset_params_t = _ze_event_host_reset_params_t;
pub type ze_pfnEventHostResetCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_host_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_query_kernel_timestamp_params_t {
    pub phEvent: *mut ze_event_handle_t,
    pub pdstptr: *mut *mut ze_kernel_timestamp_result_t,
}
#[test]
fn bindgen_test_layout__ze_event_query_kernel_timestamp_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_query_kernel_timestamp_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_query_kernel_timestamp_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_event_query_kernel_timestamp_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_query_kernel_timestamp_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_event_query_kernel_timestamp_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_query_kernel_timestamp_params_t),
            "::",
            stringify!(phEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdstptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_query_kernel_timestamp_params_t),
            "::",
            stringify!(pdstptr)
        )
    );
}
pub type ze_event_query_kernel_timestamp_params_t = _ze_event_query_kernel_timestamp_params_t;
pub type ze_pfnEventQueryKernelTimestampCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_event_query_kernel_timestamp_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_callbacks_t {
    pub pfnCreateCb: ze_pfnEventCreateCb_t,
    pub pfnDestroyCb: ze_pfnEventDestroyCb_t,
    pub pfnHostSignalCb: ze_pfnEventHostSignalCb_t,
    pub pfnHostSynchronizeCb: ze_pfnEventHostSynchronizeCb_t,
    pub pfnQueryStatusCb: ze_pfnEventQueryStatusCb_t,
    pub pfnHostResetCb: ze_pfnEventHostResetCb_t,
    pub pfnQueryKernelTimestampCb: ze_pfnEventQueryKernelTimestampCb_t,
}
#[test]
fn bindgen_test_layout__ze_event_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_event_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_event_callbacks_t>(),
        56usize,
        concat!("Size of: ", stringify!(_ze_event_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_event_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_event_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnHostSignalCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_callbacks_t),
            "::",
            stringify!(pfnHostSignalCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnHostSynchronizeCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_callbacks_t),
            "::",
            stringify!(pfnHostSynchronizeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnQueryStatusCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_callbacks_t),
            "::",
            stringify!(pfnQueryStatusCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnHostResetCb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_callbacks_t),
            "::",
            stringify!(pfnHostResetCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnQueryKernelTimestampCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_event_callbacks_t),
            "::",
            stringify!(pfnQueryKernelTimestampCb)
        )
    );
}
pub type ze_event_callbacks_t = _ze_event_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_module_desc_t,
    pub pphModule: *mut *mut ze_module_handle_t,
    pub pphBuildLog: *mut *mut ze_module_build_log_handle_t,
}
#[test]
fn bindgen_test_layout__ze_module_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_create_params_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_module_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_module_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_create_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_create_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphModule) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_create_params_t),
            "::",
            stringify!(pphModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphBuildLog) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_create_params_t),
            "::",
            stringify!(pphBuildLog)
        )
    );
}
pub type ze_module_create_params_t = _ze_module_create_params_t;
pub type ze_pfnModuleCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_destroy_params_t {
    pub phModule: *mut ze_module_handle_t,
}
#[test]
fn bindgen_test_layout__ze_module_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_module_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_module_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_destroy_params_t),
            "::",
            stringify!(phModule)
        )
    );
}
pub type ze_module_destroy_params_t = _ze_module_destroy_params_t;
pub type ze_pfnModuleDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_dynamic_link_params_t {
    pub pnumModules: *mut u32,
    pub pphModules: *mut *mut ze_module_handle_t,
    pub pphLinkLog: *mut *mut ze_module_build_log_handle_t,
}
#[test]
fn bindgen_test_layout__ze_module_dynamic_link_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_dynamic_link_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_dynamic_link_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_module_dynamic_link_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_dynamic_link_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_dynamic_link_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pnumModules) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_dynamic_link_params_t),
            "::",
            stringify!(pnumModules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphModules) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_dynamic_link_params_t),
            "::",
            stringify!(pphModules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphLinkLog) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_dynamic_link_params_t),
            "::",
            stringify!(pphLinkLog)
        )
    );
}
pub type ze_module_dynamic_link_params_t = _ze_module_dynamic_link_params_t;
pub type ze_pfnModuleDynamicLinkCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_dynamic_link_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_get_native_binary_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppSize: *mut *mut usize,
    pub ppModuleNativeBinary: *mut *mut u8,
}
#[test]
fn bindgen_test_layout__ze_module_get_native_binary_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_get_native_binary_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_get_native_binary_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_module_get_native_binary_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_get_native_binary_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_get_native_binary_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_native_binary_params_t),
            "::",
            stringify!(phModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_native_binary_params_t),
            "::",
            stringify!(ppSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppModuleNativeBinary) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_native_binary_params_t),
            "::",
            stringify!(ppModuleNativeBinary)
        )
    );
}
pub type ze_module_get_native_binary_params_t = _ze_module_get_native_binary_params_t;
pub type ze_pfnModuleGetNativeBinaryCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_get_native_binary_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_get_global_pointer_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppGlobalName: *mut *const ::std::os::raw::c_char,
    pub ppSize: *mut *mut usize,
    pub ppptr: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_module_get_global_pointer_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_get_global_pointer_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_get_global_pointer_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_module_get_global_pointer_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_get_global_pointer_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_get_global_pointer_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_global_pointer_params_t),
            "::",
            stringify!(phModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppGlobalName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_global_pointer_params_t),
            "::",
            stringify!(ppGlobalName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_global_pointer_params_t),
            "::",
            stringify!(ppSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppptr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_global_pointer_params_t),
            "::",
            stringify!(ppptr)
        )
    );
}
pub type ze_module_get_global_pointer_params_t = _ze_module_get_global_pointer_params_t;
pub type ze_pfnModuleGetGlobalPointerCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_get_global_pointer_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_get_kernel_names_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppNames: *mut *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ze_module_get_kernel_names_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_get_kernel_names_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_get_kernel_names_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_module_get_kernel_names_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_get_kernel_names_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_get_kernel_names_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_kernel_names_params_t),
            "::",
            stringify!(phModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_kernel_names_params_t),
            "::",
            stringify!(ppCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppNames) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_kernel_names_params_t),
            "::",
            stringify!(ppNames)
        )
    );
}
pub type ze_module_get_kernel_names_params_t = _ze_module_get_kernel_names_params_t;
pub type ze_pfnModuleGetKernelNamesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_get_kernel_names_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_get_properties_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppModuleProperties: *mut *mut ze_module_properties_t,
}
#[test]
fn bindgen_test_layout__ze_module_get_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_get_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_get_properties_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_module_get_properties_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_get_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_get_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_properties_params_t),
            "::",
            stringify!(phModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppModuleProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_properties_params_t),
            "::",
            stringify!(ppModuleProperties)
        )
    );
}
pub type ze_module_get_properties_params_t = _ze_module_get_properties_params_t;
pub type ze_pfnModuleGetPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_get_function_pointer_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppFunctionName: *mut *const ::std::os::raw::c_char,
    pub ppfnFunction: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_module_get_function_pointer_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_get_function_pointer_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_get_function_pointer_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_module_get_function_pointer_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_get_function_pointer_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_get_function_pointer_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_function_pointer_params_t),
            "::",
            stringify!(phModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppFunctionName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_function_pointer_params_t),
            "::",
            stringify!(ppFunctionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppfnFunction) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_get_function_pointer_params_t),
            "::",
            stringify!(ppfnFunction)
        )
    );
}
pub type ze_module_get_function_pointer_params_t = _ze_module_get_function_pointer_params_t;
pub type ze_pfnModuleGetFunctionPointerCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_get_function_pointer_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_callbacks_t {
    pub pfnCreateCb: ze_pfnModuleCreateCb_t,
    pub pfnDestroyCb: ze_pfnModuleDestroyCb_t,
    pub pfnDynamicLinkCb: ze_pfnModuleDynamicLinkCb_t,
    pub pfnGetNativeBinaryCb: ze_pfnModuleGetNativeBinaryCb_t,
    pub pfnGetGlobalPointerCb: ze_pfnModuleGetGlobalPointerCb_t,
    pub pfnGetKernelNamesCb: ze_pfnModuleGetKernelNamesCb_t,
    pub pfnGetPropertiesCb: ze_pfnModuleGetPropertiesCb_t,
    pub pfnGetFunctionPointerCb: ze_pfnModuleGetFunctionPointerCb_t,
}
#[test]
fn bindgen_test_layout__ze_module_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_callbacks_t>(),
        64usize,
        concat!("Size of: ", stringify!(_ze_module_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_module_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDynamicLinkCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnDynamicLinkCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetNativeBinaryCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnGetNativeBinaryCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetGlobalPointerCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnGetGlobalPointerCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetKernelNamesCb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnGetKernelNamesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetPropertiesCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnGetPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetFunctionPointerCb) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_callbacks_t),
            "::",
            stringify!(pfnGetFunctionPointerCb)
        )
    );
}
pub type ze_module_callbacks_t = _ze_module_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_build_log_destroy_params_t {
    pub phModuleBuildLog: *mut ze_module_build_log_handle_t,
}
#[test]
fn bindgen_test_layout__ze_module_build_log_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_build_log_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_build_log_destroy_params_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_ze_module_build_log_destroy_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_build_log_destroy_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_build_log_destroy_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModuleBuildLog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_build_log_destroy_params_t),
            "::",
            stringify!(phModuleBuildLog)
        )
    );
}
pub type ze_module_build_log_destroy_params_t = _ze_module_build_log_destroy_params_t;
pub type ze_pfnModuleBuildLogDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_build_log_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_build_log_get_string_params_t {
    pub phModuleBuildLog: *mut ze_module_build_log_handle_t,
    pub ppSize: *mut *mut usize,
    pub ppBuildLog: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ze_module_build_log_get_string_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_build_log_get_string_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_build_log_get_string_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_module_build_log_get_string_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_build_log_get_string_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_build_log_get_string_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModuleBuildLog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_build_log_get_string_params_t),
            "::",
            stringify!(phModuleBuildLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_build_log_get_string_params_t),
            "::",
            stringify!(ppSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppBuildLog) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_build_log_get_string_params_t),
            "::",
            stringify!(ppBuildLog)
        )
    );
}
pub type ze_module_build_log_get_string_params_t = _ze_module_build_log_get_string_params_t;
pub type ze_pfnModuleBuildLogGetStringCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_module_build_log_get_string_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_build_log_callbacks_t {
    pub pfnDestroyCb: ze_pfnModuleBuildLogDestroyCb_t,
    pub pfnGetStringCb: ze_pfnModuleBuildLogGetStringCb_t,
}
#[test]
fn bindgen_test_layout__ze_module_build_log_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_module_build_log_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_module_build_log_callbacks_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_module_build_log_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_module_build_log_callbacks_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_module_build_log_callbacks_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_build_log_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetStringCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_module_build_log_callbacks_t),
            "::",
            stringify!(pfnGetStringCb)
        )
    );
}
pub type ze_module_build_log_callbacks_t = _ze_module_build_log_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_create_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub pdesc: *mut *const ze_kernel_desc_t,
    pub pphKernel: *mut *mut ze_kernel_handle_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_create_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_kernel_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phModule) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_create_params_t),
            "::",
            stringify!(phModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphKernel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_create_params_t),
            "::",
            stringify!(pphKernel)
        )
    );
}
pub type ze_kernel_create_params_t = _ze_kernel_create_params_t;
pub type ze_pfnKernelCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_destroy_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_kernel_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_destroy_params_t),
            "::",
            stringify!(phKernel)
        )
    );
}
pub type ze_kernel_destroy_params_t = _ze_kernel_destroy_params_t;
pub type ze_pfnKernelDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_set_cache_config_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pflags: *mut ze_cache_config_flags_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_set_cache_config_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_set_cache_config_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_set_cache_config_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_set_cache_config_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_set_cache_config_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_set_cache_config_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_cache_config_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_cache_config_params_t),
            "::",
            stringify!(pflags)
        )
    );
}
pub type ze_kernel_set_cache_config_params_t = _ze_kernel_set_cache_config_params_t;
pub type ze_pfnKernelSetCacheConfigCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_set_cache_config_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_set_group_size_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pgroupSizeX: *mut u32,
    pub pgroupSizeY: *mut u32,
    pub pgroupSizeZ: *mut u32,
}
#[test]
fn bindgen_test_layout__ze_kernel_set_group_size_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_set_group_size_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_set_group_size_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_kernel_set_group_size_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_set_group_size_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_set_group_size_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_group_size_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pgroupSizeX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_group_size_params_t),
            "::",
            stringify!(pgroupSizeX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pgroupSizeY) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_group_size_params_t),
            "::",
            stringify!(pgroupSizeY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pgroupSizeZ) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_group_size_params_t),
            "::",
            stringify!(pgroupSizeZ)
        )
    );
}
pub type ze_kernel_set_group_size_params_t = _ze_kernel_set_group_size_params_t;
pub type ze_pfnKernelSetGroupSizeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_set_group_size_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_suggest_group_size_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pglobalSizeX: *mut u32,
    pub pglobalSizeY: *mut u32,
    pub pglobalSizeZ: *mut u32,
    pub pgroupSizeX: *mut *mut u32,
    pub pgroupSizeY: *mut *mut u32,
    pub pgroupSizeZ: *mut *mut u32,
}
#[test]
fn bindgen_test_layout__ze_kernel_suggest_group_size_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_suggest_group_size_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_suggest_group_size_params_t>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_suggest_group_size_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_suggest_group_size_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_suggest_group_size_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_group_size_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pglobalSizeX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_group_size_params_t),
            "::",
            stringify!(pglobalSizeX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pglobalSizeY) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_group_size_params_t),
            "::",
            stringify!(pglobalSizeY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pglobalSizeZ) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_group_size_params_t),
            "::",
            stringify!(pglobalSizeZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pgroupSizeX) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_group_size_params_t),
            "::",
            stringify!(pgroupSizeX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pgroupSizeY) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_group_size_params_t),
            "::",
            stringify!(pgroupSizeY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pgroupSizeZ) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_group_size_params_t),
            "::",
            stringify!(pgroupSizeZ)
        )
    );
}
pub type ze_kernel_suggest_group_size_params_t = _ze_kernel_suggest_group_size_params_t;
pub type ze_pfnKernelSuggestGroupSizeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_suggest_group_size_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_suggest_max_cooperative_group_count_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ptotalGroupCount: *mut *mut u32,
}
#[test]
fn bindgen_test_layout__ze_kernel_suggest_max_cooperative_group_count_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_suggest_max_cooperative_group_count_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_suggest_max_cooperative_group_count_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_suggest_max_cooperative_group_count_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_suggest_max_cooperative_group_count_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_suggest_max_cooperative_group_count_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_max_cooperative_group_count_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptotalGroupCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_suggest_max_cooperative_group_count_params_t),
            "::",
            stringify!(ptotalGroupCount)
        )
    );
}
pub type ze_kernel_suggest_max_cooperative_group_count_params_t =
    _ze_kernel_suggest_max_cooperative_group_count_params_t;
pub type ze_pfnKernelSuggestMaxCooperativeGroupCountCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_suggest_max_cooperative_group_count_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_set_argument_value_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pargIndex: *mut u32,
    pub pargSize: *mut usize,
    pub ppArgValue: *mut *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_kernel_set_argument_value_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_set_argument_value_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_set_argument_value_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_set_argument_value_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_set_argument_value_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_set_argument_value_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_argument_value_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pargIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_argument_value_params_t),
            "::",
            stringify!(pargIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pargSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_argument_value_params_t),
            "::",
            stringify!(pargSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppArgValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_argument_value_params_t),
            "::",
            stringify!(ppArgValue)
        )
    );
}
pub type ze_kernel_set_argument_value_params_t = _ze_kernel_set_argument_value_params_t;
pub type ze_pfnKernelSetArgumentValueCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_set_argument_value_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_set_indirect_access_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pflags: *mut ze_kernel_indirect_access_flags_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_set_indirect_access_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_set_indirect_access_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_set_indirect_access_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_set_indirect_access_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_set_indirect_access_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_set_indirect_access_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_indirect_access_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_set_indirect_access_params_t),
            "::",
            stringify!(pflags)
        )
    );
}
pub type ze_kernel_set_indirect_access_params_t = _ze_kernel_set_indirect_access_params_t;
pub type ze_pfnKernelSetIndirectAccessCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_set_indirect_access_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_get_indirect_access_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppFlags: *mut *mut ze_kernel_indirect_access_flags_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_get_indirect_access_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_get_indirect_access_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_get_indirect_access_params_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_get_indirect_access_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_get_indirect_access_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_get_indirect_access_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_indirect_access_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppFlags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_indirect_access_params_t),
            "::",
            stringify!(ppFlags)
        )
    );
}
pub type ze_kernel_get_indirect_access_params_t = _ze_kernel_get_indirect_access_params_t;
pub type ze_pfnKernelGetIndirectAccessCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_get_indirect_access_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_get_source_attributes_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppSize: *mut *mut u32,
    pub ppString: *mut *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ze_kernel_get_source_attributes_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_get_source_attributes_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_get_source_attributes_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_ze_kernel_get_source_attributes_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_get_source_attributes_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_get_source_attributes_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_source_attributes_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_source_attributes_params_t),
            "::",
            stringify!(ppSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppString) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_source_attributes_params_t),
            "::",
            stringify!(ppString)
        )
    );
}
pub type ze_kernel_get_source_attributes_params_t = _ze_kernel_get_source_attributes_params_t;
pub type ze_pfnKernelGetSourceAttributesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_get_source_attributes_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_get_properties_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppKernelProperties: *mut *mut ze_kernel_properties_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_get_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_get_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_get_properties_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_kernel_get_properties_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_get_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_kernel_get_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_properties_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppKernelProperties) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_properties_params_t),
            "::",
            stringify!(ppKernelProperties)
        )
    );
}
pub type ze_kernel_get_properties_params_t = _ze_kernel_get_properties_params_t;
pub type ze_pfnKernelGetPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_get_name_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppSize: *mut *mut usize,
    pub ppName: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ze_kernel_get_name_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_get_name_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_get_name_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_kernel_get_name_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_get_name_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_get_name_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_name_params_t),
            "::",
            stringify!(phKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_name_params_t),
            "::",
            stringify!(ppSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_get_name_params_t),
            "::",
            stringify!(ppName)
        )
    );
}
pub type ze_kernel_get_name_params_t = _ze_kernel_get_name_params_t;
pub type ze_pfnKernelGetNameCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_kernel_get_name_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_callbacks_t {
    pub pfnCreateCb: ze_pfnKernelCreateCb_t,
    pub pfnDestroyCb: ze_pfnKernelDestroyCb_t,
    pub pfnSetCacheConfigCb: ze_pfnKernelSetCacheConfigCb_t,
    pub pfnSetGroupSizeCb: ze_pfnKernelSetGroupSizeCb_t,
    pub pfnSuggestGroupSizeCb: ze_pfnKernelSuggestGroupSizeCb_t,
    pub pfnSuggestMaxCooperativeGroupCountCb: ze_pfnKernelSuggestMaxCooperativeGroupCountCb_t,
    pub pfnSetArgumentValueCb: ze_pfnKernelSetArgumentValueCb_t,
    pub pfnSetIndirectAccessCb: ze_pfnKernelSetIndirectAccessCb_t,
    pub pfnGetIndirectAccessCb: ze_pfnKernelGetIndirectAccessCb_t,
    pub pfnGetSourceAttributesCb: ze_pfnKernelGetSourceAttributesCb_t,
    pub pfnGetPropertiesCb: ze_pfnKernelGetPropertiesCb_t,
    pub pfnGetNameCb: ze_pfnKernelGetNameCb_t,
}
#[test]
fn bindgen_test_layout__ze_kernel_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_kernel_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_kernel_callbacks_t>(),
        96usize,
        concat!("Size of: ", stringify!(_ze_kernel_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_kernel_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_kernel_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetCacheConfigCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnSetCacheConfigCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetGroupSizeCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnSetGroupSizeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSuggestGroupSizeCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnSuggestGroupSizeCb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnSuggestMaxCooperativeGroupCountCb) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnSuggestMaxCooperativeGroupCountCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetArgumentValueCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnSetArgumentValueCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetIndirectAccessCb) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnSetIndirectAccessCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetIndirectAccessCb) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnGetIndirectAccessCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetSourceAttributesCb) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnGetSourceAttributesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetPropertiesCb) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnGetPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetNameCb) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_kernel_callbacks_t),
            "::",
            stringify!(pfnGetNameCb)
        )
    );
}
pub type ze_kernel_callbacks_t = _ze_kernel_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_sampler_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_sampler_desc_t,
    pub pphSampler: *mut *mut ze_sampler_handle_t,
}
#[test]
fn bindgen_test_layout__ze_sampler_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_sampler_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_sampler_create_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_sampler_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_sampler_create_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_sampler_create_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_create_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_create_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphSampler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_create_params_t),
            "::",
            stringify!(pphSampler)
        )
    );
}
pub type ze_sampler_create_params_t = _ze_sampler_create_params_t;
pub type ze_pfnSamplerCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_sampler_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_sampler_destroy_params_t {
    pub phSampler: *mut ze_sampler_handle_t,
}
#[test]
fn bindgen_test_layout__ze_sampler_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_sampler_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_sampler_destroy_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ze_sampler_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_sampler_destroy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_sampler_destroy_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phSampler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_destroy_params_t),
            "::",
            stringify!(phSampler)
        )
    );
}
pub type ze_sampler_destroy_params_t = _ze_sampler_destroy_params_t;
pub type ze_pfnSamplerDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_sampler_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_sampler_callbacks_t {
    pub pfnCreateCb: ze_pfnSamplerCreateCb_t,
    pub pfnDestroyCb: ze_pfnSamplerDestroyCb_t,
}
#[test]
fn bindgen_test_layout__ze_sampler_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_sampler_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_sampler_callbacks_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_sampler_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_sampler_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_sampler_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_sampler_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
}
pub type ze_sampler_callbacks_t = _ze_sampler_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_physical_mem_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *mut ze_physical_mem_desc_t,
    pub pphPhysicalMemory: *mut *mut ze_physical_mem_handle_t,
}
#[test]
fn bindgen_test_layout__ze_physical_mem_create_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_physical_mem_create_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_physical_mem_create_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_physical_mem_create_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_physical_mem_create_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_physical_mem_create_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_create_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_create_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_create_params_t),
            "::",
            stringify!(pdesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphPhysicalMemory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_create_params_t),
            "::",
            stringify!(pphPhysicalMemory)
        )
    );
}
pub type ze_physical_mem_create_params_t = _ze_physical_mem_create_params_t;
pub type ze_pfnPhysicalMemCreateCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_physical_mem_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_physical_mem_destroy_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phPhysicalMemory: *mut ze_physical_mem_handle_t,
}
#[test]
fn bindgen_test_layout__ze_physical_mem_destroy_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_physical_mem_destroy_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_physical_mem_destroy_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_physical_mem_destroy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_physical_mem_destroy_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_physical_mem_destroy_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_destroy_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phPhysicalMemory) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_destroy_params_t),
            "::",
            stringify!(phPhysicalMemory)
        )
    );
}
pub type ze_physical_mem_destroy_params_t = _ze_physical_mem_destroy_params_t;
pub type ze_pfnPhysicalMemDestroyCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_physical_mem_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_physical_mem_callbacks_t {
    pub pfnCreateCb: ze_pfnPhysicalMemCreateCb_t,
    pub pfnDestroyCb: ze_pfnPhysicalMemDestroyCb_t,
}
#[test]
fn bindgen_test_layout__ze_physical_mem_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_physical_mem_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_physical_mem_callbacks_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_physical_mem_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_physical_mem_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_physical_mem_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCreateCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_callbacks_t),
            "::",
            stringify!(pfnCreateCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDestroyCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_physical_mem_callbacks_t),
            "::",
            stringify!(pfnDestroyCb)
        )
    );
}
pub type ze_physical_mem_callbacks_t = _ze_physical_mem_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_alloc_shared_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pdevice_desc: *mut *const ze_device_mem_alloc_desc_t,
    pub phost_desc: *mut *const ze_host_mem_alloc_desc_t,
    pub psize: *mut usize,
    pub palignment: *mut usize,
    pub phDevice: *mut ze_device_handle_t,
    pub ppptr: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_mem_alloc_shared_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_alloc_shared_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_alloc_shared_params_t>(),
        56usize,
        concat!("Size of: ", stringify!(_ze_mem_alloc_shared_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_alloc_shared_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_mem_alloc_shared_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_shared_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdevice_desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_shared_params_t),
            "::",
            stringify!(pdevice_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phost_desc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_shared_params_t),
            "::",
            stringify!(phost_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_shared_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palignment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_shared_params_t),
            "::",
            stringify!(palignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_shared_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppptr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_shared_params_t),
            "::",
            stringify!(ppptr)
        )
    );
}
pub type ze_mem_alloc_shared_params_t = _ze_mem_alloc_shared_params_t;
pub type ze_pfnMemAllocSharedCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_alloc_shared_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_alloc_device_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pdevice_desc: *mut *const ze_device_mem_alloc_desc_t,
    pub psize: *mut usize,
    pub palignment: *mut usize,
    pub phDevice: *mut ze_device_handle_t,
    pub ppptr: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_mem_alloc_device_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_alloc_device_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_alloc_device_params_t>(),
        48usize,
        concat!("Size of: ", stringify!(_ze_mem_alloc_device_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_alloc_device_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_mem_alloc_device_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_device_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdevice_desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_device_params_t),
            "::",
            stringify!(pdevice_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_device_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palignment) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_device_params_t),
            "::",
            stringify!(palignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_device_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_device_params_t),
            "::",
            stringify!(ppptr)
        )
    );
}
pub type ze_mem_alloc_device_params_t = _ze_mem_alloc_device_params_t;
pub type ze_pfnMemAllocDeviceCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_alloc_device_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_alloc_host_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phost_desc: *mut *const ze_host_mem_alloc_desc_t,
    pub psize: *mut usize,
    pub palignment: *mut usize,
    pub ppptr: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_mem_alloc_host_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_alloc_host_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_alloc_host_params_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_mem_alloc_host_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_alloc_host_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_mem_alloc_host_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_host_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phost_desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_host_params_t),
            "::",
            stringify!(phost_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_host_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palignment) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_host_params_t),
            "::",
            stringify!(palignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_alloc_host_params_t),
            "::",
            stringify!(ppptr)
        )
    );
}
pub type ze_mem_alloc_host_params_t = _ze_mem_alloc_host_params_t;
pub type ze_pfnMemAllocHostCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_alloc_host_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_free_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_mem_free_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_free_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_free_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_mem_free_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_free_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_mem_free_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_free_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_free_params_t),
            "::",
            stringify!(pptr)
        )
    );
}
pub type ze_mem_free_params_t = _ze_mem_free_params_t;
pub type ze_pfnMemFreeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_free_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_get_alloc_properties_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub ppMemAllocProperties: *mut *mut ze_memory_allocation_properties_t,
    pub pphDevice: *mut *mut ze_device_handle_t,
}
#[test]
fn bindgen_test_layout__ze_mem_get_alloc_properties_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_get_alloc_properties_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_get_alloc_properties_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_mem_get_alloc_properties_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_get_alloc_properties_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_mem_get_alloc_properties_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_alloc_properties_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_alloc_properties_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppMemAllocProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_alloc_properties_params_t),
            "::",
            stringify!(ppMemAllocProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pphDevice) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_alloc_properties_params_t),
            "::",
            stringify!(pphDevice)
        )
    );
}
pub type ze_mem_get_alloc_properties_params_t = _ze_mem_get_alloc_properties_params_t;
pub type ze_pfnMemGetAllocPropertiesCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_get_alloc_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_get_address_range_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub ppBase: *mut *mut *mut ::std::os::raw::c_void,
    pub ppSize: *mut *mut usize,
}
#[test]
fn bindgen_test_layout__ze_mem_get_address_range_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_get_address_range_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_get_address_range_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_mem_get_address_range_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_get_address_range_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_mem_get_address_range_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_address_range_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_address_range_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppBase) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_address_range_params_t),
            "::",
            stringify!(ppBase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_address_range_params_t),
            "::",
            stringify!(ppSize)
        )
    );
}
pub type ze_mem_get_address_range_params_t = _ze_mem_get_address_range_params_t;
pub type ze_pfnMemGetAddressRangeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_get_address_range_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_get_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub ppIpcHandle: *mut *mut ze_ipc_mem_handle_t,
}
#[test]
fn bindgen_test_layout__ze_mem_get_ipc_handle_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_get_ipc_handle_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_get_ipc_handle_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_mem_get_ipc_handle_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_get_ipc_handle_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_mem_get_ipc_handle_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_ipc_handle_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_ipc_handle_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppIpcHandle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_get_ipc_handle_params_t),
            "::",
            stringify!(ppIpcHandle)
        )
    );
}
pub type ze_mem_get_ipc_handle_params_t = _ze_mem_get_ipc_handle_params_t;
pub type ze_pfnMemGetIpcHandleCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_get_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_open_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub phandle: *mut ze_ipc_mem_handle_t,
    pub pflags: *mut ze_ipc_memory_flags_t,
    pub ppptr: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_mem_open_ipc_handle_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_open_ipc_handle_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_open_ipc_handle_params_t>(),
        40usize,
        concat!("Size of: ", stringify!(_ze_mem_open_ipc_handle_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_open_ipc_handle_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_mem_open_ipc_handle_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_open_ipc_handle_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_open_ipc_handle_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phandle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_open_ipc_handle_params_t),
            "::",
            stringify!(phandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pflags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_open_ipc_handle_params_t),
            "::",
            stringify!(pflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_open_ipc_handle_params_t),
            "::",
            stringify!(ppptr)
        )
    );
}
pub type ze_mem_open_ipc_handle_params_t = _ze_mem_open_ipc_handle_params_t;
pub type ze_pfnMemOpenIpcHandleCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_open_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_close_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_mem_close_ipc_handle_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_close_ipc_handle_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_close_ipc_handle_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(_ze_mem_close_ipc_handle_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_close_ipc_handle_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_mem_close_ipc_handle_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_close_ipc_handle_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_close_ipc_handle_params_t),
            "::",
            stringify!(pptr)
        )
    );
}
pub type ze_mem_close_ipc_handle_params_t = _ze_mem_close_ipc_handle_params_t;
pub type ze_pfnMemCloseIpcHandleCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_mem_close_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_mem_callbacks_t {
    pub pfnAllocSharedCb: ze_pfnMemAllocSharedCb_t,
    pub pfnAllocDeviceCb: ze_pfnMemAllocDeviceCb_t,
    pub pfnAllocHostCb: ze_pfnMemAllocHostCb_t,
    pub pfnFreeCb: ze_pfnMemFreeCb_t,
    pub pfnGetAllocPropertiesCb: ze_pfnMemGetAllocPropertiesCb_t,
    pub pfnGetAddressRangeCb: ze_pfnMemGetAddressRangeCb_t,
    pub pfnGetIpcHandleCb: ze_pfnMemGetIpcHandleCb_t,
    pub pfnOpenIpcHandleCb: ze_pfnMemOpenIpcHandleCb_t,
    pub pfnCloseIpcHandleCb: ze_pfnMemCloseIpcHandleCb_t,
}
#[test]
fn bindgen_test_layout__ze_mem_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_mem_callbacks_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_mem_callbacks_t>(),
        72usize,
        concat!("Size of: ", stringify!(_ze_mem_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_mem_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_mem_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAllocSharedCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnAllocSharedCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAllocDeviceCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnAllocDeviceCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAllocHostCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnAllocHostCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnFreeCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnFreeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetAllocPropertiesCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnGetAllocPropertiesCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetAddressRangeCb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnGetAddressRangeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetIpcHandleCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnGetIpcHandleCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnOpenIpcHandleCb) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnOpenIpcHandleCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCloseIpcHandleCb) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_mem_callbacks_t),
            "::",
            stringify!(pfnCloseIpcHandleCb)
        )
    );
}
pub type ze_mem_callbacks_t = _ze_mem_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_reserve_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub ppStart: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
    pub ppptr: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_reserve_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_reserve_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_reserve_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(_ze_virtual_mem_reserve_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_reserve_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_virtual_mem_reserve_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_reserve_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_reserve_params_t),
            "::",
            stringify!(ppStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_reserve_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppptr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_reserve_params_t),
            "::",
            stringify!(ppptr)
        )
    );
}
pub type ze_virtual_mem_reserve_params_t = _ze_virtual_mem_reserve_params_t;
pub type ze_pfnVirtualMemReserveCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_virtual_mem_reserve_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_free_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_free_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_free_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_free_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_virtual_mem_free_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_free_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_virtual_mem_free_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_free_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_free_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_free_params_t),
            "::",
            stringify!(psize)
        )
    );
}
pub type ze_virtual_mem_free_params_t = _ze_virtual_mem_free_params_t;
pub type ze_pfnVirtualMemFreeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_virtual_mem_free_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_query_page_size_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub psize: *mut usize,
    pub ppagesize: *mut *mut usize,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_query_page_size_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_query_page_size_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_query_page_size_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_virtual_mem_query_page_size_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_query_page_size_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_virtual_mem_query_page_size_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_query_page_size_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_query_page_size_params_t),
            "::",
            stringify!(phDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_query_page_size_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppagesize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_query_page_size_params_t),
            "::",
            stringify!(ppagesize)
        )
    );
}
pub type ze_virtual_mem_query_page_size_params_t = _ze_virtual_mem_query_page_size_params_t;
pub type ze_pfnVirtualMemQueryPageSizeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_virtual_mem_query_page_size_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_map_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
    pub phPhysicalMemory: *mut ze_physical_mem_handle_t,
    pub poffset: *mut usize,
    pub paccess: *mut ze_memory_access_attribute_t,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_map_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_map_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_map_params_t>(),
        48usize,
        concat!("Size of: ", stringify!(_ze_virtual_mem_map_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_map_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_virtual_mem_map_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_map_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_map_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_map_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phPhysicalMemory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_map_params_t),
            "::",
            stringify!(phPhysicalMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_map_params_t),
            "::",
            stringify!(poffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paccess) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_map_params_t),
            "::",
            stringify!(paccess)
        )
    );
}
pub type ze_virtual_mem_map_params_t = _ze_virtual_mem_map_params_t;
pub type ze_pfnVirtualMemMapCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_virtual_mem_map_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_unmap_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_unmap_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_unmap_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_unmap_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(_ze_virtual_mem_unmap_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_unmap_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_virtual_mem_unmap_params_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_unmap_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_unmap_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_unmap_params_t),
            "::",
            stringify!(psize)
        )
    );
}
pub type ze_virtual_mem_unmap_params_t = _ze_virtual_mem_unmap_params_t;
pub type ze_pfnVirtualMemUnmapCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_virtual_mem_unmap_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_set_access_attribute_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
    pub paccess: *mut ze_memory_access_attribute_t,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_set_access_attribute_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_set_access_attribute_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_set_access_attribute_params_t>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ze_virtual_mem_set_access_attribute_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_set_access_attribute_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_virtual_mem_set_access_attribute_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_set_access_attribute_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_set_access_attribute_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_set_access_attribute_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paccess) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_set_access_attribute_params_t),
            "::",
            stringify!(paccess)
        )
    );
}
pub type ze_virtual_mem_set_access_attribute_params_t =
    _ze_virtual_mem_set_access_attribute_params_t;
pub type ze_pfnVirtualMemSetAccessAttributeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_virtual_mem_set_access_attribute_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_get_access_attribute_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::std::os::raw::c_void,
    pub psize: *mut usize,
    pub paccess: *mut *mut ze_memory_access_attribute_t,
    pub poutSize: *mut *mut usize,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_get_access_attribute_params_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_get_access_attribute_params_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_get_access_attribute_params_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(_ze_virtual_mem_get_access_attribute_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_get_access_attribute_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ze_virtual_mem_get_access_attribute_params_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_get_access_attribute_params_t),
            "::",
            stringify!(phContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_get_access_attribute_params_t),
            "::",
            stringify!(pptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_get_access_attribute_params_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paccess) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_get_access_attribute_params_t),
            "::",
            stringify!(paccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poutSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_get_access_attribute_params_t),
            "::",
            stringify!(poutSize)
        )
    );
}
pub type ze_virtual_mem_get_access_attribute_params_t =
    _ze_virtual_mem_get_access_attribute_params_t;
pub type ze_pfnVirtualMemGetAccessAttributeCb_t = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_virtual_mem_get_access_attribute_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::std::os::raw::c_void,
        ppTracerInstanceUserData: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_virtual_mem_callbacks_t {
    pub pfnReserveCb: ze_pfnVirtualMemReserveCb_t,
    pub pfnFreeCb: ze_pfnVirtualMemFreeCb_t,
    pub pfnQueryPageSizeCb: ze_pfnVirtualMemQueryPageSizeCb_t,
    pub pfnMapCb: ze_pfnVirtualMemMapCb_t,
    pub pfnUnmapCb: ze_pfnVirtualMemUnmapCb_t,
    pub pfnSetAccessAttributeCb: ze_pfnVirtualMemSetAccessAttributeCb_t,
    pub pfnGetAccessAttributeCb: ze_pfnVirtualMemGetAccessAttributeCb_t,
}
#[test]
fn bindgen_test_layout__ze_virtual_mem_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_virtual_mem_callbacks_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_virtual_mem_callbacks_t>(),
        56usize,
        concat!("Size of: ", stringify!(_ze_virtual_mem_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_virtual_mem_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_virtual_mem_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnReserveCb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_callbacks_t),
            "::",
            stringify!(pfnReserveCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnFreeCb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_callbacks_t),
            "::",
            stringify!(pfnFreeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnQueryPageSizeCb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_callbacks_t),
            "::",
            stringify!(pfnQueryPageSizeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnMapCb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_callbacks_t),
            "::",
            stringify!(pfnMapCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnUnmapCb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_callbacks_t),
            "::",
            stringify!(pfnUnmapCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetAccessAttributeCb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_callbacks_t),
            "::",
            stringify!(pfnSetAccessAttributeCb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetAccessAttributeCb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_virtual_mem_callbacks_t),
            "::",
            stringify!(pfnGetAccessAttributeCb)
        )
    );
}
pub type ze_virtual_mem_callbacks_t = _ze_virtual_mem_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_callbacks_t {
    pub Global: ze_global_callbacks_t,
    pub Driver: ze_driver_callbacks_t,
    pub Device: ze_device_callbacks_t,
    pub Context: ze_context_callbacks_t,
    pub CommandQueue: ze_command_queue_callbacks_t,
    pub CommandList: ze_command_list_callbacks_t,
    pub Fence: ze_fence_callbacks_t,
    pub EventPool: ze_event_pool_callbacks_t,
    pub Event: ze_event_callbacks_t,
    pub Image: ze_image_callbacks_t,
    pub Module: ze_module_callbacks_t,
    pub ModuleBuildLog: ze_module_build_log_callbacks_t,
    pub Kernel: ze_kernel_callbacks_t,
    pub Sampler: ze_sampler_callbacks_t,
    pub PhysicalMem: ze_physical_mem_callbacks_t,
    pub Mem: ze_mem_callbacks_t,
    pub VirtualMem: ze_virtual_mem_callbacks_t,
}
#[test]
fn bindgen_test_layout__ze_callbacks_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ze_callbacks_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ze_callbacks_t>(),
        960usize,
        concat!("Size of: ", stringify!(_ze_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ze_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_ze_callbacks_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Global) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Global)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Driver) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Driver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Device) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Context) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommandQueue) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(CommandQueue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CommandList) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(CommandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fence) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventPool) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(EventPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Event) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Image) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Module) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ModuleBuildLog) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(ModuleBuildLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Kernel) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Kernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Sampler) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhysicalMem) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(PhysicalMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mem) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(Mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualMem) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(_ze_callbacks_t),
            "::",
            stringify!(VirtualMem)
        )
    );
}
pub type ze_callbacks_t = _ze_callbacks_t;
